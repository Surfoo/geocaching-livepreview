function W2(Z){let $=-1;for(let J of Z)$+=J.length+1;return $}function z7(Z,$,J=0,Q=1e9){for(let X=0,K=0,Y=!0;K<Z.length&&X<=Q;K++){let U=Z[K],q=X+U.length;if(q>=J){if(q>Q)U=U.slice(0,Q-X);if(X<J)U=U.slice(J-X);if(Y)$[$.length-1]+=U,Y=!1;else $.push(U)}X=q+1}return $}function b8(Z,$,J){return z7(Z,[""],$,J)}function r9(Z,$,J){return $=Math.max(0,Math.min(Z.length,$)),[$,Math.max($,Math.min(Z.length,J))]}function z2(Z){for(let $=1;$<n9.length;$+=2)if(n9[$]>Z)return n9[$-1]<=Z;return!1}function k8(Z){return Z>=127462&&Z<=127487}function Q3(Z,$,J=!0,Q=!0){return(J?g8:j2)(Z,$,Q)}function g8(Z,$,J){if($==Z.length)return $;if($&&l8(Z.charCodeAt($))&&p8(Z.charCodeAt($-1)))$--;let Q=C3(Z,$);$+=c3(Q);while($<Z.length){let X=C3(Z,$);if(Q==x8||X==x8||J&&z2(X))$+=c3(X),Q=X;else if(k8(X)){let K=0,Y=$-2;while(Y>=0&&k8(C3(Z,Y)))K++,Y-=2;if(K%2==0)break;else $+=2}else break}return $}function j2(Z,$,J){while($>0){let Q=g8(Z,$-2,J);if(Q<$)return Q;$--}return 0}function l8(Z){return Z>=56320&&Z<57344}function p8(Z){return Z>=55296&&Z<56320}function C3(Z,$){let J=Z.charCodeAt($);if(!p8(J)||$+1==Z.length)return J;let Q=Z.charCodeAt($+1);if(!l8(Q))return J;return(J-55296<<10)+(Q-56320)+65536}function d8(Z){if(Z<=65535)return String.fromCharCode(Z);return Z-=65536,String.fromCharCode((Z>>10)+55296,(Z&1023)+56320)}function c3(Z){return Z<65536?1:2}function U3(Z,$,J,Q=!1){if($==0&&J<=0)return;let X=Z.length-2;if(X>=0&&J<=0&&J==Z[X+1])Z[X]+=$;else if($==0&&Z[X]==0)Z[X+1]+=J;else if(Q)Z[X]+=$,Z[X+1]+=J;else Z.push($,J)}function _9(Z,$,J){if(J.length==0)return;let Q=$.length-2>>1;if(Q<Z.length)Z[Z.length-1]=Z[Z.length-1].append(J);else{while(Z.length<Q)Z.push(b.empty);Z.push(J)}}function OZ(Z,$,J){let Q=Z.inserted;for(let X=0,K=0,Y=0;Y<Z.sections.length;){let U=Z.sections[Y++],q=Z.sections[Y++];if(q<0)X+=U,K+=U;else{let W=X,G=K,z=b.empty;for(;;){if(W+=U,G+=q,q&&Q)z=z.append(Q[Y-2>>1]);if(J||Y==Z.sections.length||Z.sections[Y+1]<0)break;U=Z.sections[Y++],q=Z.sections[Y++]}$(X,W,K,G,z),X=W,K=G}}}function HZ(Z,$,J,Q=!1){let X=[],K=Q?[]:null,Y=new o9(Z),U=new o9($);for(let q=-1;;)if(Y.ins==-1&&U.ins==-1){let W=Math.min(Y.len,U.len);U3(X,W,-1),Y.forward(W),U.forward(W)}else if(U.ins>=0&&(Y.ins<0||q==Y.i||Y.off==0&&(U.len<Y.len||U.len==Y.len&&!J))){let W=U.len;U3(X,U.ins,-1);while(W){let G=Math.min(Y.len,W);if(Y.ins>=0&&q<Y.i&&Y.len<=G){if(U3(X,0,Y.ins),K)_9(K,X,Y.text);q=Y.i}Y.forward(G),W-=G}U.next()}else if(Y.ins>=0){let W=0,G=Y.len;while(G)if(U.ins==-1){let z=Math.min(G,U.len);W+=z,G-=z,U.forward(z)}else if(U.ins==0&&U.len<G)G-=U.len,U.next();else break;if(U3(X,W,q<Y.i?Y.ins:0),K&&q<Y.i)_9(K,X,Y.text);q=Y.i,Y.forward(Y.len-G)}else if(Y.done&&U.done)return K?e.createSet(X,K):h3.create(X);else throw new Error("Mismatched change set lengths")}function c8(Z,$,J=!1){let Q=[],X=J?[]:null,K=new o9(Z),Y=new o9($);for(let U=!1;;)if(K.done&&Y.done)return X?e.createSet(Q,X):h3.create(Q);else if(K.ins==0)U3(Q,K.len,0,U),K.next();else if(Y.len==0&&!Y.done){if(U3(Q,0,Y.ins,U),X)_9(X,Q,Y.text);Y.next()}else if(K.done||Y.done)throw new Error("Mismatched change set lengths");else{let q=Math.min(K.len2,Y.len),W=Q.length;if(K.ins==-1){let G=Y.ins==-1?-1:Y.off?0:Y.ins;if(U3(Q,q,G,U),X&&G)_9(X,Q,Y.text)}else if(Y.ins==-1){if(U3(Q,K.off?0:K.len,q,U),X)_9(X,Q,K.textBit(q))}else if(U3(Q,K.off?0:K.len,Y.off?0:Y.ins,U),X&&!Y.off)_9(X,Q,Y.text);U=(K.ins>q||Y.ins>=0&&Y.len>q)&&(U||Q.length>W),K.forward2(q),Y.forward(q)}}function s8(Z,$){for(let J of Z.ranges)if(J.to>$)throw new RangeError("Selection points outside of document")}function BZ(Z,$){return Z==$||Z.length==$.length&&Z.every((J,Q)=>J===$[Q])}function w8(Z,$,J){if(Z.length!=$.length)return!1;for(let Q=0;Q<Z.length;Q++)if(!J(Z[Q],$[Q]))return!1;return!0}function FZ(Z,$){let J=!1;for(let Q of $)if(A5(Z,Q)&1)J=!0;return J}function _2(Z,$,J){let Q=J.map((q)=>Z[q.id]),X=J.map((q)=>q.type),K=Q.filter((q)=>!(q&1)),Y=Z[$.id]>>1;function U(q){let W=[];for(let G=0;G<Q.length;G++){let z=O7(q,Q[G]);if(X[G]==2)for(let j of z)W.push(j);else W.push(z)}return $.combine(W)}return{create(q){for(let W of Q)A5(q,W);return q.values[Y]=U(q),1},update(q,W){if(!FZ(q,K))return 0;let G=U(q);if($.compare(G,q.values[Y]))return 0;return q.values[Y]=G,1},reconfigure(q,W){let G=FZ(q,Q),z=W.config.facets[$.id],j=W.facet($);if(z&&!G&&BZ(J,z))return q.values[Y]=j,0;let _=U(q);if($.compare(_,j))return q.values[Y]=j,0;return q.values[Y]=_,1}}}function I5(Z){return($)=>new EZ($,Z)}function O2(Z,$,J){let Q=[[],[],[],[],[]],X=new Map;function K(Y,U){let q=X.get(Y);if(q!=null){if(q<=U)return;let W=Q[q].indexOf(Y);if(W>-1)Q[q].splice(W,1);if(Y instanceof j7)J.delete(Y.compartment)}if(X.set(Y,U),Array.isArray(Y))for(let W of Y)K(W,U);else if(Y instanceof j7){if(J.has(Y.compartment))throw new RangeError("Duplicate use of compartment in extensions");let W=$.get(Y.compartment)||Y.inner;J.set(Y.compartment,W),K(W,U)}else if(Y instanceof EZ)K(Y.inner,Y.prec);else if(Y instanceof F3){if(Q[U].push(Y),Y.provides)K(Y.provides,U)}else if(Y instanceof M5){if(Q[U].push(Y),Y.facet.extensions)K(Y.facet.extensions,P9.default)}else{let W=Y.extension;if(!W)throw new Error(`Unrecognized extension value in extension set (${Y}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);K(W,U)}}return K(Z,P9.default),Q.reduce((Y,U)=>Y.concat(U))}function A5(Z,$){if($&1)return 2;let J=$>>1,Q=Z.status[J];if(Q==4)throw new Error("Cyclic dependency between fields and/or facets");if(Q&2)return Q;Z.status[J]=4;let X=Z.computeSlot(Z,Z.config.dynamicSlots[J]);return Z.status[J]=2|X}function O7(Z,$){return $&1?Z.config.staticValues[$>>1]:Z.values[$>>1]}function H2(Z,$){let J=[];for(let Q=0,X=0;;){let K,Y;if(Q<Z.length&&(X==$.length||$[X]>=Z[Q]))K=Z[Q++],Y=Z[Q++];else if(X<$.length)K=$[X++],Y=$[X++];else return J;if(!J.length||J[J.length-1]<K)J.push(K,Y);else if(J[J.length-1]<Y)J[J.length-1]=Y}}function $0(Z,$,J){var Q;let X,K,Y;if(J)X=$.changes,K=e.empty($.changes.length),Y=Z.changes.compose($.changes);else X=$.changes.map(Z.changes),K=Z.changes.mapDesc($.changes,!0),Y=Z.changes.compose(X);return{changes:Y,selection:$.selection?$.selection.map(K):(Q=Z.selection)===null||Q===void 0?void 0:Q.map(X),effects:v.mapEffects(Z.effects,X).concat(v.mapEffects($.effects,K)),annotations:Z.annotations.length?Z.annotations.concat($.annotations):$.annotations,scrollIntoView:Z.scrollIntoView||$.scrollIntoView}}function DZ(Z,$,J){let Q=$.selection,X=a9($.annotations);if($.userEvent)X=X.concat(a.userEvent.of($.userEvent));return{changes:$.changes instanceof e?$.changes:e.of($.changes||[],J,Z.facet(n8)),selection:Q&&(Q instanceof R?Q:R.single(Q.anchor,Q.head)),effects:a9($.effects),annotations:X,scrollIntoView:!!$.scrollIntoView}}function J0(Z,$,J){let Q=DZ(Z,$.length?$[0]:{},Z.doc.length);if($.length&&$[0].filter===!1)J=!1;for(let K=1;K<$.length;K++){if($[K].filter===!1)J=!1;let Y=!!$[K].sequential;Q=$0(Q,DZ(Z,$[K],Y?Q.changes.newLength:Z.doc.length),Y)}let X=a.create(Z,Q.changes,Q.selection,Q.effects,Q.annotations,Q.scrollIntoView);return N2(J?F2(X):X)}function F2(Z){let $=Z.startState,J=!0;for(let X of $.facet(a8)){let K=X(Z);if(K===!1){J=!1;break}if(Array.isArray(K))J=J===!0?K:H2(J,K)}if(J!==!0){let X,K;if(J===!1)K=Z.changes.invertedDesc,X=e.empty($.doc.length);else{let Y=Z.changes.filter(J);X=Y.changes,K=Y.filtered.mapDesc(Y.changes).invertedDesc}Z=a.create($,X,Z.selection&&Z.selection.map(K),v.mapEffects(Z.effects,K),Z.annotations,Z.scrollIntoView)}let Q=$.facet(r8);for(let X=Q.length-1;X>=0;X--){let K=Q[X](Z);if(K instanceof a)Z=K;else if(Array.isArray(K)&&K.length==1&&K[0]instanceof a)Z=K[0];else Z=J0($,a9(K),!1)}return Z}function N2(Z){let $=Z.startState,J=$.facet(o8),Q=Z;for(let X=J.length-1;X>=0;X--){let K=J[X](Z);if(K&&Object.keys(K).length)Q=$0(Q,DZ($,K,Z.changes.newLength),!0)}return Q==Z?Z:a.create($,Z.changes,Z.selection,Q.effects,Q.annotations,Q.scrollIntoView)}function a9(Z){return Z==null?D2:Array.isArray(Z)?Z:[Z]}function V2(Z){if(RZ)return RZ.test(Z);for(let $=0;$<Z.length;$++){let J=Z[$];if(/\w/.test(J)||J>"\x80"&&(J.toUpperCase()!=J.toLowerCase()||R2.test(J)))return!0}return!1}function I2(Z){return($)=>{if(!/\S/.test($))return P3.Space;if(V2($))return P3.Word;for(let J=0;J<Z.length;J++)if($.indexOf(Z[J])>-1)return P3.Word;return P3.Other}}function y9(Z,$,J={}){let Q={};for(let X of Z)for(let K of Object.keys(X)){let Y=X[K],U=Q[K];if(U===void 0)Q[K]=Y;else if(U===Y||Y===void 0);else if(Object.hasOwnProperty.call(J,K))Q[K]=J[K](U,Y);else throw new Error("Config merge conflict for field "+K)}for(let X in $)if(Q[X]===void 0)Q[X]=$[X];return Q}function VZ(Z,$){return Z.from-$.from||Z.value.startSide-$.value.startSide}function M2(Z){if(Z.length>1)for(let $=Z[0],J=1;J<Z.length;J++){let Q=Z[J];if(VZ($,Q)>0)return Z.slice().sort(VZ);$=Q}return Z}function h8(Z,$,J){let Q=new Map;for(let K of Z)for(let Y=0;Y<K.chunk.length;Y++)if(K.chunk[Y].maxPoint<=0)Q.set(K.chunk[Y],K.chunkPos[Y]);let X=new Set;for(let K of $)for(let Y=0;Y<K.chunk.length;Y++){let U=Q.get(K.chunk[Y]);if(U!=null&&(J?J.mapPos(U):U)==K.chunkPos[Y]&&!(J===null||J===void 0?void 0:J.touchesRange(U,U+K.chunk[Y].length)))X.add(K.chunk[Y])}return X}function jZ(Z,$){for(let J=Z[$];;){let Q=($<<1)+1;if(Q>=Z.length)break;let X=Z[Q];if(Q+1<Z.length&&X.compare(Z[Q+1])>=0)X=Z[Q+1],Q++;if(J.compare(X)<0)break;Z[Q]=J,Z[$]=X,$=Q}}function m8(Z,$,J,Q,X,K){Z.goto($),J.goto(Q);let Y=Q+X,U=Q,q=Q-$;for(;;){let W=Z.to+q-J.to||Z.endSide-J.endSide,G=W<0?Z.to+q:J.to,z=Math.min(G,Y);if(Z.point||J.point){if(!(Z.point&&J.point&&(Z.point==J.point||Z.point.eq(J.point))&&IZ(Z.activeForPoint(Z.to),J.activeForPoint(J.to))))K.comparePoint(U,z,Z.point,J.point)}else if(z>U&&!IZ(Z.active,J.active))K.compareRange(U,z,Z.active,J.active);if(G>Y)break;if(U=G,W<=0)Z.next();if(W>=0)J.next()}}function IZ(Z,$){if(Z.length!=$.length)return!1;for(let J=0;J<Z.length;J++)if(Z[J]!=$[J]&&!Z[J].eq($[J]))return!1;return!0}function G7(Z,$){for(let J=$,Q=Z.length-1;J<Q;J++)Z[J]=Z[J+1];Z.pop()}function W7(Z,$,J){for(let Q=Z.length-1;Q>=$;Q--)Z[Q+1]=Z[Q];Z[$]=J}function u8(Z,$){let J=-1,Q=1e9;for(let X=0;X<$.length;X++)if(($[X]-Q||Z[X].endSide-Z[J].endSide)<0)J=X,Q=$[X];return J}function S9(Z,$,J=Z.length){let Q=0;for(let X=0;X<J;)if(Z.charCodeAt(X)==9)Q+=$-Q%$,X++;else Q++,X=Q3(Z,X);return Q}function Q0(Z,$,J,Q){for(let X=0,K=0;;){if(K>=$)return X;if(X==Z.length)break;K+=Z.charCodeAt(X)==9?J-K%J:1,X=Q3(Z,X)}return Q===!0?-1:Z.length}class b{lineAt(Z){if(Z<0||Z>this.length)throw new RangeError(`Invalid position ${Z} in document of length ${this.length}`);return this.lineInner(Z,!1,1,0)}line(Z){if(Z<1||Z>this.lines)throw new RangeError(`Invalid line number ${Z} in ${this.lines}-line document`);return this.lineInner(Z,!0,1,0)}replace(Z,$,J){[Z,$]=r9(this,Z,$);let Q=[];if(this.decompose(0,Z,Q,2),J.length)J.decompose(0,J.length,Q,3);return this.decompose($,this.length,Q,1),d3.from(Q,this.length-($-Z)+J.length)}append(Z){return this.replace(this.length,this.length,Z)}slice(Z,$=this.length){[Z,$]=r9(this,Z,$);let J=[];return this.decompose(Z,$,J,0),d3.from(J,$-Z)}eq(Z){if(Z==this)return!0;if(Z.length!=this.length||Z.lines!=this.lines)return!1;let $=this.scanIdentical(Z,1),J=this.length-this.scanIdentical(Z,-1),Q=new i9(this),X=new i9(Z);for(let K=$,Y=$;;){if(Q.next(K),X.next(K),K=0,Q.lineBreak!=X.lineBreak||Q.done!=X.done||Q.value!=X.value)return!1;if(Y+=Q.value.length,Q.done||Y>=J)return!0}}iter(Z=1){return new i9(this,Z)}iterRange(Z,$=this.length){return new MZ(this,Z,$)}iterLines(Z,$){let J;if(Z==null)J=this.iter();else{if($==null)$=this.lines+1;let Q=this.line(Z).from;J=this.iterRange(Q,Math.max(Q,$==this.lines+1?this.length:$<=1?0:this.line($-1).to))}return new AZ(J)}toString(){return this.sliceString(0)}toJSON(){let Z=[];return this.flatten(Z),Z}constructor(){}static of(Z){if(Z.length==0)throw new RangeError("A document must have at least one line");if(Z.length==1&&!Z[0])return b.empty;return Z.length<=32?new t(Z):d3.from(t.split(Z,[]))}}class t extends b{constructor(Z,$=W2(Z)){super();this.text=Z,this.length=$}get lines(){return this.text.length}get children(){return null}lineInner(Z,$,J,Q){for(let X=0;;X++){let K=this.text[X],Y=Q+K.length;if(($?J:Y)>=Z)return new f8(Q,Y,J,K);Q=Y+1,J++}}decompose(Z,$,J,Q){let X=Z<=0&&$>=this.length?this:new t(b8(this.text,Z,$),Math.min($,this.length)-Math.max(0,Z));if(Q&1){let K=J.pop(),Y=z7(X.text,K.text.slice(),0,X.length);if(Y.length<=32)J.push(new t(Y,K.length+X.length));else{let U=Y.length>>1;J.push(new t(Y.slice(0,U)),new t(Y.slice(U)))}}else J.push(X)}replace(Z,$,J){if(!(J instanceof t))return super.replace(Z,$,J);[Z,$]=r9(this,Z,$);let Q=z7(this.text,z7(J.text,b8(this.text,0,Z)),$),X=this.length+J.length-($-Z);if(Q.length<=32)return new t(Q,X);return d3.from(t.split(Q,[]),X)}sliceString(Z,$=this.length,J="\n"){[Z,$]=r9(this,Z,$);let Q="";for(let X=0,K=0;X<=$&&K<this.text.length;K++){let Y=this.text[K],U=X+Y.length;if(X>Z&&K)Q+=J;if(Z<U&&$>X)Q+=Y.slice(Math.max(0,Z-X),$-X);X=U+1}return Q}flatten(Z){for(let $ of this.text)Z.push($)}scanIdentical(){return 0}static split(Z,$){let J=[],Q=-1;for(let X of Z)if(J.push(X),Q+=X.length+1,J.length==32)$.push(new t(J,Q)),J=[],Q=-1;if(Q>-1)$.push(new t(J,Q));return $}}class d3 extends b{constructor(Z,$){super();this.children=Z,this.length=$,this.lines=0;for(let J of Z)this.lines+=J.lines}lineInner(Z,$,J,Q){for(let X=0;;X++){let K=this.children[X],Y=Q+K.length,U=J+K.lines-1;if(($?U:Y)>=Z)return K.lineInner(Z,$,J,Q);Q=Y+1,J=U+1}}decompose(Z,$,J,Q){for(let X=0,K=0;K<=$&&X<this.children.length;X++){let Y=this.children[X],U=K+Y.length;if(Z<=U&&$>=K){let q=Q&((K<=Z?1:0)|(U>=$?2:0));if(K>=Z&&U<=$&&!q)J.push(Y);else Y.decompose(Z-K,$-K,J,q)}K=U+1}}replace(Z,$,J){if([Z,$]=r9(this,Z,$),J.lines<this.lines)for(let Q=0,X=0;Q<this.children.length;Q++){let K=this.children[Q],Y=X+K.length;if(Z>=X&&$<=Y){let U=K.replace(Z-X,$-X,J),q=this.lines-K.lines+U.lines;if(U.lines<q>>4&&U.lines>q>>6){let W=this.children.slice();return W[Q]=U,new d3(W,this.length-($-Z)+J.length)}return super.replace(X,Y,U)}X=Y+1}return super.replace(Z,$,J)}sliceString(Z,$=this.length,J="\n"){[Z,$]=r9(this,Z,$);let Q="";for(let X=0,K=0;X<this.children.length&&K<=$;X++){let Y=this.children[X],U=K+Y.length;if(K>Z&&X)Q+=J;if(Z<U&&$>K)Q+=Y.sliceString(Z-K,$-K,J);K=U+1}return Q}flatten(Z){for(let $ of this.children)$.flatten(Z)}scanIdentical(Z,$){if(!(Z instanceof d3))return 0;let J=0,[Q,X,K,Y]=$>0?[0,0,this.children.length,Z.children.length]:[this.children.length-1,Z.children.length-1,-1,-1];for(;;Q+=$,X+=$){if(Q==K||X==Y)return J;let U=this.children[Q],q=Z.children[X];if(U!=q)return J+U.scanIdentical(q,$);J+=U.length+1}}static from(Z,$=Z.reduce((J,Q)=>J+Q.length+1,-1)){let J=0;for(let j of Z)J+=j.lines;if(J<32){let j=[];for(let _ of Z)_.flatten(j);return new t(j,$)}let Q=Math.max(32,J>>5),X=Q<<1,K=Q>>1,Y=[],U=0,q=-1,W=[];function G(j){let _;if(j.lines>X&&j instanceof d3)for(let H of j.children)G(H);else if(j.lines>K&&(U>K||!U))z(),Y.push(j);else if(j instanceof t&&U&&(_=W[W.length-1])instanceof t&&j.lines+_.lines<=32)U+=j.lines,q+=j.length+1,W[W.length-1]=new t(_.text.concat(j.text),_.length+1+j.length);else{if(U+j.lines>Q)z();U+=j.lines,q+=j.length+1,W.push(j)}}function z(){if(U==0)return;Y.push(W.length==1?W[0]:d3.from(W,q)),q=-1,U=W.length=0}for(let j of Z)G(j);return z(),Y.length==1?Y[0]:new d3(Y,$)}}b.empty=new t([""],0);class i9{constructor(Z,$=1){this.dir=$,this.done=!1,this.lineBreak=!1,this.value="",this.nodes=[Z],this.offsets=[$>0?1:(Z instanceof t?Z.text.length:Z.children.length)<<1]}nextInner(Z,$){this.done=this.lineBreak=!1;for(;;){let J=this.nodes.length-1,Q=this.nodes[J],X=this.offsets[J],K=X>>1,Y=Q instanceof t?Q.text.length:Q.children.length;if(K==($>0?Y:0)){if(J==0)return this.done=!0,this.value="",this;if($>0)this.offsets[J-1]++;this.nodes.pop(),this.offsets.pop()}else if((X&1)==($>0?0:1)){if(this.offsets[J]+=$,Z==0)return this.lineBreak=!0,this.value="\n",this;Z--}else if(Q instanceof t){let U=Q.text[K+($<0?-1:0)];if(this.offsets[J]+=$,U.length>Math.max(0,Z))return this.value=Z==0?U:$>0?U.slice(Z):U.slice(0,U.length-Z),this;Z-=U.length}else{let U=Q.children[K+($<0?-1:0)];if(Z>U.length)Z-=U.length,this.offsets[J]+=$;else{if($<0)this.offsets[J]--;this.nodes.push(U),this.offsets.push($>0?1:(U instanceof t?U.text.length:U.children.length)<<1)}}}}next(Z=0){if(Z<0)this.nextInner(-Z,-this.dir),Z=this.value.length;return this.nextInner(Z,this.dir)}}class MZ{constructor(Z,$,J){this.value="",this.done=!1,this.cursor=new i9(Z,$>J?-1:1),this.pos=$>J?Z.length:0,this.from=Math.min($,J),this.to=Math.max($,J)}nextInner(Z,$){if($<0?this.pos<=this.from:this.pos>=this.to)return this.value="",this.done=!0,this;Z+=Math.max(0,$<0?this.pos-this.to:this.from-this.pos);let J=$<0?this.pos-this.from:this.to-this.pos;if(Z>J)Z=J;J-=Z;let{value:Q}=this.cursor.next(Z);return this.pos+=(Q.length+Z)*$,this.value=Q.length<=J?Q:$<0?Q.slice(Q.length-J):Q.slice(0,J),this.done=!this.value,this}next(Z=0){if(Z<0)Z=Math.max(Z,this.from-this.pos);else if(Z>0)Z=Math.min(Z,this.to-this.pos);return this.nextInner(Z,this.cursor.dir)}get lineBreak(){return this.cursor.lineBreak&&this.value!=""}}class AZ{constructor(Z){this.inner=Z,this.afterBreak=!0,this.value="",this.done=!1}next(Z=0){let{done:$,lineBreak:J,value:Q}=this.inner.next(Z);if($&&this.afterBreak)this.value="",this.afterBreak=!1;else if($)this.done=!0,this.value="";else if(J)if(this.afterBreak)this.value="";else this.afterBreak=!0,this.next();else this.value=Q,this.afterBreak=!1;return this}get lineBreak(){return!1}}if(typeof Symbol!="undefined")b.prototype[Symbol.iterator]=function(){return this.iter()},i9.prototype[Symbol.iterator]=MZ.prototype[Symbol.iterator]=AZ.prototype[Symbol.iterator]=function(){return this};class f8{constructor(Z,$,J,Q){this.from=Z,this.to=$,this.number=J,this.text=Q}get length(){return this.to-this.from}}var n9="lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((Z)=>Z?parseInt(Z,36):1);for(let Z=1;Z<n9.length;Z++)n9[Z]+=n9[Z-1];var x8=8205,_Z=/\r\n?|\n/,J3=function(Z){return Z[Z.Simple=0]="Simple",Z[Z.TrackDel=1]="TrackDel",Z[Z.TrackBefore=2]="TrackBefore",Z[Z.TrackAfter=3]="TrackAfter",Z}(J3||(J3={}));class h3{constructor(Z){this.sections=Z}get length(){let Z=0;for(let $=0;$<this.sections.length;$+=2)Z+=this.sections[$];return Z}get newLength(){let Z=0;for(let $=0;$<this.sections.length;$+=2){let J=this.sections[$+1];Z+=J<0?this.sections[$]:J}return Z}get empty(){return this.sections.length==0||this.sections.length==2&&this.sections[1]<0}iterGaps(Z){for(let $=0,J=0,Q=0;$<this.sections.length;){let X=this.sections[$++],K=this.sections[$++];if(K<0)Z(J,Q,X),Q+=X;else Q+=K;J+=X}}iterChangedRanges(Z,$=!1){OZ(this,Z,$)}get invertedDesc(){let Z=[];for(let $=0;$<this.sections.length;){let J=this.sections[$++],Q=this.sections[$++];if(Q<0)Z.push(J,Q);else Z.push(Q,J)}return new h3(Z)}composeDesc(Z){return this.empty?Z:Z.empty?this:c8(this,Z)}mapDesc(Z,$=!1){return Z.empty?this:HZ(this,Z,$)}mapPos(Z,$=-1,J=J3.Simple){let Q=0,X=0;for(let K=0;K<this.sections.length;){let Y=this.sections[K++],U=this.sections[K++],q=Q+Y;if(U<0){if(q>Z)return X+(Z-Q);X+=Y}else{if(J!=J3.Simple&&q>=Z&&(J==J3.TrackDel&&Q<Z&&q>Z||J==J3.TrackBefore&&Q<Z||J==J3.TrackAfter&&q>Z))return null;if(q>Z||q==Z&&$<0&&!Y)return Z==Q||$<0?X:X+U;X+=U}Q=q}if(Z>Q)throw new RangeError(`Position ${Z} is out of range for changeset of length ${Q}`);return X}touchesRange(Z,$=Z){for(let J=0,Q=0;J<this.sections.length&&Q<=$;){let X=this.sections[J++],K=this.sections[J++],Y=Q+X;if(K>=0&&Q<=$&&Y>=Z)return Q<Z&&Y>$?"cover":!0;Q=Y}return!1}toString(){let Z="";for(let $=0;$<this.sections.length;){let J=this.sections[$++],Q=this.sections[$++];Z+=(Z?" ":"")+J+(Q>=0?":"+Q:"")}return Z}toJSON(){return this.sections}static fromJSON(Z){if(!Array.isArray(Z)||Z.length%2||Z.some(($)=>typeof $!="number"))throw new RangeError("Invalid JSON representation of ChangeDesc");return new h3(Z)}static create(Z){return new h3(Z)}}class e extends h3{constructor(Z,$){super(Z);this.inserted=$}apply(Z){if(this.length!=Z.length)throw new RangeError("Applying change set to a document with the wrong length");return OZ(this,($,J,Q,X,K)=>Z=Z.replace(Q,Q+(J-$),K),!1),Z}mapDesc(Z,$=!1){return HZ(this,Z,$,!0)}invert(Z){let $=this.sections.slice(),J=[];for(let Q=0,X=0;Q<$.length;Q+=2){let K=$[Q],Y=$[Q+1];if(Y>=0){$[Q]=Y,$[Q+1]=K;let U=Q>>1;while(J.length<U)J.push(b.empty);J.push(K?Z.slice(X,X+K):b.empty)}X+=K}return new e($,J)}compose(Z){return this.empty?Z:Z.empty?this:c8(this,Z,!0)}map(Z,$=!1){return Z.empty?this:HZ(this,Z,$,!0)}iterChanges(Z,$=!1){OZ(this,Z,$)}get desc(){return h3.create(this.sections)}filter(Z){let $=[],J=[],Q=[],X=new o9(this);Z:for(let K=0,Y=0;;){let U=K==Z.length?1e9:Z[K++];while(Y<U||Y==U&&X.len==0){if(X.done)break Z;let W=Math.min(X.len,U-Y);U3(Q,W,-1);let G=X.ins==-1?-1:X.off==0?X.ins:0;if(U3($,W,G),G>0)_9(J,$,X.text);X.forward(W),Y+=W}let q=Z[K++];while(Y<q){if(X.done)break Z;let W=Math.min(X.len,q-Y);U3($,W,-1),U3(Q,W,X.ins==-1?-1:X.off==0?X.ins:0),X.forward(W),Y+=W}}return{changes:new e($,J),filtered:h3.create(Q)}}toJSON(){let Z=[];for(let $=0;$<this.sections.length;$+=2){let J=this.sections[$],Q=this.sections[$+1];if(Q<0)Z.push(J);else if(Q==0)Z.push([J]);else Z.push([J].concat(this.inserted[$>>1].toJSON()))}return Z}static of(Z,$,J){let Q=[],X=[],K=0,Y=null;function U(W=!1){if(!W&&!Q.length)return;if(K<$)U3(Q,$-K,-1);let G=new e(Q,X);Y=Y?Y.compose(G.map(Y)):G,Q=[],X=[],K=0}function q(W){if(Array.isArray(W))for(let G of W)q(G);else if(W instanceof e){if(W.length!=$)throw new RangeError(`Mismatched change set length (got ${W.length}, expected ${$})`);U(),Y=Y?Y.compose(W.map(Y)):W}else{let{from:G,to:z=G,insert:j}=W;if(G>z||G<0||z>$)throw new RangeError(`Invalid change range ${G} to ${z} (in doc of length ${$})`);let _=!j?b.empty:typeof j=="string"?b.of(j.split(J||_Z)):j,H=_.length;if(G==z&&H==0)return;if(G<K)U();if(G>K)U3(Q,G-K,-1);U3(Q,z-G,H),_9(X,Q,_),K=z}}return q(Z),U(!Y),Y}static empty(Z){return new e(Z?[Z,-1]:[],[])}static fromJSON(Z){if(!Array.isArray(Z))throw new RangeError("Invalid JSON representation of ChangeSet");let $=[],J=[];for(let Q=0;Q<Z.length;Q++){let X=Z[Q];if(typeof X=="number")$.push(X,-1);else if(!Array.isArray(X)||typeof X[0]!="number"||X.some((K,Y)=>Y&&typeof K!="string"))throw new RangeError("Invalid JSON representation of ChangeSet");else if(X.length==1)$.push(X[0],0);else{while(J.length<Q)J.push(b.empty);J[Q]=b.of(X.slice(1)),$.push(X[0],J[Q].length)}}return new e($,J)}static createSet(Z,$){return new e(Z,$)}}class o9{constructor(Z){this.set=Z,this.i=0,this.next()}next(){let{sections:Z}=this.set;if(this.i<Z.length)this.len=Z[this.i++],this.ins=Z[this.i++];else this.len=0,this.ins=-2;this.off=0}get done(){return this.ins==-2}get len2(){return this.ins<0?this.len:this.ins}get text(){let{inserted:Z}=this.set,$=this.i-2>>1;return $>=Z.length?b.empty:Z[$]}textBit(Z){let{inserted:$}=this.set,J=this.i-2>>1;return J>=$.length&&!Z?b.empty:$[J].slice(this.off,Z==null?void 0:this.off+Z)}forward(Z){if(Z==this.len)this.next();else this.len-=Z,this.off+=Z}forward2(Z){if(this.ins==-1)this.forward(Z);else if(Z==this.ins)this.next();else this.ins-=Z,this.off+=Z}}class C9{constructor(Z,$,J){this.from=Z,this.to=$,this.flags=J}get anchor(){return this.flags&32?this.to:this.from}get head(){return this.flags&32?this.from:this.to}get empty(){return this.from==this.to}get assoc(){return this.flags&8?-1:this.flags&16?1:0}get bidiLevel(){let Z=this.flags&7;return Z==7?null:Z}get goalColumn(){let Z=this.flags>>6;return Z==16777215?void 0:Z}map(Z,$=-1){let J,Q;if(this.empty)J=Q=Z.mapPos(this.from,$);else J=Z.mapPos(this.from,1),Q=Z.mapPos(this.to,-1);return J==this.from&&Q==this.to?this:new C9(J,Q,this.flags)}extend(Z,$=Z){if(Z<=this.anchor&&$>=this.anchor)return R.range(Z,$);let J=Math.abs(Z-this.anchor)>Math.abs($-this.anchor)?Z:$;return R.range(this.anchor,J)}eq(Z,$=!1){return this.anchor==Z.anchor&&this.head==Z.head&&(!$||!this.empty||this.assoc==Z.assoc)}toJSON(){return{anchor:this.anchor,head:this.head}}static fromJSON(Z){if(!Z||typeof Z.anchor!="number"||typeof Z.head!="number")throw new RangeError("Invalid JSON representation for SelectionRange");return R.range(Z.anchor,Z.head)}static create(Z,$,J){return new C9(Z,$,J)}}class R{constructor(Z,$){this.ranges=Z,this.mainIndex=$}map(Z,$=-1){if(Z.empty)return this;return R.create(this.ranges.map((J)=>J.map(Z,$)),this.mainIndex)}eq(Z,$=!1){if(this.ranges.length!=Z.ranges.length||this.mainIndex!=Z.mainIndex)return!1;for(let J=0;J<this.ranges.length;J++)if(!this.ranges[J].eq(Z.ranges[J],$))return!1;return!0}get main(){return this.ranges[this.mainIndex]}asSingle(){return this.ranges.length==1?this:new R([this.main],0)}addRange(Z,$=!0){return R.create([Z].concat(this.ranges),$?0:this.mainIndex+1)}replaceRange(Z,$=this.mainIndex){let J=this.ranges.slice();return J[$]=Z,R.create(J,this.mainIndex)}toJSON(){return{ranges:this.ranges.map((Z)=>Z.toJSON()),main:this.mainIndex}}static fromJSON(Z){if(!Z||!Array.isArray(Z.ranges)||typeof Z.main!="number"||Z.main>=Z.ranges.length)throw new RangeError("Invalid JSON representation for EditorSelection");return new R(Z.ranges.map(($)=>C9.fromJSON($)),Z.main)}static single(Z,$=Z){return new R([R.range(Z,$)],0)}static create(Z,$=0){if(Z.length==0)throw new RangeError("A selection needs at least one range");for(let J=0,Q=0;Q<Z.length;Q++){let X=Z[Q];if(X.empty?X.from<=J:X.from<J)return R.normalized(Z.slice(),$);J=X.to}return new R(Z,$)}static cursor(Z,$=0,J,Q){return C9.create(Z,Z,($==0?0:$<0?8:16)|(J==null?7:Math.min(6,J))|(Q!==null&&Q!==void 0?Q:16777215)<<6)}static range(Z,$,J,Q){let X=(J!==null&&J!==void 0?J:16777215)<<6|(Q==null?7:Math.min(6,Q));return $<Z?C9.create($,Z,48|X):C9.create(Z,$,($>Z?8:0)|X)}static normalized(Z,$=0){let J=Z[$];Z.sort((Q,X)=>Q.from-X.from),$=Z.indexOf(J);for(let Q=1;Q<Z.length;Q++){let X=Z[Q],K=Z[Q-1];if(X.empty?X.from<=K.to:X.from<K.to){let Y=K.from,U=Math.max(X.to,K.to);if(Q<=$)$--;Z.splice(--Q,2,X.anchor>X.head?R.range(U,Y):R.range(Y,U))}}return new R(Z,$)}}var LZ=0;class B{constructor(Z,$,J,Q,X){this.combine=Z,this.compareInput=$,this.compare=J,this.isStatic=Q,this.id=LZ++,this.default=Z([]),this.extensions=typeof X=="function"?X(this):X}get reader(){return this}static define(Z={}){return new B(Z.combine||(($)=>$),Z.compareInput||(($,J)=>$===J),Z.compare||(!Z.combine?BZ:($,J)=>$===J),!!Z.static,Z.enables)}of(Z){return new M5([],this,0,Z)}compute(Z,$){if(this.isStatic)throw new Error("Can't compute a static facet");return new M5(Z,this,1,$)}computeN(Z,$){if(this.isStatic)throw new Error("Can't compute a static facet");return new M5(Z,this,2,$)}from(Z,$){if(!$)$=(J)=>J;return this.compute([Z],(J)=>$(J.field(Z)))}}class M5{constructor(Z,$,J,Q){this.dependencies=Z,this.facet=$,this.type=J,this.value=Q,this.id=LZ++}dynamicSlot(Z){var $;let J=this.value,Q=this.facet.compareInput,X=this.id,K=Z[X]>>1,Y=this.type==2,U=!1,q=!1,W=[];for(let G of this.dependencies)if(G=="doc")U=!0;else if(G=="selection")q=!0;else if(((($=Z[G.id])!==null&&$!==void 0?$:1)&1)==0)W.push(Z[G.id]);return{create(G){return G.values[K]=J(G),1},update(G,z){if(U&&z.docChanged||q&&(z.docChanged||z.selection)||FZ(G,W)){let j=J(G);if(Y?!w8(j,G.values[K],Q):!Q(j,G.values[K]))return G.values[K]=j,1}return 0},reconfigure:(G,z)=>{let j,_=z.config.address[X];if(_!=null){let H=O7(z,_);if(this.dependencies.every((F)=>{return F instanceof B?z.facet(F)===G.facet(F):F instanceof F3?z.field(F,!1)==G.field(F,!1):!0})||(Y?w8(j=J(G),H,Q):Q(j=J(G),H)))return G.values[K]=H,0}else j=J(G);return G.values[K]=j,1}}}}var v8=B.define({static:!0});class F3{constructor(Z,$,J,Q,X){this.id=Z,this.createF=$,this.updateF=J,this.compareF=Q,this.spec=X,this.provides=void 0}static define(Z){let $=new F3(LZ++,Z.create,Z.update,Z.compare||((J,Q)=>J===Q),Z);if(Z.provide)$.provides=Z.provide($);return $}create(Z){let $=Z.facet(v8).find((J)=>J.field==this);return(($===null||$===void 0?void 0:$.create)||this.createF)(Z)}slot(Z){let $=Z[this.id]>>1;return{create:(J)=>{return J.values[$]=this.create(J),1},update:(J,Q)=>{let X=J.values[$],K=this.updateF(X,Q);if(this.compareF(X,K))return 0;return J.values[$]=K,1},reconfigure:(J,Q)=>{if(Q.config.address[this.id]!=null)return J.values[$]=Q.field(this),0;return J.values[$]=this.create(J),1}}}init(Z){return[this,v8.of({field:this,create:Z})]}get extension(){return this}}var P9={lowest:4,low:3,default:2,high:1,highest:0},Q9={highest:I5(P9.highest),high:I5(P9.high),default:I5(P9.default),low:I5(P9.low),lowest:I5(P9.lowest)};class EZ{constructor(Z,$){this.inner=Z,this.prec=$}}class H7{of(Z){return new j7(this,Z)}reconfigure(Z){return H7.reconfigure.of({compartment:this,extension:Z})}get(Z){return Z.config.compartments.get(this)}}class j7{constructor(Z,$){this.compartment=Z,this.inner=$}}class _7{constructor(Z,$,J,Q,X,K){this.base=Z,this.compartments=$,this.dynamicSlots=J,this.address=Q,this.staticValues=X,this.facets=K,this.statusTemplate=[];while(this.statusTemplate.length<J.length)this.statusTemplate.push(0)}staticFacet(Z){let $=this.address[Z.id];return $==null?Z.default:this.staticValues[$>>1]}static resolve(Z,$,J){let Q=[],X=Object.create(null),K=new Map;for(let z of O2(Z,$,K))if(z instanceof F3)Q.push(z);else(X[z.facet.id]||(X[z.facet.id]=[])).push(z);let Y=Object.create(null),U=[],q=[];for(let z of Q)Y[z.id]=q.length<<1,q.push((j)=>z.slot(j));let W=J===null||J===void 0?void 0:J.config.facets;for(let z in X){let j=X[z],_=j[0].facet,H=W&&W[z]||[];if(j.every((F)=>F.type==0))if(Y[_.id]=U.length<<1|1,BZ(H,j))U.push(J.facet(_));else{let F=_.combine(j.map((N)=>N.value));U.push(J&&_.compare(F,J.facet(_))?J.facet(_):F)}else{for(let F of j)if(F.type==0)Y[F.id]=U.length<<1|1,U.push(F.value);else Y[F.id]=q.length<<1,q.push((N)=>F.dynamicSlot(N));Y[_.id]=q.length<<1,q.push((F)=>_2(F,_,j))}}let G=q.map((z)=>z(Y));return new _7(Z,K,G,Y,U,X)}}var i8=B.define(),NZ=B.define({combine:(Z)=>Z.some(($)=>$),static:!0}),n8=B.define({combine:(Z)=>Z.length?Z[0]:void 0,static:!0}),a8=B.define(),r8=B.define(),o8=B.define(),t8=B.define({combine:(Z)=>Z.length?Z[0]:!1});class V3{constructor(Z,$){this.type=Z,this.value=$}static define(){return new e8}}class e8{of(Z){return new V3(this,Z)}}class Z0{constructor(Z){this.map=Z}of(Z){return new v(this,Z)}}class v{constructor(Z,$){this.type=Z,this.value=$}map(Z){let $=this.type.map(this.value,Z);return $===void 0?void 0:$==this.value?this:new v(this.type,$)}is(Z){return this.type==Z}static define(Z={}){return new Z0(Z.map||(($)=>$))}static mapEffects(Z,$){if(!Z.length)return Z;let J=[];for(let Q of Z){let X=Q.map($);if(X)J.push(X)}return J}}v.reconfigure=v.define();v.appendConfig=v.define();class a{constructor(Z,$,J,Q,X,K){if(this.startState=Z,this.changes=$,this.selection=J,this.effects=Q,this.annotations=X,this.scrollIntoView=K,this._doc=null,this._state=null,J)s8(J,$.newLength);if(!X.some((Y)=>Y.type==a.time))this.annotations=X.concat(a.time.of(Date.now()))}static create(Z,$,J,Q,X,K){return new a(Z,$,J,Q,X,K)}get newDoc(){return this._doc||(this._doc=this.changes.apply(this.startState.doc))}get newSelection(){return this.selection||this.startState.selection.map(this.changes)}get state(){if(!this._state)this.startState.applyTransaction(this);return this._state}annotation(Z){for(let $ of this.annotations)if($.type==Z)return $.value;return}get docChanged(){return!this.changes.empty}get reconfigured(){return this.startState.config!=this.state.config}isUserEvent(Z){let $=this.annotation(a.userEvent);return!!($&&($==Z||$.length>Z.length&&$.slice(0,Z.length)==Z&&$[Z.length]=="."))}}a.time=V3.define();a.userEvent=V3.define();a.addToHistory=V3.define();a.remote=V3.define();var D2=[],P3=function(Z){return Z[Z.Word=0]="Word",Z[Z.Space=1]="Space",Z[Z.Other=2]="Other",Z}(P3||(P3={})),R2=/[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/,RZ;try{RZ=new RegExp("[\\p{Alphabetic}\\p{Number}_]","u")}catch(Z){}class m{constructor(Z,$,J,Q,X,K){if(this.config=Z,this.doc=$,this.selection=J,this.values=Q,this.status=Z.statusTemplate.slice(),this.computeSlot=X,K)K._state=this;for(let Y=0;Y<this.config.dynamicSlots.length;Y++)A5(this,Y<<1);this.computeSlot=null}field(Z,$=!0){let J=this.config.address[Z.id];if(J==null){if($)throw new RangeError("Field is not present in this state");return}return A5(this,J),O7(this,J)}update(...Z){return J0(this,Z,!0)}applyTransaction(Z){let $=this.config,{base:J,compartments:Q}=$;for(let Y of Z.effects)if(Y.is(H7.reconfigure)){if($)Q=new Map,$.compartments.forEach((U,q)=>Q.set(q,U)),$=null;Q.set(Y.value.compartment,Y.value.extension)}else if(Y.is(v.reconfigure))$=null,J=Y.value;else if(Y.is(v.appendConfig))$=null,J=a9(J).concat(Y.value);let X;if(!$)$=_7.resolve(J,Q,this),X=new m($,this.doc,this.selection,$.dynamicSlots.map(()=>null),(U,q)=>q.reconfigure(U,this),null).values;else X=Z.startState.values.slice();let K=Z.startState.facet(NZ)?Z.newSelection:Z.newSelection.asSingle();new m($,Z.newDoc,K,X,(Y,U)=>U.update(Y,Z),Z)}replaceSelection(Z){if(typeof Z=="string")Z=this.toText(Z);return this.changeByRange(($)=>({changes:{from:$.from,to:$.to,insert:Z},range:R.cursor($.from+Z.length)}))}changeByRange(Z){let $=this.selection,J=Z($.ranges[0]),Q=this.changes(J.changes),X=[J.range],K=a9(J.effects);for(let Y=1;Y<$.ranges.length;Y++){let U=Z($.ranges[Y]),q=this.changes(U.changes),W=q.map(Q);for(let z=0;z<Y;z++)X[z]=X[z].map(W);let G=Q.mapDesc(q,!0);X.push(U.range.map(G)),Q=Q.compose(W),K=v.mapEffects(K,W).concat(v.mapEffects(a9(U.effects),G))}return{changes:Q,selection:R.create(X,$.mainIndex),effects:K}}changes(Z=[]){if(Z instanceof e)return Z;return e.of(Z,this.doc.length,this.facet(m.lineSeparator))}toText(Z){return b.of(Z.split(this.facet(m.lineSeparator)||_Z))}sliceDoc(Z=0,$=this.doc.length){return this.doc.sliceString(Z,$,this.lineBreak)}facet(Z){let $=this.config.address[Z.id];if($==null)return Z.default;return A5(this,$),O7(this,$)}toJSON(Z){let $={doc:this.sliceDoc(),selection:this.selection.toJSON()};if(Z)for(let J in Z){let Q=Z[J];if(Q instanceof F3&&this.config.address[Q.id]!=null)$[J]=Q.spec.toJSON(this.field(Z[J]),this)}return $}static fromJSON(Z,$={},J){if(!Z||typeof Z.doc!="string")throw new RangeError("Invalid JSON representation for EditorState");let Q=[];if(J){for(let X in J)if(Object.prototype.hasOwnProperty.call(Z,X)){let K=J[X],Y=Z[X];Q.push(K.init((U)=>K.spec.fromJSON(Y,U)))}}return m.create({doc:Z.doc,selection:R.fromJSON(Z.selection),extensions:$.extensions?Q.concat([$.extensions]):Q})}static create(Z={}){let $=_7.resolve(Z.extensions||[],new Map),J=Z.doc instanceof b?Z.doc:b.of((Z.doc||"").split($.staticFacet(m.lineSeparator)||_Z)),Q=!Z.selection?R.single(0):Z.selection instanceof R?Z.selection:R.single(Z.selection.anchor,Z.selection.head);if(s8(Q,J.length),!$.staticFacet(NZ))Q=Q.asSingle();return new m($,J,Q,$.dynamicSlots.map(()=>null),(X,K)=>K.create(X),null)}get tabSize(){return this.facet(m.tabSize)}get lineBreak(){return this.facet(m.lineSeparator)||"\n"}get readOnly(){return this.facet(t8)}phrase(Z,...$){for(let J of this.facet(m.phrases))if(Object.prototype.hasOwnProperty.call(J,Z)){Z=J[Z];break}if($.length)Z=Z.replace(/\$(\$|\d*)/g,(J,Q)=>{if(Q=="$")return"$";let X=+(Q||1);return!X||X>$.length?J:$[X-1]});return Z}languageDataAt(Z,$,J=-1){let Q=[];for(let X of this.facet(i8))for(let K of X(this,$,J))if(Object.prototype.hasOwnProperty.call(K,Z))Q.push(K[Z]);return Q}charCategorizer(Z){return I2(this.languageDataAt("wordChars",Z).join(""))}wordAt(Z){let{text:$,from:J,length:Q}=this.doc.lineAt(Z),X=this.charCategorizer(Z),K=Z-J,Y=Z-J;while(K>0){let U=Q3($,K,!1);if(X($.slice(U,K))!=P3.Word)break;K=U}while(Y<Q){let U=Q3($,Y);if(X($.slice(Y,U))!=P3.Word)break;Y=U}return K==Y?null:R.range(K+J,Y+J)}}m.allowMultipleSelections=NZ;m.tabSize=B.define({combine:(Z)=>Z.length?Z[0]:4});m.lineSeparator=n8;m.readOnly=t8;m.phrases=B.define({compare(Z,$){let J=Object.keys(Z),Q=Object.keys($);return J.length==Q.length&&J.every((X)=>Z[X]==$[X])}});m.languageData=i8;m.changeFilter=a8;m.transactionFilter=r8;m.transactionExtender=o8;H7.reconfigure=v.define();class s3{eq(Z){return this==Z}range(Z,$=Z){return L5.create(Z,$,this)}}s3.prototype.startSide=s3.prototype.endSide=0;s3.prototype.point=!1;s3.prototype.mapMode=J3.TrackDel;class L5{constructor(Z,$,J){this.from=Z,this.to=$,this.value=J}static create(Z,$,J){return new L5(Z,$,J)}}class PZ{constructor(Z,$,J,Q){this.from=Z,this.to=$,this.value=J,this.maxPoint=Q}get length(){return this.to[this.to.length-1]}findIndex(Z,$,J,Q=0){let X=J?this.to:this.from;for(let K=Q,Y=X.length;;){if(K==Y)return K;let U=K+Y>>1,q=X[U]-Z||(J?this.value[U].endSide:this.value[U].startSide)-$;if(U==K)return q>=0?K:Y;if(q>=0)Y=U;else K=U+1}}between(Z,$,J,Q){for(let X=this.findIndex($,-1e9,!0),K=this.findIndex(J,1e9,!1,X);X<K;X++)if(Q(this.from[X]+Z,this.to[X]+Z,this.value[X])===!1)return!1}map(Z,$){let J=[],Q=[],X=[],K=-1,Y=-1;for(let U=0;U<this.value.length;U++){let q=this.value[U],W=this.from[U]+Z,G=this.to[U]+Z,z,j;if(W==G){let _=$.mapPos(W,q.startSide,q.mapMode);if(_==null)continue;if(z=j=_,q.startSide!=q.endSide){if(j=$.mapPos(W,q.endSide),j<z)continue}}else if(z=$.mapPos(W,q.startSide),j=$.mapPos(G,q.endSide),z>j||z==j&&q.startSide>0&&q.endSide<=0)continue;if((j-z||q.endSide-q.startSide)<0)continue;if(K<0)K=z;if(q.point)Y=Math.max(Y,j-z);J.push(q),Q.push(z-K),X.push(j-K)}return{mapped:J.length?new PZ(Q,X,J,Y):null,pos:K}}}class w{constructor(Z,$,J,Q){this.chunkPos=Z,this.chunk=$,this.nextLayer=J,this.maxPoint=Q}static create(Z,$,J,Q){return new w(Z,$,J,Q)}get length(){let Z=this.chunk.length-1;return Z<0?0:Math.max(this.chunkEnd(Z),this.nextLayer.length)}get size(){if(this.isEmpty)return 0;let Z=this.nextLayer.size;for(let $ of this.chunk)Z+=$.value.length;return Z}chunkEnd(Z){return this.chunkPos[Z]+this.chunk[Z].length}update(Z){let{add:$=[],sort:J=!1,filterFrom:Q=0,filterTo:X=this.length}=Z,K=Z.filter;if($.length==0&&!K)return this;if(J)$=$.slice().sort(VZ);if(this.isEmpty)return $.length?w.of($):this;let Y=new CZ(this,null,-1).goto(0),U=0,q=[],W=new T9;while(Y.value||U<$.length)if(U<$.length&&(Y.from-$[U].from||Y.startSide-$[U].value.startSide)>=0){let G=$[U++];if(!W.addInner(G.from,G.to,G.value))q.push(G)}else if(Y.rangeIndex==1&&Y.chunkIndex<this.chunk.length&&(U==$.length||this.chunkEnd(Y.chunkIndex)<$[U].from)&&(!K||Q>this.chunkEnd(Y.chunkIndex)||X<this.chunkPos[Y.chunkIndex])&&W.addChunk(this.chunkPos[Y.chunkIndex],this.chunk[Y.chunkIndex]))Y.nextChunk();else{if(!K||Q>Y.to||X<Y.from||K(Y.from,Y.to,Y.value)){if(!W.addInner(Y.from,Y.to,Y.value))q.push(L5.create(Y.from,Y.to,Y.value))}Y.next()}return W.finishInner(this.nextLayer.isEmpty&&!q.length?w.empty:this.nextLayer.update({add:q,filter:K,filterFrom:Q,filterTo:X}))}map(Z){if(Z.empty||this.isEmpty)return this;let $=[],J=[],Q=-1;for(let K=0;K<this.chunk.length;K++){let Y=this.chunkPos[K],U=this.chunk[K],q=Z.touchesRange(Y,Y+U.length);if(q===!1)Q=Math.max(Q,U.maxPoint),$.push(U),J.push(Z.mapPos(Y));else if(q===!0){let{mapped:W,pos:G}=U.map(Y,Z);if(W)Q=Math.max(Q,W.maxPoint),$.push(W),J.push(G)}}let X=this.nextLayer.map(Z);return $.length==0?X:new w(J,$,X||w.empty,Q)}between(Z,$,J){if(this.isEmpty)return;for(let Q=0;Q<this.chunk.length;Q++){let X=this.chunkPos[Q],K=this.chunk[Q];if($>=X&&Z<=X+K.length&&K.between(X,Z-X,$-X,J)===!1)return}this.nextLayer.between(Z,$,J)}iter(Z=0){return B5.from([this]).goto(Z)}get isEmpty(){return this.nextLayer==this}static iter(Z,$=0){return B5.from(Z).goto($)}static compare(Z,$,J,Q,X=-1){let K=Z.filter((G)=>G.maxPoint>0||!G.isEmpty&&G.maxPoint>=X),Y=$.filter((G)=>G.maxPoint>0||!G.isEmpty&&G.maxPoint>=X),U=h8(K,Y,J),q=new s9(K,U,X),W=new s9(Y,U,X);if(J.iterGaps((G,z,j)=>m8(q,G,W,z,j,Q)),J.empty&&J.length==0)m8(q,0,W,0,0,Q)}static eq(Z,$,J=0,Q){if(Q==null)Q=999999999;let X=Z.filter((W)=>!W.isEmpty&&$.indexOf(W)<0),K=$.filter((W)=>!W.isEmpty&&Z.indexOf(W)<0);if(X.length!=K.length)return!1;if(!X.length)return!0;let Y=h8(X,K),U=new s9(X,Y,0).goto(J),q=new s9(K,Y,0).goto(J);for(;;){if(U.to!=q.to||!IZ(U.active,q.active)||U.point&&(!q.point||!U.point.eq(q.point)))return!1;if(U.to>Q)return!0;U.next(),q.next()}}static spans(Z,$,J,Q,X=-1){let K=new s9(Z,null,X).goto($),Y=$,U=K.openStart;for(;;){let q=Math.min(K.to,J);if(K.point){let W=K.activeForPoint(K.to),G=K.pointFrom<$?W.length+1:K.point.startSide<0?W.length:Math.min(W.length,U);Q.point(Y,q,K.point,W,G,K.pointRank),U=Math.min(K.openEnd(q),W.length)}else if(q>Y)Q.span(Y,q,K.active,U),U=K.openEnd(q);if(K.to>J)return U+(K.point&&K.to>J?1:0);Y=K.to,K.next()}}static of(Z,$=!1){let J=new T9;for(let Q of Z instanceof L5?[Z]:$?M2(Z):Z)J.add(Q.from,Q.to,Q.value);return J.finish()}static join(Z){if(!Z.length)return w.empty;let $=Z[Z.length-1];for(let J=Z.length-2;J>=0;J--)for(let Q=Z[J];Q!=w.empty;Q=Q.nextLayer)$=new w(Q.chunkPos,Q.chunk,$,Math.max(Q.maxPoint,$.maxPoint));return $}}w.empty=new w([],[],null,-1);w.empty.nextLayer=w.empty;class T9{finishChunk(Z){if(this.chunks.push(new PZ(this.from,this.to,this.value,this.maxPoint)),this.chunkPos.push(this.chunkStart),this.chunkStart=-1,this.setMaxPoint=Math.max(this.setMaxPoint,this.maxPoint),this.maxPoint=-1,Z)this.from=[],this.to=[],this.value=[]}constructor(){this.chunks=[],this.chunkPos=[],this.chunkStart=-1,this.last=null,this.lastFrom=-1e9,this.lastTo=-1e9,this.from=[],this.to=[],this.value=[],this.maxPoint=-1,this.setMaxPoint=-1,this.nextLayer=null}add(Z,$,J){if(!this.addInner(Z,$,J))(this.nextLayer||(this.nextLayer=new T9)).add(Z,$,J)}addInner(Z,$,J){let Q=Z-this.lastTo||J.startSide-this.last.endSide;if(Q<=0&&(Z-this.lastFrom||J.startSide-this.last.startSide)<0)throw new Error("Ranges must be added sorted by `from` position and `startSide`");if(Q<0)return!1;if(this.from.length==250)this.finishChunk(!0);if(this.chunkStart<0)this.chunkStart=Z;if(this.from.push(Z-this.chunkStart),this.to.push($-this.chunkStart),this.last=J,this.lastFrom=Z,this.lastTo=$,this.value.push(J),J.point)this.maxPoint=Math.max(this.maxPoint,$-Z);return!0}addChunk(Z,$){if((Z-this.lastTo||$.value[0].startSide-this.last.endSide)<0)return!1;if(this.from.length)this.finishChunk(!0);this.setMaxPoint=Math.max(this.setMaxPoint,$.maxPoint),this.chunks.push($),this.chunkPos.push(Z);let J=$.value.length-1;return this.last=$.value[J],this.lastFrom=$.from[J]+Z,this.lastTo=$.to[J]+Z,!0}finish(){return this.finishInner(w.empty)}finishInner(Z){if(this.from.length)this.finishChunk(!1);if(this.chunks.length==0)return Z;let $=w.create(this.chunkPos,this.chunks,this.nextLayer?this.nextLayer.finishInner(Z):Z,this.setMaxPoint);return this.from=null,$}}class CZ{constructor(Z,$,J,Q=0){this.layer=Z,this.skip=$,this.minPoint=J,this.rank=Q}get startSide(){return this.value?this.value.startSide:0}get endSide(){return this.value?this.value.endSide:0}goto(Z,$=-1e9){return this.chunkIndex=this.rangeIndex=0,this.gotoInner(Z,$,!1),this}gotoInner(Z,$,J){while(this.chunkIndex<this.layer.chunk.length){let Q=this.layer.chunk[this.chunkIndex];if(!(this.skip&&this.skip.has(Q)||this.layer.chunkEnd(this.chunkIndex)<Z||Q.maxPoint<this.minPoint))break;this.chunkIndex++,J=!1}if(this.chunkIndex<this.layer.chunk.length){let Q=this.layer.chunk[this.chunkIndex].findIndex(Z-this.layer.chunkPos[this.chunkIndex],$,!0);if(!J||this.rangeIndex<Q)this.setRangeIndex(Q)}this.next()}forward(Z,$){if((this.to-Z||this.endSide-$)<0)this.gotoInner(Z,$,!0)}next(){for(;;)if(this.chunkIndex==this.layer.chunk.length){this.from=this.to=1e9,this.value=null;break}else{let Z=this.layer.chunkPos[this.chunkIndex],$=this.layer.chunk[this.chunkIndex],J=Z+$.from[this.rangeIndex];if(this.from=J,this.to=Z+$.to[this.rangeIndex],this.value=$.value[this.rangeIndex],this.setRangeIndex(this.rangeIndex+1),this.minPoint<0||this.value.point&&this.to-this.from>=this.minPoint)break}}setRangeIndex(Z){if(Z==this.layer.chunk[this.chunkIndex].value.length){if(this.chunkIndex++,this.skip)while(this.chunkIndex<this.layer.chunk.length&&this.skip.has(this.layer.chunk[this.chunkIndex]))this.chunkIndex++;this.rangeIndex=0}else this.rangeIndex=Z}nextChunk(){this.chunkIndex++,this.rangeIndex=0,this.next()}compare(Z){return this.from-Z.from||this.startSide-Z.startSide||this.rank-Z.rank||this.to-Z.to||this.endSide-Z.endSide}}class B5{constructor(Z){this.heap=Z}static from(Z,$=null,J=-1){let Q=[];for(let X=0;X<Z.length;X++)for(let K=Z[X];!K.isEmpty;K=K.nextLayer)if(K.maxPoint>=J)Q.push(new CZ(K,$,J,X));return Q.length==1?Q[0]:new B5(Q)}get startSide(){return this.value?this.value.startSide:0}goto(Z,$=-1e9){for(let J of this.heap)J.goto(Z,$);for(let J=this.heap.length>>1;J>=0;J--)jZ(this.heap,J);return this.next(),this}forward(Z,$){for(let J of this.heap)J.forward(Z,$);for(let J=this.heap.length>>1;J>=0;J--)jZ(this.heap,J);if((this.to-Z||this.value.endSide-$)<0)this.next()}next(){if(this.heap.length==0)this.from=this.to=1e9,this.value=null,this.rank=-1;else{let Z=this.heap[0];if(this.from=Z.from,this.to=Z.to,this.value=Z.value,this.rank=Z.rank,Z.value)Z.next();jZ(this.heap,0)}}}class s9{constructor(Z,$,J){this.minPoint=J,this.active=[],this.activeTo=[],this.activeRank=[],this.minActive=-1,this.point=null,this.pointFrom=0,this.pointRank=0,this.to=-1e9,this.endSide=0,this.openStart=-1,this.cursor=B5.from(Z,$,J)}goto(Z,$=-1e9){return this.cursor.goto(Z,$),this.active.length=this.activeTo.length=this.activeRank.length=0,this.minActive=-1,this.to=Z,this.endSide=$,this.openStart=-1,this.next(),this}forward(Z,$){while(this.minActive>-1&&(this.activeTo[this.minActive]-Z||this.active[this.minActive].endSide-$)<0)this.removeActive(this.minActive);this.cursor.forward(Z,$)}removeActive(Z){G7(this.active,Z),G7(this.activeTo,Z),G7(this.activeRank,Z),this.minActive=u8(this.active,this.activeTo)}addActive(Z){let $=0,{value:J,to:Q,rank:X}=this.cursor;while($<this.activeRank.length&&(X-this.activeRank[$]||Q-this.activeTo[$])>0)$++;if(W7(this.active,$,J),W7(this.activeTo,$,Q),W7(this.activeRank,$,X),Z)W7(Z,$,this.cursor.from);this.minActive=u8(this.active,this.activeTo)}next(){let Z=this.to,$=this.point;this.point=null;let J=this.openStart<0?[]:null;for(;;){let Q=this.minActive;if(Q>-1&&(this.activeTo[Q]-this.cursor.from||this.active[Q].endSide-this.cursor.startSide)<0){if(this.activeTo[Q]>Z){this.to=this.activeTo[Q],this.endSide=this.active[Q].endSide;break}if(this.removeActive(Q),J)G7(J,Q)}else if(!this.cursor.value){this.to=this.endSide=1e9;break}else if(this.cursor.from>Z){this.to=this.cursor.from,this.endSide=this.cursor.startSide;break}else{let X=this.cursor.value;if(!X.point)this.addActive(J),this.cursor.next();else if($&&this.cursor.to==this.to&&this.cursor.from<this.cursor.to)this.cursor.next();else{this.point=X,this.pointFrom=this.cursor.from,this.pointRank=this.cursor.rank,this.to=this.cursor.to,this.endSide=X.endSide,this.cursor.next(),this.forward(this.to,this.endSide);break}}}if(J){this.openStart=0;for(let Q=J.length-1;Q>=0&&J[Q]<Z;Q--)this.openStart++}}activeForPoint(Z){if(!this.active.length)return this.active;let $=[];for(let J=this.active.length-1;J>=0;J--){if(this.activeRank[J]<this.pointRank)break;if(this.activeTo[J]>Z||this.activeTo[J]==Z&&this.active[J].endSide>=this.point.endSide)$.push(this.active[J])}return $.reverse()}openEnd(Z){let $=0;for(let J=this.activeTo.length-1;J>=0&&this.activeTo[J]>Z;J--)$++;return $}}var X0=typeof Symbol=="undefined"?"__"+"\u037C":Symbol.for("\u037C"),TZ=typeof Symbol=="undefined"?"__styleSet"+Math.floor(Math.random()*1e8):Symbol("styleSet"),K0=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"?window:{};class m3{constructor(Z,$){this.rules=[];let{finish:J}=$||{};function Q(K){return/^@/.test(K)?[K]:K.split(/,\s*/)}function X(K,Y,U,q){let W=[],G=/^@(\w+)\b/.exec(K[0]),z=G&&G[1]=="keyframes";if(G&&Y==null)return U.push(K[0]+";");for(let j in Y){let _=Y[j];if(/&/.test(j))X(j.split(/,\s*/).map((H)=>K.map((F)=>H.replace(/&/,F))).reduce((H,F)=>H.concat(F)),_,U);else if(_&&typeof _=="object"){if(!G)throw new RangeError("The value of a property ("+j+") should be a primitive value.");X(Q(j),_,W,z)}else if(_!=null)W.push(j.replace(/_.*/,"").replace(/[A-Z]/g,(H)=>"-"+H.toLowerCase())+": "+_+";")}if(W.length||z)U.push((J&&!G&&!q?K.map(J):K).join(", ")+" {"+W.join(" ")+"}")}for(let K in Z)X(Q(K),Z[K],this.rules)}getRules(){return this.rules.join("\n")}static newName(){let Z=K0[X0]||1;return K0[X0]=Z+1,"\u037C"+Z.toString(36)}static mount(Z,$,J){let Q=Z[TZ],X=J&&J.nonce;if(!Q)Q=new U0(Z,X);else if(X)Q.setNonce(X);Q.mount(Array.isArray($)?$:[$],Z)}}var Y0=new Map;class U0{constructor(Z,$){let J=Z.ownerDocument||Z,Q=J.defaultView;if(!Z.head&&Z.adoptedStyleSheets&&Q.CSSStyleSheet){let X=Y0.get(J);if(X)return Z[TZ]=X;this.sheet=new Q.CSSStyleSheet,Y0.set(J,this)}else if(this.styleTag=J.createElement("style"),$)this.styleTag.setAttribute("nonce",$);this.modules=[],Z[TZ]=this}mount(Z,$){let J=this.sheet,Q=0,X=0;for(let K=0;K<Z.length;K++){let Y=Z[K],U=this.modules.indexOf(Y);if(U<X&&U>-1)this.modules.splice(U,1),X--,U=-1;if(U==-1){if(this.modules.splice(X++,0,Y),J)for(let q=0;q<Y.rules.length;q++)J.insertRule(Y.rules[q],Q++)}else{while(X<U)Q+=this.modules[X++].rules.length;Q+=Y.rules.length,X++}}if(J){if($.adoptedStyleSheets.indexOf(this.sheet)<0)$.adoptedStyleSheets=[this.sheet,...$.adoptedStyleSheets]}else{let K="";for(let U=0;U<this.modules.length;U++)K+=this.modules[U].getRules()+"\n";this.styleTag.textContent=K;let Y=$.head||$;if(this.styleTag.parentNode!=Y)Y.insertBefore(this.styleTag,Y.firstChild)}}setNonce(Z){if(this.styleTag&&this.styleTag.getAttribute("nonce")!=Z)this.styleTag.setAttribute("nonce",Z)}}function q0(Z){var $=A2&&Z.metaKey&&Z.shiftKey&&!Z.ctrlKey&&!Z.altKey||L2&&Z.shiftKey&&Z.key&&Z.key.length==1||Z.key=="Unidentified",J=!$&&Z.key||(Z.shiftKey?t9:X9)[Z.keyCode]||Z.key||"Unidentified";if(J=="Esc")J="Escape";if(J=="Del")J="Delete";if(J=="Left")J="ArrowLeft";if(J=="Up")J="ArrowUp";if(J=="Right")J="ArrowRight";if(J=="Down")J="ArrowDown";return J}var X9={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},t9={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:"\""},A2=typeof navigator!="undefined"&&/Mac/.test(navigator.platform),L2=typeof navigator!="undefined"&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);for(Z3=0;Z3<10;Z3++)X9[48+Z3]=X9[96+Z3]=String(Z3);var Z3;for(Z3=1;Z3<=24;Z3++)X9[Z3+111]="F"+Z3;var Z3;for(Z3=65;Z3<=90;Z3++)X9[Z3]=String.fromCharCode(Z3+32),t9[Z3]=String.fromCharCode(Z3);var Z3;for(F7 in X9)if(!t9.hasOwnProperty(F7))t9[F7]=X9[F7];var F7;function x5(Z){let $;if(Z.nodeType==11)$=Z.getSelection?Z:Z.ownerDocument;else $=Z;return $.getSelection()}function hZ(Z,$){return $?Z==$||Z.contains($.nodeType!=1?$.parentNode:$):!1}function B2(Z){let $=Z.activeElement;while($&&$.shadowRoot)$=$.shadowRoot.activeElement;return $}function B7(Z,$){if(!$.anchorNode)return!1;try{return hZ(Z,$.anchorNode)}catch(J){return!1}}function w5(Z){if(Z.nodeType==3)return x9(Z,0,Z.nodeValue.length).getClientRects();else if(Z.nodeType==1)return Z.getClientRects();else return[]}function b5(Z,$,J,Q){return J?G0(Z,$,J,Q,-1)||G0(Z,$,J,Q,1):!1}function k9(Z){for(var $=0;;$++)if(Z=Z.previousSibling,!Z)return $}function b7(Z){return Z.nodeType==1&&/^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(Z.nodeName)}function G0(Z,$,J,Q,X){for(;;){if(Z==J&&$==Q)return!0;if($==(X<0?0:U9(Z))){if(Z.nodeName=="DIV")return!1;let K=Z.parentNode;if(!K||K.nodeType!=1)return!1;$=k9(Z)+(X<0?0:1),Z=K}else if(Z.nodeType==1){if(Z=Z.childNodes[$+(X<0?-1:0)],Z.nodeType==1&&Z.contentEditable=="false")return!1;$=X<0?U9(Z):0}else return!1}}function U9(Z){return Z.nodeType==3?Z.nodeValue.length:Z.childNodes.length}function m7(Z,$){let J=$?Z.left:Z.right;return{left:J,right:J,top:Z.top,bottom:Z.bottom}}function E2(Z){let $=Z.visualViewport;if($)return{left:0,right:$.width,top:0,bottom:$.height};return{left:0,right:Z.innerWidth,top:0,bottom:Z.innerHeight}}function d0(Z,$){let J=$.width/Z.offsetWidth,Q=$.height/Z.offsetHeight;if(J>0.995&&J<1.005||!isFinite(J)||Math.abs($.width-Z.offsetWidth)<1)J=1;if(Q>0.995&&Q<1.005||!isFinite(Q)||Math.abs($.height-Z.offsetHeight)<1)Q=1;return{scaleX:J,scaleY:Q}}function P2(Z,$,J,Q,X,K,Y,U){let q=Z.ownerDocument,W=q.defaultView||window;for(let G=Z,z=!1;G&&!z;)if(G.nodeType==1){let j,_=G==q.body,H=1,F=1;if(_)j=E2(W);else{if(/^(fixed|sticky)$/.test(getComputedStyle(G).position))z=!0;if(G.scrollHeight<=G.clientHeight&&G.scrollWidth<=G.clientWidth){G=G.assignedSlot||G.parentNode;continue}let M=G.getBoundingClientRect();({scaleX:H,scaleY:F}=d0(G,M)),j={left:M.left,right:M.left+G.clientWidth*H,top:M.top,bottom:M.top+G.clientHeight*F}}let N=0,D=0;if(X=="nearest"){if($.top<j.top){if(D=-(j.top-$.top+Y),J>0&&$.bottom>j.bottom+D)D=$.bottom-j.bottom+D+Y}else if($.bottom>j.bottom){if(D=$.bottom-j.bottom+Y,J<0&&$.top-D<j.top)D=-(j.top+D-$.top+Y)}}else{let M=$.bottom-$.top,V=j.bottom-j.top;D=(X=="center"&&M<=V?$.top+M/2-V/2:X=="start"||X=="center"&&J<0?$.top-Y:$.bottom-V+Y)-j.top}if(Q=="nearest"){if($.left<j.left){if(N=-(j.left-$.left+K),J>0&&$.right>j.right+N)N=$.right-j.right+N+K}else if($.right>j.right){if(N=$.right-j.right+K,J<0&&$.left<j.left+N)N=-(j.left+N-$.left+K)}}else N=(Q=="center"?$.left+($.right-$.left)/2-(j.right-j.left)/2:Q=="start"==U?$.left-K:$.right-(j.right-j.left)+K)-j.left;if(N||D)if(_)W.scrollBy(N,D);else{let M=0,V=0;if(D){let I=G.scrollTop;G.scrollTop+=D/F,V=(G.scrollTop-I)*F}if(N){let I=G.scrollLeft;G.scrollLeft+=N/H,M=(G.scrollLeft-I)*H}if($={left:$.left-M,top:$.top-V,right:$.right-M,bottom:$.bottom-V},M&&Math.abs(M-N)<1)Q="nearest";if(V&&Math.abs(V-D)<1)X="nearest"}if(_)break;G=G.assignedSlot||G.parentNode}else if(G.nodeType==11)G=G.host;else break}function C2(Z){let $=Z.ownerDocument,J,Q;for(let X=Z.parentNode;X;)if(X==$.body||J&&Q)break;else if(X.nodeType==1){if(!Q&&X.scrollHeight>X.clientHeight)Q=X;if(!J&&X.scrollWidth>X.clientWidth)J=X;X=X.assignedSlot||X.parentNode}else if(X.nodeType==11)X=X.host;else break;return{x:J,y:Q}}function s0(Z){if(Z.setActive)return Z.setActive();if(e9)return Z.focus(e9);let $=[];for(let J=Z;J;J=J.parentNode)if($.push(J,J.scrollTop,J.scrollLeft),J==J.ownerDocument)break;if(Z.focus(e9==null?{get preventScroll(){return e9={preventScroll:!0},!0}}:void 0),!e9){e9=!1;for(let J=0;J<$.length;){let Q=$[J++],X=$[J++],K=$[J++];if(Q.scrollTop!=X)Q.scrollTop=X;if(Q.scrollLeft!=K)Q.scrollLeft=K}}}function x9(Z,$,J=$){let Q=W0||(W0=document.createRange());return Q.setEnd(Z,J),Q.setStart(Z,$),Q}function $5(Z,$,J,Q){let X={key:$,code:$,keyCode:J,which:J,cancelable:!0};if(Q)({altKey:X.altKey,ctrlKey:X.ctrlKey,shiftKey:X.shiftKey,metaKey:X.metaKey}=Q);let K=new KeyboardEvent("keydown",X);K.synthetic=!0,Z.dispatchEvent(K);let Y=new KeyboardEvent("keyup",X);return Y.synthetic=!0,Z.dispatchEvent(Y),K.defaultPrevented||Y.defaultPrevented}function T2(Z){while(Z){if(Z&&(Z.nodeType==9||Z.nodeType==11&&Z.host))return Z;Z=Z.assignedSlot||Z.parentNode}return null}function i0(Z){while(Z.attributes.length)Z.removeAttributeNode(Z.attributes[0])}function y2(Z,$){let{focusNode:J,focusOffset:Q}=$;if(!J||$.anchorNode!=J||$.anchorOffset!=Q)return!1;Q=Math.min(Q,U9(J));for(;;)if(Q){if(J.nodeType!=1)return!1;let X=J.childNodes[Q-1];if(X.contentEditable=="false")Q--;else J=X,Q=U9(J)}else if(J==Z)return!0;else Q=k9(J),J=J.parentNode}function n0(Z){return Z.scrollTop>Math.max(1,Z.scrollHeight-Z.clientHeight-4)}function a0(Z,$){for(let J=Z,Q=$;;)if(J.nodeType==3&&Q>0)return{node:J,offset:Q};else if(J.nodeType==1&&Q>0){if(J.contentEditable=="false")return null;J=J.childNodes[Q-1],Q=U9(J)}else if(J.parentNode&&!b7(J))Q=k9(J),J=J.parentNode;else return null}function r0(Z,$){for(let J=Z,Q=$;;)if(J.nodeType==3&&Q<J.nodeValue.length)return{node:J,offset:Q};else if(J.nodeType==1&&Q<J.childNodes.length){if(J.contentEditable=="false")return null;J=J.childNodes[Q],Q=0}else if(J.parentNode&&!b7(J))Q=k9(J)+1,J=J.parentNode;else return null}function z0(Z){let $=Z.nextSibling;return Z.parentNode.removeChild(Z),$}function o0(Z,$,J,Q,X,K,Y,U,q){let{children:W}=Z,G=W.length?W[$]:null,z=K.length?K[K.length-1]:null,j=z?z.breakAfter:Y;if($==Q&&G&&!Y&&!j&&K.length<2&&G.merge(J,X,K.length?z:null,J==0,U,q))return;if(Q<W.length){let _=W[Q];if(_&&(X<_.length||_.breakAfter&&(z===null||z===void 0?void 0:z.breakAfter))){if($==Q)_=_.split(X),X=0;if(!j&&z&&_.merge(0,X,z,!0,0,q))K[K.length-1]=_;else{if(X||_.children.length&&!_.children[0].length)_.merge(0,X,null,!1,0,q);K.push(_)}}else if(_===null||_===void 0?void 0:_.breakAfter)if(z)z.breakAfter=1;else Y=1;Q++}if(G){if(G.breakAfter=Y,J>0){if(!Y&&K.length&&G.merge(J,G.length,K[0],!1,U,0))G.breakAfter=K.shift().breakAfter;else if(J<G.length||G.children.length&&G.children[G.children.length-1].length==0)G.merge(J,G.length,null,!1,U,0);$++}}while($<Q&&K.length)if(W[Q-1].become(K[K.length-1]))Q--,K.pop(),q=K.length?0:U;else if(W[$].become(K[0]))$++,K.shift(),U=K.length?0:q;else break;if(!K.length&&$&&Q<W.length&&!W[$-1].breakAfter&&W[Q].merge(0,0,W[$-1],!1,U,q))$--;if($<Q||K.length)Z.replaceChildren($,Q,K)}function t0(Z,$,J,Q,X,K){let Y=Z.childCursor(),{i:U,off:q}=Y.findPos(J,1),{i:W,off:G}=Y.findPos($,-1),z=$-J;for(let j of Q)z+=j.length;Z.length+=z,o0(Z,W,G,U,q,Q,0,X,K)}function b2(Z,$,J){let Q=Z.nodeValue.length;if($>Q)$=Q;let X=$,K=$,Y=0;if($==0&&J<0||$==Q&&J>=0){if(!(L.chrome||L.gecko)){if($)X--,Y=1;else if(K<Q)K++,Y=-1}}else if(J<0)X--;else if(K<Q)K++;let U=x9(Z,X,K).getClientRects();if(!U.length)return null;let q=U[(Y?Y<0:J>=0)?0:U.length-1];if(L.safari&&!Y&&q.width==0)q=Array.prototype.find.call(U,(W)=>W.width)||q;return Y?m7(q,Y<0):q||null}function $6(Z,$){let J=Z.dom,{children:Q}=Z,X=0;for(let K=0;X<Q.length;X++){let Y=Q[X],U=K+Y.length;if(U==K&&Y.getSide()<=0)continue;if($>K&&$<U&&Y.dom.parentNode==J)return Y.domAtPos($-K);if($<=K)break;K=U}for(let K=X;K>0;K--){let Y=Q[K-1];if(Y.dom.parentNode==J)return Y.domAtPos(Y.length)}for(let K=X;K<Q.length;K++){let Y=Q[K];if(Y.dom.parentNode==J)return Y.domAtPos(0)}return new q3(J,0)}function J6(Z,$,J){let Q,{children:X}=Z;if(J>0&&$ instanceof q9&&X.length&&(Q=X[X.length-1])instanceof q9&&Q.mark.eq($.mark))J6(Q,$.children[0],J-1);else X.push($),$.setParent(Z);Z.length+=$.length}function Q6(Z,$,J){let Q=null,X=-1,K=null,Y=-1;function U(W,G){for(let z=0,j=0;z<W.children.length&&j<=G;z++){let _=W.children[z],H=j+_.length;if(H>=G){if(_.children.length)U(_,G-j);else if((!K||K.isHidden&&J>0)&&(H>G||j==H&&_.getSide()>0))K=_,Y=G-j;else if(j<G||j==H&&_.getSide()<0&&!_.isHidden)Q=_,X=G-j}j=H}}U(Z,$);let q=(J<0?Q:K)||Q||K;if(q)return q.coordsAt(Math.max(0,q==Q?X:Y),J);return k2(Z)}function k2(Z){let $=Z.dom.lastChild;if(!$)return Z.dom.getBoundingClientRect();let J=w5($);return J[J.length-1]||null}function gZ(Z,$){for(let J in Z)if(J=="class"&&$.class)$.class+=" "+Z.class;else if(J=="style"&&$.style)$.style+=";"+Z.style;else $[J]=Z[J];return $}function k7(Z,$,J){if(Z==$)return!0;if(!Z)Z=H0;if(!$)$=H0;let Q=Object.keys(Z),X=Object.keys($);if(Q.length-(J&&Q.indexOf(J)>-1?1:0)!=X.length-(J&&X.indexOf(J)>-1?1:0))return!1;for(let K of Q)if(K!=J&&(X.indexOf(K)==-1||Z[K]!==$[K]))return!1;return!0}function lZ(Z,$,J){let Q=!1;if($){for(let X in $)if(!(J&&(X in J)))if(Q=!0,X=="style")Z.style.cssText="";else Z.removeAttribute(X)}if(J){for(let X in J)if(!($&&$[X]==J[X]))if(Q=!0,X=="style")Z.style.cssText=J[X];else Z.setAttribute(X,J[X])}return Q}function x2(Z){let $=Object.create(null);for(let J=0;J<Z.attributes.length;J++){let Q=Z.attributes[J];$[Q.name]=Q.value}return $}function X6(Z,$=!1){let{inclusiveStart:J,inclusiveEnd:Q}=Z;if(J==null)J=Z.inclusive;if(Q==null)Q=Z.inclusive;return{start:J!==null&&J!==void 0?J:$,end:Q!==null&&Q!==void 0?Q:$}}function w2(Z,$){return Z==$||!!(Z&&$&&Z.compare($))}function pZ(Z,$,J,Q=0){let X=J.length-1;if(X>=0&&J[X]+Q>=Z)J[X]=Math.max(J[X],$);else J.push(Z,$)}function N7(Z,$){for(let J of $)Z=new q9(J,[Z],Z.length);return Z}function K6(Z){let $=[];for(let J=0;J<Z.length;J++)$.push(1<<+Z[J]);return $}function Y6(Z){return Z<=247?v2[Z]:1424<=Z&&Z<=1524?2:1536<=Z&&Z<=1785?h2[Z-1536]:1774<=Z&&Z<=2220?4:8192<=Z&&Z<=8204?256:64336<=Z&&Z<=65023?4:1}function U6(Z,$){if(Z.length!=$.length)return!1;for(let J=0;J<Z.length;J++){let Q=Z[J],X=$[J];if(Q.from!=X.from||Q.to!=X.to||Q.direction!=X.direction||!U6(Q.inner,X.inner))return!1}return!0}function u2(Z,$,J,Q,X){for(let K=0;K<=Q.length;K++){let Y=K?Q[K-1].to:$,U=K<Q.length?Q[K].from:J,q=K?256:X;for(let W=Y,G=q,z=q;W<U;W++){let j=Y6(Z.charCodeAt(W));if(j==512)j=G;else if(j==8&&z==4)j=16;if(g[W]=j==4?2:j,j&7)z=j;G=j}for(let W=Y,G=q,z=q;W<U;W++){let j=g[W];if(j==128)if(W<U-1&&G==g[W+1]&&G&24)j=g[W]=G;else g[W]=256;else if(j==64){let _=W+1;while(_<U&&g[_]==64)_++;let H=W&&G==8||_<J&&g[_]==8?z==1?1:8:256;for(let F=W;F<_;F++)g[F]=H;W=_-1}else if(j==8&&z==1)g[W]=1;if(G=j,j&7)z=j}}}function f2(Z,$,J,Q,X){let K=X==1?2:1;for(let Y=0,U=0,q=0;Y<=Q.length;Y++){let W=Y?Q[Y-1].to:$,G=Y<Q.length?Q[Y].from:J;for(let z=W,j,_,H;z<G;z++)if(_=dZ[j=Z.charCodeAt(z)])if(_<0){for(let F=U-3;F>=0;F-=3)if(i3[F+1]==-_){let N=i3[F+2],D=N&2?X:!(N&4)?0:N&1?K:X;if(D)g[z]=g[i3[F]]=D;U=F;break}}else if(i3.length==189)break;else i3[U++]=z,i3[U++]=j,i3[U++]=q;else if((H=g[z])==2||H==1){let F=H==X;q=F?0:1;for(let N=U-3;N>=0;N-=3){let D=i3[N+2];if(D&2)break;if(F)i3[N+2]|=2;else{if(D&4)break;i3[N+2]|=4}}}}}function g2(Z,$,J,Q){for(let X=0,K=Q;X<=J.length;X++){let Y=X?J[X-1].to:Z,U=X<J.length?J[X].from:$;for(let q=Y;q<U;){let W=g[q];if(W==256){let G=q+1;for(;;)if(G==U){if(X==J.length)break;G=J[X++].to,U=X<J.length?J[X].from:$}else if(g[G]==256)G++;else break;let z=K==1,j=(G<$?g[G]:Q)==1,_=z==j?z?1:2:Q;for(let H=G,F=X,N=F?J[F-1].to:Z;H>q;){if(H==N)H=J[--F].from,N=F?J[F-1].to:Z;g[--H]=_}q=G}else K=W,q++}}}function cZ(Z,$,J,Q,X,K,Y){let U=Q%2?2:1;if(Q%2==X%2)for(let q=$,W=0;q<J;){let G=!0,z=!1;if(W==K.length||q<K[W].from){let F=g[q];if(F!=U)G=!1,z=F==16}let j=!G&&U==1?[]:null,_=G?Q:Q+1,H=q;Z:for(;;)if(W<K.length&&H==K[W].from){if(z)break Z;let F=K[W];if(!G)for(let N=F.to,D=W+1;;){if(N==J)break Z;if(D<K.length&&K[D].from==N)N=K[D++].to;else if(g[N]==U)break Z;else break}if(W++,j)j.push(F);else{if(F.from>q)Y.push(new K9(q,F.from,_));let N=F.direction==v9!=!(_%2);sZ(Z,N?Q+1:Q,X,F.inner,F.from,F.to,Y),q=F.to}H=F.to}else if(H==J||(G?g[H]!=U:g[H]==U))break;else H++;if(j)cZ(Z,q,H,Q+1,X,j,Y);else if(q<H)Y.push(new K9(q,H,_));q=H}else for(let q=J,W=K.length;q>$;){let G=!0,z=!1;if(!W||q>K[W-1].to){let F=g[q-1];if(F!=U)G=!1,z=F==16}let j=!G&&U==1?[]:null,_=G?Q:Q+1,H=q;Z:for(;;)if(W&&H==K[W-1].to){if(z)break Z;let F=K[--W];if(!G)for(let N=F.from,D=W;;){if(N==$)break Z;if(D&&K[D-1].to==N)N=K[--D].from;else if(g[N-1]==U)break Z;else break}if(j)j.push(F);else{if(F.to<q)Y.push(new K9(F.to,q,_));let N=F.direction==v9!=!(_%2);sZ(Z,N?Q+1:Q,X,F.inner,F.from,F.to,Y),q=F.from}H=F.from}else if(H==$||(G?g[H-1]!=U:g[H-1]==U))break;else H--;if(j)cZ(Z,H,q,Q+1,X,j,Y);else if(H<q)Y.push(new K9(H,q,_));q=H}}function sZ(Z,$,J,Q,X,K,Y){let U=$%2?2:1;u2(Z,X,K,Q,U),f2(Z,X,K,Q,U),g2(X,K,Q,U),cZ(Z,X,K,$,J,Q,Y)}function l2(Z,$,J){if(!Z)return[new K9(0,0,$==q4?1:0)];if($==v9&&!J.length&&!m2.test(Z))return q6(Z.length);if(J.length)while(Z.length>g.length)g[g.length]=256;let Q=[],X=$==v9?0:1;return sZ(Z,X,X,J,0,Z.length,Q),Q}function q6(Z){return[new K9(0,Z,0)]}function p2(Z,$,J,Q,X){var K;let Y=Q.head-Z.from,U=K9.find($,Y,(K=Q.bidiLevel)!==null&&K!==void 0?K:-1,Q.assoc),q=$[U],W=q.side(X,J);if(Y==W){let j=U+=X?1:-1;if(j<0||j>=$.length)return null;q=$[U=j],Y=q.side(!X,J),W=q.side(X,J)}let G=Q3(Z.text,Y,q.forward(X,J));if(G<q.from||G>q.to)G=W;G6=Z.text.slice(Math.min(Y,G),Math.max(Y,G));let z=U==(X?$.length-1:0)?null:$[U+(X?1:-1)];if(z&&G==W&&z.level+(X?0:1)<q.level)return R.cursor(z.side(!X,J)+Z.from,z.forward(X,J)?1:-1,z.level);return R.cursor(G+Z.from,q.forward(X,J)?-1:1,q.level)}function d2(Z,$,J){for(let Q=$;Q<J;Q++){let X=Y6(Z.charCodeAt(Q));if(X==1)return v9;if(X==2||X==4)return q4}return v9}function z3(Z,$,J){let Q=Z.facet(_6);if(Q.length)Q[0]($);else if(window.onerror)window.onerror(String($),J,void 0,void 0,$);else if(J)console.error(J+":",$);else console.error($)}function F0(Z,$){let J=Z.state.facet(I6);if(!J.length)return J;let Q=J.map((K)=>K instanceof Function?K(Z):K),X=[];return w.spans(Q,$.from,$.to,{point(){},span(K,Y,U,q){let W=K-$.from,G=Y-$.from,z=X;for(let j=U.length-1;j>=0;j--,q--){let _=U[j].spec.bidiIsolate,H;if(_==null)_=d2($.text,W,G);if(q>0&&z.length&&(H=z[z.length-1]).to==W&&H.direction==_)H.to=G,z=H.inner;else{let F={from:W,to:G,direction:_,inner:[]};z.push(F),z=F.inner}}}}),X}function A6(Z){let $=0,J=0,Q=0,X=0;for(let K of Z.state.facet(M6)){let Y=K(Z);if(Y){if(Y.left!=null)$=Math.max($,Y.left);if(Y.right!=null)J=Math.max(J,Y.right);if(Y.top!=null)Q=Math.max(Q,Y.top);if(Y.bottom!=null)X=Math.max(X,Y.bottom)}}return{left:$,right:J,top:Q,bottom:X}}function i2(Z){return Z.node.nodeType==1&&Z.node.firstChild&&(Z.offset==0||Z.node.childNodes[Z.offset-1].contentEditable=="false")&&(Z.offset==Z.node.childNodes.length||Z.node.childNodes[Z.offset].contentEditable=="false")}function L6(Z,$){let J=Z.observer.selectionRange;if(!J.focusNode)return null;let Q=a0(J.focusNode,J.focusOffset),X=r0(J.focusNode,J.focusOffset),K=Q||X;if(X&&Q&&X.node!=Q.node){let U=l.get(X.node);if(!U||U instanceof u3&&U.text!=X.node.nodeValue)K=X;else if(Z.docView.lastCompositionAfterCursor){let q=l.get(Q.node);if(!(!q||q instanceof u3&&q.text!=Q.node.nodeValue))K=X}}if(Z.docView.lastCompositionAfterCursor=K!=Q,!K)return null;let Y=$-K.offset;return{from:Y,to:Y+K.node.nodeValue.length,node:K.node}}function n2(Z,$,J){let Q=L6(Z,J);if(!Q)return null;let{node:X,from:K,to:Y}=Q,U=X.nodeValue;if(/[\n\r]/.test(U))return null;if(Z.state.doc.sliceString(Q.from,Q.to)!=U)return null;let q=$.invertedDesc,W=new y3(q.mapPos(K),q.mapPos(Y),K,Y),G=[];for(let z=X.parentNode;;z=z.parentNode){let j=l.get(z);if(j instanceof q9)G.push({node:z,deco:j.mark});else if(j instanceof $3||z.nodeName=="DIV"&&z.parentNode==Z.contentDOM)return{range:W,text:X,marks:G,line:z};else if(z!=Z.contentDOM)G.push({node:z,deco:new h5({inclusive:!0,attributes:x2(z),tagName:z.tagName.toLowerCase()})});else return null}}function a2(Z,$){if(Z.nodeType!=1)return 0;return($&&Z.childNodes[$-1].contentEditable=="false"?1:0)|($<Z.childNodes.length&&Z.childNodes[$].contentEditable=="false"?2:0)}function o2(Z,$,J){let Q=new r2;return w.compare(Z,$,J,Q),Q.changes}function t2(Z,$){for(let J=Z;J&&J!=$;J=J.assignedSlot||J.parentNode)if(J.nodeType==1&&J.contentEditable=="false")return!0;return!1}function e2(Z,$){let J=!1;if($)Z.iterChangedRanges((Q,X)=>{if(Q<$.to&&X>$.from)J=!0});return J}function ZQ(Z,$,J=1){let Q=Z.charCategorizer($),X=Z.doc.lineAt($),K=$-X.from;if(X.length==0)return R.cursor($);if(K==0)J=1;else if(K==X.length)J=-1;let Y=K,U=K;if(J<0)Y=Q3(X.text,K,!1);else U=Q3(X.text,K);let q=Q(X.text.slice(Y,U));while(Y>0){let W=Q3(X.text,Y,!1);if(Q(X.text.slice(W,Y))!=q)break;Y=W}while(U<X.length){let W=Q3(X.text,U);if(Q(X.text.slice(U,W))!=q)break;U=W}return R.range(Y+X.from,U+X.from)}function $Q(Z,$){return $.left>Z?$.left-Z:Math.max(0,Z-$.right)}function JQ(Z,$){return $.top>Z?$.top-Z:Math.max(0,Z-$.bottom)}function SZ(Z,$){return Z.top<$.bottom-1&&Z.bottom>$.top+1}function N0(Z,$){return $<Z.top?{top:$,left:Z.left,right:Z.right,bottom:Z.bottom}:Z}function D0(Z,$){return $>Z.bottom?{top:Z.top,left:Z.left,right:Z.right,bottom:$}:Z}function aZ(Z,$,J){let Q,X,K,Y,U=!1,q,W,G,z;for(let H=Z.firstChild;H;H=H.nextSibling){let F=w5(H);for(let N=0;N<F.length;N++){let D=F[N];if(X&&SZ(X,D))D=N0(D0(D,X.bottom),X.top);let M=$Q($,D),V=JQ(J,D);if(M==0&&V==0)return H.nodeType==3?R0(H,$,J):aZ(H,$,J);if(!Q||Y>V||Y==V&&K>M){Q=H,X=D,K=M,Y=V;let I=V?J<D.top?-1:1:M?$<D.left?-1:1:0;U=!I||(I>0?N<F.length-1:N>0)}if(M==0){if(J>D.bottom&&(!G||G.bottom<D.bottom))q=H,G=D;else if(J<D.top&&(!z||z.top>D.top))W=H,z=D}else if(G&&SZ(G,D))G=D0(G,D.bottom);else if(z&&SZ(z,D))z=N0(z,D.top)}}if(G&&G.bottom>=J)Q=q,X=G;else if(z&&z.top<=J)Q=W,X=z;if(!Q)return{node:Z,offset:0};let j=Math.max(X.left,Math.min(X.right,$));if(Q.nodeType==3)return R0(Q,j,J);if(U&&Q.contentEditable!="false")return aZ(Q,j,J);let _=Array.prototype.indexOf.call(Z.childNodes,Q)+($>=(X.left+X.right)/2?1:0);return{node:Z,offset:_}}function R0(Z,$,J){let Q=Z.nodeValue.length,X=-1,K=1e9,Y=0;for(let U=0;U<Q;U++){let q=x9(Z,U,U+1).getClientRects();for(let W=0;W<q.length;W++){let G=q[W];if(G.top==G.bottom)continue;if(!Y)Y=$-G.left;let z=(G.top>J?G.top-J:J-G.bottom)-1;if(G.left-1<=$&&G.right+1>=$&&z<K){let j=$>=(G.left+G.right)/2,_=j;if(L.chrome||L.gecko){if(x9(Z,U).getBoundingClientRect().left==G.right)_=!j}if(z<=0)return{node:Z,offset:U+(_?1:0)};X=U+(_?1:0),K=z}}}return{node:Z,offset:X>-1?X:Y>0?Z.nodeValue.length:0}}function B6(Z,$,J,Q=-1){var X,K;let Y=Z.contentDOM.getBoundingClientRect(),U=Y.top+Z.viewState.paddingTop,q,{docHeight:W}=Z.viewState,{x:G,y:z}=$,j=z-U;if(j<0)return 0;if(j>W)return Z.state.doc.length;for(let I=Z.viewState.heightOracle.textHeight/2,C=!1;;){if(q=Z.elementAtHeight(j),q.type==T3.Text)break;for(;;){if(j=Q>0?q.bottom+I:q.top-I,j>=0&&j<=W)break;if(C)return J?null:0;C=!0,Q=-Q}}z=U+j;let _=q.from;if(_<Z.viewport.from)return Z.viewport.from==0?0:J?null:V0(Z,Y,q,G,z);if(_>Z.viewport.to)return Z.viewport.to==Z.state.doc.length?Z.state.doc.length:J?null:V0(Z,Y,q,G,z);let H=Z.dom.ownerDocument,F=Z.root.elementFromPoint?Z.root:H,N=F.elementFromPoint(G,z);if(N&&!Z.contentDOM.contains(N))N=null;if(!N){if(G=Math.max(Y.left+1,Math.min(Y.right-1,G)),N=F.elementFromPoint(G,z),N&&!Z.contentDOM.contains(N))N=null}let D,M=-1;if(N&&((X=Z.docView.nearest(N))===null||X===void 0?void 0:X.isEditable)!=!1){if(H.caretPositionFromPoint){let I=H.caretPositionFromPoint(G,z);if(I)({offsetNode:D,offset:M}=I)}else if(H.caretRangeFromPoint){let I=H.caretRangeFromPoint(G,z);if(I){if({startContainer:D,startOffset:M}=I,!Z.contentDOM.contains(D)||L.safari&&QQ(D,M,G)||L.chrome&&XQ(D,M,G))D=void 0}}}if(!D||!Z.docView.dom.contains(D)){let I=$3.find(Z.docView,_);if(!I)return j>q.top+q.height/2?q.to:q.from;({node:D,offset:M}=aZ(I.dom,G,z))}let V=Z.docView.nearest(D);if(!V)return null;if(V.isWidget&&((K=V.dom)===null||K===void 0?void 0:K.nodeType)==1){let I=V.dom.getBoundingClientRect();return $.y<I.top||$.y<=I.bottom&&$.x<=(I.left+I.right)/2?V.posAtStart:V.posAtEnd}else return V.localPosFromDOM(D,M)+V.posAtStart}function V0(Z,$,J,Q,X){let K=Math.round((Q-$.left)*Z.defaultCharacterWidth);if(Z.lineWrapping&&J.height>Z.defaultLineHeight*1.5){let U=Z.viewState.heightOracle.textHeight,q=Math.floor((X-J.top-(Z.defaultLineHeight-U)*0.5)/U);K+=q*Z.viewState.heightOracle.lineLength}let Y=Z.state.sliceDoc(J.from,J.to);return J.from+Q0(Y,K,Z.state.tabSize)}function QQ(Z,$,J){let Q;if(Z.nodeType!=3||$!=(Q=Z.nodeValue.length))return!1;for(let X=Z.nextSibling;X;X=X.nextSibling)if(X.nodeType!=1||X.nodeName!="BR")return!1;return x9(Z,Q-1,Q).getBoundingClientRect().left>J}function XQ(Z,$,J){if($!=0)return!1;for(let X=Z;;){let K=X.parentNode;if(!K||K.nodeType!=1||K.firstChild!=X)return!1;if(K.classList.contains("cm-line"))break;X=K}let Q=Z.nodeType==1?Z.getBoundingClientRect():x9(Z,0,Math.max(Z.nodeValue.length,1)).getBoundingClientRect();return J-Q.left>5}function KQ(Z,$){let J=Z.lineBlockAt($);if(Array.isArray(J.type)){for(let Q of J.type)if(Q.to>$||Q.to==$&&(Q.to==J.to||Q.type==T3.Text))return Q}return J}function YQ(Z,$,J,Q){let X=KQ(Z,$.head),K=!Q||X.type!=T3.Text||!(Z.lineWrapping||X.widgetLineBreaks)?null:Z.coordsAtPos($.assoc<0&&$.head>X.from?$.head-1:$.head);if(K){let Y=Z.dom.getBoundingClientRect(),U=Z.textDirectionAt(X.from),q=Z.posAtCoords({x:J==(U==i.LTR)?Y.right-1:Y.left+1,y:(K.top+K.bottom)/2});if(q!=null)return R.cursor(q,J?-1:1)}return R.cursor(J?X.to:X.from,J?-1:1)}function I0(Z,$,J,Q){let X=Z.state.doc.lineAt($.head),K=Z.bidiSpans(X),Y=Z.textDirectionAt(X.from);for(let U=$,q=null;;){let W=p2(X,K,Y,U,J),G=G6;if(!W){if(X.number==(J?Z.state.doc.lines:1))return U;G="\n",X=Z.state.doc.line(X.number+(J?1:-1)),K=Z.bidiSpans(X),W=Z.visualLineSide(X,!J)}if(!q){if(!Q)return W;q=Q(G)}else if(!q(G))return U;U=W}}function UQ(Z,$,J){let Q=Z.state.charCategorizer($),X=Q(J);return(K)=>{let Y=Q(K);if(X==P3.Space)X=Y;return X==Y}}function qQ(Z,$,J,Q){let X=$.head,K=J?1:-1;if(X==(J?Z.state.doc.length:0))return R.cursor(X,$.assoc);let Y=$.goalColumn,U,q=Z.contentDOM.getBoundingClientRect(),W=Z.coordsAtPos(X,$.assoc||-1),G=Z.documentTop;if(W){if(Y==null)Y=W.left-q.left;U=K<0?W.top:W.bottom}else{let _=Z.viewState.lineBlockAt(X);if(Y==null)Y=Math.min(q.right-q.left,Z.defaultCharacterWidth*(X-_.from));U=(K<0?_.top:_.bottom)+G}let z=q.left+Y,j=Q!==null&&Q!==void 0?Q:Z.viewState.heightOracle.textHeight>>1;for(let _=0;;_+=10){let H=U+(j+_)*K,F=B6(Z,{x:z,y:H},!1,K);if(H<q.top||H>q.bottom||(K<0?F<X:F>X)){let N=Z.docView.coordsForChar(F),D=!N||H<N.top?-1:1;return R.cursor(F,D,void 0,Y)}}}function P7(Z,$,J){for(;;){let Q=0;for(let X of Z)X.between($-1,$+1,(K,Y,U)=>{if($>K&&$<Y){let q=Q||J||($-K<Y-$?-1:1);$=q<0?K:Y,Q=q}});if(!Q)return $}}function bZ(Z,$,J){let Q=P7(Z.state.facet(j4).map((X)=>X(Z)),J.from,$.head>J.from?-1:1);return Q==J.from?J:R.cursor(Q,Q<J.from?1:-1)}function GQ(Z,$,J){for(;;){if(!$||J<U9($))return!1;if($==Z)return!0;J=k9($)+1,$=$.parentNode}}function C6(Z,$){let J,{newSel:Q}=$,X=Z.state.selection.main,K=Z.inputState.lastKeyTime>Date.now()-100?Z.inputState.lastKeyCode:-1;if($.bounds){let{from:Y,to:U}=$.bounds,q=X.from,W=null;if(K===8||L.android&&$.text.length<U-Y)q=X.to,W="end";let G=zQ(Z.state.doc.sliceString(Y,U,T5),$.text,q-Y,W);if(G){if(L.chrome&&K==13&&G.toB==G.from+2&&$.text.slice(G.from,G.toB)==T5+T5)G.toB--;J={from:Y+G.from,to:Y+G.toA,insert:b.of($.text.slice(G.from,G.toB).split(T5))}}}else if(Q&&(!Z.hasFocus&&Z.state.facet(O9)||Q.main.eq(X)))Q=null;if(!J&&!Q)return!1;if(!J&&$.typeOver&&!X.empty&&Q&&Q.main.empty)J={from:X.from,to:X.to,insert:Z.state.doc.slice(X.from,X.to)};else if(J&&J.from>=X.from&&J.to<=X.to&&(J.from!=X.from||J.to!=X.to)&&X.to-X.from-(J.to-J.from)<=4)J={from:X.from,to:X.to,insert:Z.state.doc.slice(X.from,J.from).append(J.insert).append(Z.state.doc.slice(J.to,X.to))};else if((L.mac||L.android)&&J&&J.from==J.to&&J.from==X.head-1&&/^\. ?$/.test(J.insert.toString())&&Z.contentDOM.getAttribute("autocorrect")=="off"){if(Q&&J.insert.length==2)Q=R.single(Q.main.anchor-1,Q.main.head-1);J={from:X.from,to:X.to,insert:b.of([" "])}}else if(L.chrome&&J&&J.from==J.to&&J.from==X.head&&J.insert.toString()=="\n "&&Z.lineWrapping){if(Q)Q=R.single(Q.main.anchor-1,Q.main.head-1);J={from:X.from,to:X.to,insert:b.of([" "])}}if(J)return _4(Z,J,Q,K);else if(Q&&!Q.main.eq(X)){let Y=!1,U="select";if(Z.inputState.lastSelectionTime>Date.now()-50){if(Z.inputState.lastSelectionOrigin=="select")Y=!0;U=Z.inputState.lastSelectionOrigin}return Z.dispatch({selection:Q,scrollIntoView:Y,userEvent:U}),!0}else return!1}function _4(Z,$,J,Q=-1){if(L.ios&&Z.inputState.flushIOSKey($))return!0;let X=Z.state.selection.main;if(L.android&&($.to==X.to&&($.from==X.from||$.from==X.from-1&&Z.state.sliceDoc($.from,X.from)==" ")&&$.insert.length==1&&$.insert.lines==2&&$5(Z.contentDOM,"Enter",13)||($.from==X.from-1&&$.to==X.to&&$.insert.length==0||Q==8&&$.insert.length<$.to-$.from&&$.to>X.head)&&$5(Z.contentDOM,"Backspace",8)||$.from==X.from&&$.to==X.to+1&&$.insert.length==0&&$5(Z.contentDOM,"Delete",46)))return!0;let K=$.insert.toString();if(Z.inputState.composing>=0)Z.inputState.composing++;let Y,U=()=>Y||(Y=WQ(Z,$,J));if(!Z.state.facet(O6).some((q)=>q(Z,$.from,$.to,K,U)))Z.dispatch(U());return!0}function WQ(Z,$,J){let Q,X=Z.state,K=X.selection.main;if($.from>=K.from&&$.to<=K.to&&$.to-$.from>=(K.to-K.from)/3&&(!J||J.main.empty&&J.main.from==$.from+$.insert.length)&&Z.inputState.composing<0){let U=K.from<$.from?X.sliceDoc(K.from,$.from):"",q=K.to>$.to?X.sliceDoc($.to,K.to):"";Q=X.replaceSelection(Z.state.toText(U+$.insert.sliceString(0,void 0,Z.state.lineBreak)+q))}else{let U=X.changes($),q=J&&J.main.to<=U.newLength?J.main:void 0;if(X.selection.ranges.length>1&&Z.inputState.composing>=0&&$.to<=K.to&&$.to>=K.to-10){let W=Z.state.sliceDoc($.from,$.to),G,z=J&&L6(Z,J.main.head);if(z){let H=$.insert.length-($.to-$.from);G={from:z.from,to:z.to-H}}else G=Z.state.doc.lineAt(K.head);let j=K.to-$.to,_=K.to-K.from;Q=X.changeByRange((H)=>{if(H.from==K.from&&H.to==K.to)return{changes:U,range:q||H.map(U)};let F=H.to-j,N=F-W.length;if(H.to-H.from!=_||Z.state.sliceDoc(N,F)!=W||H.to>=G.from&&H.from<=G.to)return{range:H};let D=X.changes({from:N,to:F,insert:$.insert}),M=H.to-K.to;return{changes:D,range:!q?H.map(D):R.range(Math.max(0,q.anchor+M),Math.max(0,q.head+M))}})}else Q={changes:U,selection:q&&X.selection.replaceRange(q)}}let Y="input.type";if(Z.composing||Z.inputState.compositionPendingChange&&Z.inputState.compositionEndedAt>Date.now()-50){if(Z.inputState.compositionPendingChange=!1,Y+=".compose",Z.inputState.compositionFirstChange)Y+=".start",Z.inputState.compositionFirstChange=!1}return X.update(Q,{userEvent:Y,scrollIntoView:!0})}function zQ(Z,$,J,Q){let X=Math.min(Z.length,$.length),K=0;while(K<X&&Z.charCodeAt(K)==$.charCodeAt(K))K++;if(K==X&&Z.length==$.length)return null;let Y=Z.length,U=$.length;while(Y>0&&U>0&&Z.charCodeAt(Y-1)==$.charCodeAt(U-1))Y--,U--;if(Q=="end"){let q=Math.max(0,K-Math.min(Y,U));J-=Y+q-K}if(Y<K&&Z.length<$.length){let q=J<=K&&J>=Y?K-J:0;K-=q,U=K+(U-Y),Y=K}else if(U<K){let q=J<=K&&J>=U?K-J:0;K-=q,Y=K+(Y-U),U=K}return{from:K,toA:Y,toB:U}}function jQ(Z){let $=[];if(Z.root.activeElement!=Z.contentDOM)return $;let{anchorNode:J,anchorOffset:Q,focusNode:X,focusOffset:K}=Z.observer.selectionRange;if(J){if($.push(new rZ(J,Q)),X!=J||K!=Q)$.push(new rZ(X,K))}return $}function _Q(Z,$){if(Z.length==0)return null;let J=Z[0].pos,Q=Z.length==2?Z[1].pos:J;return J>-1&&Q>-1?R.single(J+$,Q+$):null}function M0(Z,$){return(J,Q)=>{try{return $.call(Z,Q,J)}catch(X){z3(J.state,X)}}}function OQ(Z){let $=Object.create(null);function J(Q){return $[Q]||($[Q]={observers:[],handlers:[]})}for(let Q of Z){let X=Q.spec;if(X&&X.domEventHandlers)for(let K in X.domEventHandlers){let Y=X.domEventHandlers[K];if(Y)J(K).handlers.push(M0(Q.value,Y))}if(X&&X.domEventObservers)for(let K in X.domEventObservers){let Y=X.domEventObservers[K];if(Y)J(K).observers.push(M0(Q.value,Y))}}for(let Q in f3)J(Q).handlers.push(f3[Q]);for(let Q in b3)J(Q).observers.push(b3[Q]);return $}function V7(Z){return Math.max(0,Z)*0.7+8}function FQ(Z,$){return Math.max(Math.abs(Z.clientX-$.clientX),Math.abs(Z.clientY-$.clientY))}function NQ(Z,$){let J=Z.state.facet(W6);return J.length?J[0]($):L.mac?$.metaKey:$.ctrlKey}function DQ(Z,$){let J=Z.state.facet(z6);return J.length?J[0]($):L.mac?!$.altKey:!$.ctrlKey}function RQ(Z,$){let{main:J}=Z.state.selection;if(J.empty)return!1;let Q=x5(Z.root);if(!Q||Q.rangeCount==0)return!0;let X=Q.getRangeAt(0).getClientRects();for(let K=0;K<X.length;K++){let Y=X[K];if(Y.left<=$.clientX&&Y.right>=$.clientX&&Y.top<=$.clientY&&Y.bottom>=$.clientY)return!0}return!1}function VQ(Z,$){if(!$.bubbles)return!0;if($.defaultPrevented)return!1;for(let J=$.target,Q;J!=Z.contentDOM;J=J.parentNode)if(!J||J.nodeType==11||(Q=l.get(J))&&Q.ignoreEvent($))return!1;return!0}function IQ(Z){let $=Z.dom.parentNode;if(!$)return;let J=$.appendChild(document.createElement("textarea"));J.style.cssText="position: fixed; left: -10000px; top: 10px",J.focus(),setTimeout(()=>{Z.focus(),J.remove(),x6(Z,J.value)},50)}function f7(Z,$,J){for(let Q of Z.facet($))J=Q(J,Z);return J}function x6(Z,$){$=f7(Z.state,G4,$);let{state:J}=Z,Q,X=1,K=J.toText($),Y=K.lines==J.selection.ranges.length;if(oZ!=null&&J.selection.ranges.every((q)=>q.empty)&&oZ==K.toString()){let q=-1;Q=J.changeByRange((W)=>{let G=J.doc.lineAt(W.from);if(G.from==q)return{range:W};q=G.from;let z=J.toText((Y?K.line(X++).text:$)+J.lineBreak);return{changes:{from:G.from,insert:z},range:R.cursor(W.from+z.length)}})}else if(Y)Q=J.changeByRange((q)=>{let W=K.line(X++);return{changes:{from:q.from,to:q.to,insert:W.text},range:R.cursor(q.from+W.length)}});else Q=J.replaceSelection(K);Z.dispatch(Q,{userEvent:"input.paste",scrollIntoView:!0})}function A0(Z,$,J,Q){if(Q==1)return R.cursor($,J);else if(Q==2)return ZQ(Z.state,$,J);else{let X=$3.find(Z.docView,$),K=Z.state.doc.lineAt(X?X.posAtEnd:$),Y=X?X.posAtStart:K.from,U=X?X.posAtEnd:K.to;if(U<Z.state.doc.length&&U==K.to)U++;return R.range(Y,U)}}function MQ(Z,$,J,Q){let X=$3.find(Z.docView,$);if(!X)return 1;let K=$-X.posAtStart;if(K==0)return 1;if(K==X.length)return-1;let Y=X.coordsAt(K,-1);if(Y&&L0(J,Q,Y))return-1;let U=X.coordsAt(K,1);if(U&&L0(J,Q,U))return 1;return Y&&Y.bottom>=Q?-1:1}function B0(Z,$){let J=Z.posAtCoords({x:$.clientX,y:$.clientY},!1);return{pos:J,bias:MQ(Z,J,$.clientX,$.clientY)}}function w6(Z){if(!AQ)return Z.detail;let $=E0,J=C0;return E0=Z,C0=Date.now(),P0=!$||J>Date.now()-400&&Math.abs($.clientX-Z.clientX)<2&&Math.abs($.clientY-Z.clientY)<2?(P0+1)%3:1}function LQ(Z,$){let J=B0(Z,$),Q=w6($),X=Z.state.selection;return{update(K){if(K.docChanged)J.pos=K.changes.mapPos(J.pos),X=X.map(K.changes)},get(K,Y,U){let q=B0(Z,K),W,G=A0(Z,q.pos,q.bias,Q);if(J.pos!=q.pos&&!Y){let z=A0(Z,J.pos,J.bias,Q),j=Math.min(z.from,G.from),_=Math.max(z.to,G.to);G=j<G.from?R.range(j,_):R.range(_,j)}if(Y)return X.replaceRange(X.main.extend(G.from,G.to));else if(U&&Q==1&&X.ranges.length>1&&(W=BQ(X,q.pos)))return W;else if(U)return X.addRange(G);else return R.create([G])}}}function BQ(Z,$){for(let J=0;J<Z.ranges.length;J++){let{from:Q,to:X}=Z.ranges[J];if(Q<=$&&X>=$)return R.create(Z.ranges.slice(0,J).concat(Z.ranges.slice(J+1)),Z.mainIndex==J?0:Z.mainIndex-(Z.mainIndex>J?1:0))}return null}function T0(Z,$,J,Q){if(J=f7(Z.state,G4,J),!J)return;let X=Z.posAtCoords({x:$.clientX,y:$.clientY},!1),{draggedContent:K}=Z.inputState,Y=Q&&K&&DQ(Z,$)?{from:K.from,to:K.to}:null,U={from:X,insert:J},q=Z.state.changes(Y?[Y,U]:U);Z.focus(),Z.dispatch({changes:q,selection:{anchor:q.mapPos(X,-1),head:q.mapPos(X,1)},userEvent:Y?"move.drop":"input.drop"}),Z.inputState.draggedContent=null}function EQ(Z,$){let J=Z.dom.parentNode;if(!J)return;let Q=J.appendChild(document.createElement("textarea"));Q.style.cssText="position: fixed; left: -10000px; top: 10px",Q.value=$,Q.focus(),Q.selectionEnd=$.length,Q.selectionStart=0,setTimeout(()=>{Q.remove(),Z.focus()},50)}function PQ(Z){let $=[],J=[],Q=!1;for(let X of Z.selection.ranges)if(!X.empty)$.push(Z.sliceDoc(X.from,X.to)),J.push(X);if(!$.length){let X=-1;for(let{from:K}of Z.selection.ranges){let Y=Z.doc.lineAt(K);if(Y.number>X)$.push(Y.text),J.push({from:Y.from,to:Math.min(Z.doc.length,Y.to+1)});X=Y.number}Q=!0}return{text:f7(Z,W4,$.join(Z.lineBreak)),ranges:J,linewise:Q}}function h6(Z,$){let J=[];for(let Q of Z.facet(H6)){let X=Q(Z,$);if(X)J.push(X)}return J?Z.update({effects:J,annotations:v6.of(!0)}):null}function m6(Z){setTimeout(()=>{let $=Z.hasFocus;if($!=Z.inputState.notifiedFocused){let J=h6(Z.state,$);if(J)Z.dispatch(J);else Z.update([])}},10)}function CQ(Z){if(!y0.has(Z))y0.add(Z),Z.addEventListener("copy",()=>{}),Z.addEventListener("cut",()=>{})}function b0(){X5=!1}function v7(Z,$){if(Z==$)return Z;if(Z.constructor!=$.constructor)X5=!0;return $}function k0(Z,$){let J,Q;if(Z[$]==null&&(J=Z[$-1])instanceof X3&&(Q=Z[$+1])instanceof X3)Z.splice($-1,3,new X3(J.length+1+Q.length))}function yQ(Z,$,J){let Q=new l6;return w.compare(Z,$,J,Q,0),Q.changes}function SQ(Z,$){let J=Z.getBoundingClientRect(),Q=Z.ownerDocument,X=Q.defaultView||window,K=Math.max(0,J.left),Y=Math.min(X.innerWidth,J.right),U=Math.max(0,J.top),q=Math.min(X.innerHeight,J.bottom);for(let W=Z.parentNode;W&&W!=Q.body;)if(W.nodeType==1){let G=W,z=window.getComputedStyle(G);if((G.scrollHeight>G.clientHeight||G.scrollWidth>G.clientWidth)&&z.overflow!="visible"){let j=G.getBoundingClientRect();K=Math.max(K,j.left),Y=Math.min(Y,j.right),U=Math.max(U,j.top),q=Math.min(W==Z.parentNode?X.innerHeight:q,j.bottom)}W=z.position=="absolute"||z.position=="fixed"?G.offsetParent:G.parentNode}else if(W.nodeType==11)W=W.host;else break;return{left:K-J.left,right:Math.max(K,Y)-J.left,top:U-(J.top+$),bottom:Math.max(U,q)-(J.top+$)}}function bQ(Z,$){let J=Z.getBoundingClientRect();return{left:0,right:J.right-J.left,top:$,bottom:J.bottom-(J.top+$)}}function kQ(Z,$,J){let Q=[],X=Z,K=0;if(w.spans(J,Z,$,{span(){},point(Y,U){if(Y>X)Q.push({from:X,to:Y}),K+=Y-X;X=U}},20),X<$)Q.push({from:X,to:$}),K+=$-X;return{total:K,ranges:Q}}function I7({total:Z,ranges:$},J){if(J<=0)return $[0].from;if(J>=1)return $[$.length-1].to;let Q=Math.floor(Z*J);for(let X=0;;X++){let{from:K,to:Y}=$[X],U=Y-K;if(Q<=U)return K+Q;Q-=U}}function M7(Z,$){let J=0;for(let{from:Q,to:X}of Z.ranges){if($<=X){J+=$-Q;break}J+=X-Q}return J/Z.total}function xQ(Z,$){for(let J of Z)if($(J))return J;return}function S5(Z,$){if($.scale==1)return Z;let J=$.toDOM(Z.top),Q=$.toDOM(Z.bottom);return new n3(Z.from,Z.length,J,Q-J,Array.isArray(Z._content)?Z._content.map((X)=>S5(X,$)):Z._content)}function $4(Z,$,J){return new m3($,{finish(Q){return/&/.test(Q)?Q.replace(/&\w*/,(X)=>{if(X=="&")return Z;if(!J||!J[X])throw new RangeError(`Unsupported selector: ${X}`);return J[X]}):Z+" "+Q}})}function w0(Z,$,J){while($){let Q=l.get($);if(Q&&Q.parent==Z)return Q;let X=$.parentNode;$=X!=Z.dom?X:J>0?$.nextSibling:$.previousSibling}return null}function v0(Z,$){let{startContainer:J,startOffset:Q,endContainer:X,endOffset:K}=$,Y=Z.docView.domAtPos(Z.state.selection.main.anchor);if(b5(Y.node,Y.offset,X,K))[J,Q,X,K]=[X,K,J,Q];return{anchorNode:J,anchorOffset:Q,focusNode:X,focusOffset:K}}function hQ(Z,$){if($.getComposedRanges){let X=$.getComposedRanges(Z.root)[0];if(X)return v0(Z,X)}let J=null;function Q(X){X.preventDefault(),X.stopImmediatePropagation(),J=X.getTargetRanges()[0]}return Z.contentDOM.addEventListener("beforeinput",Q,!0),Z.dom.ownerDocument.execCommand("indent"),Z.contentDOM.removeEventListener("beforeinput",Q,!0),J?v0(Z,J):null}function m0(Z,$,J){for(let Q=Z.state.facet($),X=Q.length-1;X>=0;X--){let K=Q[X],Y=typeof K=="function"?K(Z):K;if(Y)gZ(Y,J)}return J}function fQ(Z,$){const J=Z.split(/-(?!$)/);let Q=J[J.length-1];if(Q=="Space")Q=" ";let X,K,Y,U;for(let q=0;q<J.length-1;++q){const W=J[q];if(/^(cmd|meta|m)$/i.test(W))U=!0;else if(/^a(lt)?$/i.test(W))X=!0;else if(/^(c|ctrl|control)$/i.test(W))K=!0;else if(/^s(hift)?$/i.test(W))Y=!0;else if(/^mod$/i.test(W))if($=="mac")U=!0;else K=!0;else throw new Error("Unrecognized modifier name: "+W)}if(X)Q="Alt-"+Q;if(K)Q="Ctrl-"+Q;if(U)Q="Meta-"+Q;if(Y)Q="Shift-"+Q;return Q}function L7(Z,$,J){if($.altKey)Z="Alt-"+Z;if($.ctrlKey)Z="Ctrl-"+Z;if($.metaKey)Z="Meta-"+Z;if(J!==!1&&$.shiftKey)Z="Shift-"+Z;return Z}function lQ(Z){let $=Z.facet(K5),J=u0.get($);if(!J)u0.set($,J=dQ($.reduce((Q,X)=>Q.concat(X),[])));return J}function dQ(Z,$=uQ){let J=Object.create(null),Q=Object.create(null),X=(Y,U)=>{let q=Q[Y];if(q==null)Q[Y]=U;else if(q!=U)throw new Error("Key binding "+Y+" is used both as a regular binding and as a multi-stroke prefix")},K=(Y,U,q,W,G)=>{var z,j;let _=J[Y]||(J[Y]=Object.create(null)),H=U.split(/ (?!$)/).map((D)=>fQ(D,$));for(let D=1;D<H.length;D++){let M=H.slice(0,D).join(" ");if(X(M,!0),!_[M])_[M]={preventDefault:!0,stopPropagation:!1,run:[(V)=>{let I=H9={view:V,prefix:M,scope:Y};return setTimeout(()=>{if(H9==I)H9=null},pQ),!0}]}}let F=H.join(" ");X(F,!1);let N=_[F]||(_[F]={preventDefault:!1,stopPropagation:!1,run:((j=(z=_._any)===null||z===void 0?void 0:z.run)===null||j===void 0?void 0:j.slice())||[]});if(q)N.run.push(q);if(W)N.preventDefault=!0;if(G)N.stopPropagation=!0};for(let Y of Z){let U=Y.scope?Y.scope.split(" "):["editor"];if(Y.any)for(let W of U){let G=J[W]||(J[W]=Object.create(null));if(!G._any)G._any={preventDefault:!1,stopPropagation:!1,run:[]};let{any:z}=Y;for(let j in G)G[j].run.push((_)=>z(_,J4))}let q=Y[$]||Y.key;if(!q)continue;for(let W of U)if(K(W,q,Y.run,Y.preventDefault,Y.stopPropagation),Y.shift)K(W,"Shift-"+q,Y.shift,Y.preventDefault,Y.stopPropagation)}return J}function cQ(Z,$,J,Q){J4=$;let X=q0($),K=C3(X,0),Y=c3(K)==X.length&&X!=" ",U="",q=!1,W=!1,G=!1;if(H9&&H9.view==J&&H9.scope==Q){if(U=H9.prefix+" ",S6.indexOf($.keyCode)<0)W=!0,H9=null}let z=new Set,j=(N)=>{if(N){for(let D of N.run)if(!z.has(D)){if(z.add(D),D(J)){if(N.stopPropagation)G=!0;return!0}}if(N.preventDefault){if(N.stopPropagation)G=!0;W=!0}}return!1},_=Z[Q],H,F;if(_){if(j(_[U+L7(X,$,!Y)]))q=!0;else if(Y&&($.altKey||$.metaKey||$.ctrlKey)&&!(L.windows&&$.ctrlKey&&$.altKey)&&(H=X9[$.keyCode])&&H!=X){if(j(_[U+L7(H,$,!0)]))q=!0;else if($.shiftKey&&(F=t9[$.keyCode])!=X&&F!=H&&j(_[U+L7(F,$,!1)]))q=!0}else if(Y&&$.shiftKey&&j(_[U+L7(X,$,!0)]))q=!0;if(!q&&j(_._any))q=!0}if(W)q=!0;if(q&&G)$.stopPropagation();return J4=null,q}function iQ(Z){let{win:$}=Z;return{top:0,left:0,bottom:$.innerHeight,right:$.innerWidth}}function D4(Z,$){let J=Z.plugin(r6);if(!J)return null;let Q=J.manager.tooltips.indexOf($);return Q<0?null:J.manager.tooltipViews[Q]}function oQ(Z){let $=[tQ];if(Z&&Z.fixed===!1)$.push(Q4.of(!0));return $}function l0(Z){return Array.isArray(Z)?Z:[Z]}function X4(Z,$,J){while(Z.value&&Z.from<=J){if(Z.from==J)$.push(Z.value);Z.next()}}function eQ(Z,$){if(Z.length!=$.length)return!1;for(let J=0;J<Z.length;J++)if(!Z[J].compare($[J]))return!1;return!0}function vZ(Z,$){return Z.state.facet(Z5).formatNumber($,Z.state)}function t6(Z={}){return[Z5.of(Z),oQ(),JX]}function p0(Z){let $=9;while($<Z)$=$*10+9;return $}class c0{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}eq(Z){return this.anchorNode==Z.anchorNode&&this.anchorOffset==Z.anchorOffset&&this.focusNode==Z.focusNode&&this.focusOffset==Z.focusOffset}setRange(Z){let{anchorNode:$,focusNode:J}=Z;this.set($,Math.min(Z.anchorOffset,$?U9($):0),J,Math.min(Z.focusOffset,J?U9(J):0))}set(Z,$,J,Q){this.anchorNode=Z,this.anchorOffset=$,this.focusNode=J,this.focusOffset=Q}}var e9=null,W0;class q3{constructor(Z,$,J=!0){this.node=Z,this.offset=$,this.precise=J}static before(Z,$){return new q3(Z.parentNode,k9(Z),$)}static after(Z,$){return new q3(Z.parentNode,k9(Z)+1,$)}}var Y4=[];class l{constructor(){this.parent=null,this.dom=null,this.flags=2}get overrideDOMText(){return null}get posAtStart(){return this.parent?this.parent.posBefore(this):0}get posAtEnd(){return this.posAtStart+this.length}posBefore(Z){let $=this.posAtStart;for(let J of this.children){if(J==Z)return $;$+=J.length+J.breakAfter}throw new RangeError("Invalid child in posBefore")}posAfter(Z){return this.posBefore(Z)+Z.length}sync(Z,$){if(this.flags&2){let J=this.dom,Q=null,X;for(let K of this.children){if(K.flags&7){if(!K.dom&&(X=Q?Q.nextSibling:J.firstChild)){let Y=l.get(X);if(!Y||!Y.parent&&Y.canReuseDOM(K))K.reuseDOM(X)}K.sync(Z,$),K.flags&=-8}if(X=Q?Q.nextSibling:J.firstChild,$&&!$.written&&$.node==J&&X!=K.dom)$.written=!0;if(K.dom.parentNode==J)while(X&&X!=K.dom)X=z0(X);else J.insertBefore(K.dom,X);Q=K.dom}if(X=Q?Q.nextSibling:J.firstChild,X&&$&&$.node==J)$.written=!0;while(X)X=z0(X)}else if(this.flags&1){for(let J of this.children)if(J.flags&7)J.sync(Z,$),J.flags&=-8}}reuseDOM(Z){}localPosFromDOM(Z,$){let J;if(Z==this.dom)J=this.dom.childNodes[$];else{let Q=U9(Z)==0?0:$==0?-1:1;for(;;){let X=Z.parentNode;if(X==this.dom)break;if(Q==0&&X.firstChild!=X.lastChild)if(Z==X.firstChild)Q=-1;else Q=1;Z=X}if(Q<0)J=Z;else J=Z.nextSibling}if(J==this.dom.firstChild)return 0;while(J&&!l.get(J))J=J.nextSibling;if(!J)return this.length;for(let Q=0,X=0;;Q++){let K=this.children[Q];if(K.dom==J)return X;X+=K.length+K.breakAfter}}domBoundsAround(Z,$,J=0){let Q=-1,X=-1,K=-1,Y=-1;for(let U=0,q=J,W=J;U<this.children.length;U++){let G=this.children[U],z=q+G.length;if(q<Z&&z>$)return G.domBoundsAround(Z,$,q);if(z>=Z&&Q==-1)Q=U,X=q;if(q>$&&G.dom.parentNode==this.dom){K=U,Y=W;break}W=z,q=z+G.breakAfter}return{from:X,to:Y<0?J+this.length:Y,startDOM:(Q?this.children[Q-1].dom.nextSibling:null)||this.dom.firstChild,endDOM:K<this.children.length&&K>=0?this.children[K].dom:null}}markDirty(Z=!1){this.flags|=2,this.markParentsDirty(Z)}markParentsDirty(Z){for(let $=this.parent;$;$=$.parent){if(Z)$.flags|=2;if($.flags&1)return;$.flags|=1,Z=!1}}setParent(Z){if(this.parent!=Z){if(this.parent=Z,this.flags&7)this.markParentsDirty(!0)}}setDOM(Z){if(this.dom==Z)return;if(this.dom)this.dom.cmView=null;this.dom=Z,Z.cmView=this}get rootView(){for(let Z=this;;){let $=Z.parent;if(!$)return Z;Z=$}}replaceChildren(Z,$,J=Y4){this.markDirty();for(let Q=Z;Q<$;Q++){let X=this.children[Q];if(X.parent==this&&J.indexOf(X)<0)X.destroy()}this.children.splice(Z,$-Z,...J);for(let Q=0;Q<J.length;Q++)J[Q].setParent(this)}ignoreMutation(Z){return!1}ignoreEvent(Z){return!1}childCursor(Z=this.length){return new U4(this.children,Z,this.children.length)}childPos(Z,$=1){return this.childCursor().findPos(Z,$)}toString(){let Z=this.constructor.name.replace("View","");return Z+(this.children.length?"("+this.children.join()+")":this.length?"["+(Z=="Text"?this.text:this.length)+"]":"")+(this.breakAfter?"#":"")}static get(Z){return Z.cmView}get isEditable(){return!0}get isWidget(){return!1}get isHidden(){return!1}merge(Z,$,J,Q,X,K){return!1}become(Z){return!1}canReuseDOM(Z){return Z.constructor==this.constructor&&!((this.flags|Z.flags)&8)}getSide(){return 0}destroy(){for(let Z of this.children)if(Z.parent==this)Z.destroy();this.parent=null}}l.prototype.breakAfter=0;class U4{constructor(Z,$,J){this.children=Z,this.pos=$,this.i=J,this.off=0}findPos(Z,$=1){for(;;){if(Z>this.pos||Z==this.pos&&($>0||this.i==0||this.children[this.i-1].breakAfter))return this.off=Z-this.pos,this;let J=this.children[--this.i];this.pos-=J.length+J.breakAfter}}}var N3=typeof navigator!="undefined"?navigator:{userAgent:"",vendor:"",platform:""},mZ=typeof document!="undefined"?document:{documentElement:{style:{}}},uZ=/Edge\/(\d+)/.exec(N3.userAgent),e0=/MSIE \d/.test(N3.userAgent),fZ=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(N3.userAgent),u7=!!(e0||fZ||uZ),j0=!u7&&/gecko\/(\d+)/i.test(N3.userAgent),yZ=!u7&&/Chrome\/(\d+)/.exec(N3.userAgent),_0="webkitFontSmoothing"in mZ.documentElement.style,Z6=!u7&&/Apple Computer/.test(N3.vendor),O0=Z6&&(/Mobile\/\w+/.test(N3.userAgent)||N3.maxTouchPoints>2),L={mac:O0||/Mac/.test(N3.platform),windows:/Win/.test(N3.platform),linux:/Linux|X11/.test(N3.platform),ie:u7,ie_version:e0?mZ.documentMode||6:fZ?+fZ[1]:uZ?+uZ[1]:0,gecko:j0,gecko_version:j0?+(/Firefox\/(\d+)/.exec(N3.userAgent)||[0,0])[1]:0,chrome:!!yZ,chrome_version:yZ?+yZ[1]:0,ios:O0,android:/Android\b/.test(N3.userAgent),webkit:_0,safari:Z6,webkit_version:_0?+(/\bAppleWebKit\/(\d+)/.exec(N3.userAgent)||[0,0])[1]:0,tabSize:mZ.documentElement.style.tabSize!=null?"tab-size":"-moz-tab-size"},S2=256;class u3 extends l{constructor(Z){super();this.text=Z}get length(){return this.text.length}createDOM(Z){this.setDOM(Z||document.createTextNode(this.text))}sync(Z,$){if(!this.dom)this.createDOM();if(this.dom.nodeValue!=this.text){if($&&$.node==this.dom)$.written=!0;this.dom.nodeValue=this.text}}reuseDOM(Z){if(Z.nodeType==3)this.createDOM(Z)}merge(Z,$,J){if(this.flags&8||J&&(!(J instanceof u3)||this.length-($-Z)+J.length>S2||J.flags&8))return!1;return this.text=this.text.slice(0,Z)+(J?J.text:"")+this.text.slice($),this.markDirty(),!0}split(Z){let $=new u3(this.text.slice(Z));return this.text=this.text.slice(0,Z),this.markDirty(),$.flags|=this.flags&8,$}localPosFromDOM(Z,$){return Z==this.dom?$:$?this.text.length:0}domAtPos(Z){return new q3(this.dom,Z)}domBoundsAround(Z,$,J){return{from:J,to:J+this.length,startDOM:this.dom,endDOM:this.dom.nextSibling}}coordsAt(Z,$){return b2(this.dom,Z,$)}}class q9 extends l{constructor(Z,$=[],J=0){super();this.mark=Z,this.children=$,this.length=J;for(let Q of $)Q.setParent(this)}setAttrs(Z){if(i0(Z),this.mark.class)Z.className=this.mark.class;if(this.mark.attrs)for(let $ in this.mark.attrs)Z.setAttribute($,this.mark.attrs[$]);return Z}canReuseDOM(Z){return super.canReuseDOM(Z)&&!((this.flags|Z.flags)&8)}reuseDOM(Z){if(Z.nodeName==this.mark.tagName.toUpperCase())this.setDOM(Z),this.flags|=6}sync(Z,$){if(!this.dom)this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));else if(this.flags&4)this.setAttrs(this.dom);super.sync(Z,$)}merge(Z,$,J,Q,X,K){if(J&&(!(J instanceof q9&&J.mark.eq(this.mark))||Z&&X<=0||$<this.length&&K<=0))return!1;return t0(this,Z,$,J?J.children.slice():[],X-1,K-1),this.markDirty(),!0}split(Z){let $=[],J=0,Q=-1,X=0;for(let Y of this.children){let U=J+Y.length;if(U>Z)$.push(J<Z?Y.split(Z-J):Y);if(Q<0&&J>=Z)Q=X;J=U,X++}let K=this.length-Z;if(this.length=Z,Q>-1)this.children.length=Q,this.markDirty();return new q9(this.mark,$,K)}domAtPos(Z){return $6(this,Z)}coordsAt(Z,$){return Q6(this,Z,$)}}class b9 extends l{static create(Z,$,J){return new b9(Z,$,J)}constructor(Z,$,J){super();this.widget=Z,this.length=$,this.side=J,this.prevWidget=null}split(Z){let $=b9.create(this.widget,this.length-Z,this.side);return this.length-=Z,$}sync(Z){if(!this.dom||!this.widget.updateDOM(this.dom,Z)){if(this.dom&&this.prevWidget)this.prevWidget.destroy(this.dom);if(this.prevWidget=null,this.setDOM(this.widget.toDOM(Z)),!this.widget.editable)this.dom.contentEditable="false"}}getSide(){return this.side}merge(Z,$,J,Q,X,K){if(J&&(!(J instanceof b9)||!this.widget.compare(J.widget)||Z>0&&X<=0||$<this.length&&K<=0))return!1;return this.length=Z+(J?J.length:0)+(this.length-$),!0}become(Z){if(Z instanceof b9&&Z.side==this.side&&this.widget.constructor==Z.widget.constructor){if(!this.widget.compare(Z.widget))this.markDirty(!0);if(this.dom&&!this.prevWidget)this.prevWidget=this.widget;return this.widget=Z.widget,this.length=Z.length,!0}return!1}ignoreMutation(){return!0}ignoreEvent(Z){return this.widget.ignoreEvent(Z)}get overrideDOMText(){if(this.length==0)return b.empty;let Z=this;while(Z.parent)Z=Z.parent;let{view:$}=Z,J=$&&$.state.doc,Q=this.posAtStart;return J?J.slice(Q,Q+this.length):b.empty}domAtPos(Z){return(this.length?Z==0:this.side>0)?q3.before(this.dom):q3.after(this.dom,Z==this.length)}domBoundsAround(){return null}coordsAt(Z,$){let J=this.widget.coordsAt(this.dom,Z,$);if(J)return J;let Q=this.dom.getClientRects(),X=null;if(!Q.length)return null;let K=this.side?this.side<0:Z>0;for(let Y=K?Q.length-1:0;;Y+=K?-1:1)if(X=Q[Y],Z>0?Y==0:Y==Q.length-1||X.top<X.bottom)break;return m7(X,!K)}get isEditable(){return!1}get isWidget(){return!0}get isHidden(){return this.widget.isHidden}destroy(){if(super.destroy(),this.dom)this.widget.destroy(this.dom)}}class Q5 extends l{constructor(Z){super();this.side=Z}get length(){return 0}merge(){return!1}become(Z){return Z instanceof Q5&&Z.side==this.side}split(){return new Q5(this.side)}sync(){if(!this.dom){let Z=document.createElement("img");Z.className="cm-widgetBuffer",Z.setAttribute("aria-hidden","true"),this.setDOM(Z)}}getSide(){return this.side}domAtPos(Z){return this.side>0?q3.before(this.dom):q3.after(this.dom)}localPosFromDOM(){return 0}domBoundsAround(){return null}coordsAt(Z){return this.dom.getBoundingClientRect()}get overrideDOMText(){return b.empty}get isHidden(){return!0}}u3.prototype.children=b9.prototype.children=Q5.prototype.children=Y4;var H0=Object.create(null);class h9{eq(Z){return!1}updateDOM(Z,$){return!1}compare(Z){return this==Z||this.constructor==Z.constructor&&this.eq(Z)}get estimatedHeight(){return-1}get lineBreaks(){return 0}ignoreEvent(Z){return!0}coordsAt(Z,$,J){return null}get isHidden(){return!1}get editable(){return!1}destroy(Z){}}var T3=function(Z){return Z[Z.Text=0]="Text",Z[Z.WidgetBefore=1]="WidgetBefore",Z[Z.WidgetAfter=2]="WidgetAfter",Z[Z.WidgetRange=3]="WidgetRange",Z}(T3||(T3={}));class c extends s3{constructor(Z,$,J,Q){super();this.startSide=Z,this.endSide=$,this.widget=J,this.spec=Q}get heightRelevant(){return!1}static mark(Z){return new h5(Z)}static widget(Z){let $=Math.max(-1e4,Math.min(1e4,Z.side||0)),J=!!Z.block;return $+=J&&!Z.inlineOrder?$>0?300000000:-400000000:$>0?1e8:-1e8,new F9(Z,$,$,J,Z.widget||null,!1)}static replace(Z){let $=!!Z.block,J,Q;if(Z.isBlockGap)J=-500000000,Q=400000000;else{let{start:X,end:K}=X6(Z,$);J=(X?$?-300000000:-1:500000000)-1,Q=(K?$?200000000:1:-600000000)+1}return new F9(Z,J,Q,$,Z.widget||null,!0)}static line(Z){return new m5(Z)}static set(Z,$=!1){return w.of(Z,$)}hasHeight(){return this.widget?this.widget.estimatedHeight>-1:!1}}c.none=w.empty;class h5 extends c{constructor(Z){let{start:$,end:J}=X6(Z);super($?-1:500000000,J?1:-600000000,null,Z);this.tagName=Z.tagName||"span",this.class=Z.class||"",this.attrs=Z.attributes||null}eq(Z){var $,J;return this==Z||Z instanceof h5&&this.tagName==Z.tagName&&(this.class||(($=this.attrs)===null||$===void 0?void 0:$.class))==(Z.class||((J=Z.attrs)===null||J===void 0?void 0:J.class))&&k7(this.attrs,Z.attrs,"class")}range(Z,$=Z){if(Z>=$)throw new RangeError("Mark decorations may not be empty");return super.range(Z,$)}}h5.prototype.point=!1;class m5 extends c{constructor(Z){super(-200000000,-200000000,null,Z)}eq(Z){return Z instanceof m5&&this.spec.class==Z.spec.class&&k7(this.spec.attributes,Z.spec.attributes)}range(Z,$=Z){if($!=Z)throw new RangeError("Line decoration ranges must be zero-length");return super.range(Z,$)}}m5.prototype.mapMode=J3.TrackBefore;m5.prototype.point=!0;class F9 extends c{constructor(Z,$,J,Q,X,K){super($,J,X,Z);this.block=Q,this.isReplace=K,this.mapMode=!Q?J3.TrackDel:$<=0?J3.TrackBefore:J3.TrackAfter}get type(){return this.startSide!=this.endSide?T3.WidgetRange:this.startSide<=0?T3.WidgetBefore:T3.WidgetAfter}get heightRelevant(){return this.block||!!this.widget&&(this.widget.estimatedHeight>=5||this.widget.lineBreaks>0)}eq(Z){return Z instanceof F9&&w2(this.widget,Z.widget)&&this.block==Z.block&&this.startSide==Z.startSide&&this.endSide==Z.endSide}range(Z,$=Z){if(this.isReplace&&(Z>$||Z==$&&this.startSide>0&&this.endSide<=0))throw new RangeError("Invalid range for replacement decoration");if(!this.isReplace&&$!=Z)throw new RangeError("Widget decorations can only have zero-length ranges");return super.range(Z,$)}}F9.prototype.point=!0;class $3 extends l{constructor(){super(...arguments);this.children=[],this.length=0,this.prevAttrs=void 0,this.attrs=null,this.breakAfter=0}merge(Z,$,J,Q,X,K){if(J){if(!(J instanceof $3))return!1;if(!this.dom)J.transferDOM(this)}if(Q)this.setDeco(J?J.attrs:null);return t0(this,Z,$,J?J.children.slice():[],X,K),!0}split(Z){let $=new $3;if($.breakAfter=this.breakAfter,this.length==0)return $;let{i:J,off:Q}=this.childPos(Z);if(Q)$.append(this.children[J].split(Q),0),this.children[J].merge(Q,this.children[J].length,null,!1,0,0),J++;for(let X=J;X<this.children.length;X++)$.append(this.children[X],0);while(J>0&&this.children[J-1].length==0)this.children[--J].destroy();return this.children.length=J,this.markDirty(),this.length=Z,$}transferDOM(Z){if(!this.dom)return;this.markDirty(),Z.setDOM(this.dom),Z.prevAttrs=this.prevAttrs===void 0?this.attrs:this.prevAttrs,this.prevAttrs=void 0,this.dom=null}setDeco(Z){if(!k7(this.attrs,Z)){if(this.dom)this.prevAttrs=this.attrs,this.markDirty();this.attrs=Z}}append(Z,$){J6(this,Z,$)}addLineDeco(Z){let $=Z.spec.attributes,J=Z.spec.class;if($)this.attrs=gZ($,this.attrs||{});if(J)this.attrs=gZ({class:J},this.attrs||{})}domAtPos(Z){return $6(this,Z)}reuseDOM(Z){if(Z.nodeName=="DIV")this.setDOM(Z),this.flags|=6}sync(Z,$){var J;if(!this.dom)this.setDOM(document.createElement("div")),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0;else if(this.flags&4)i0(this.dom),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0;if(this.prevAttrs!==void 0)lZ(this.dom,this.prevAttrs,this.attrs),this.dom.classList.add("cm-line"),this.prevAttrs=void 0;super.sync(Z,$);let Q=this.dom.lastChild;while(Q&&l.get(Q)instanceof q9)Q=Q.lastChild;if(!Q||!this.length||Q.nodeName!="BR"&&((J=l.get(Q))===null||J===void 0?void 0:J.isEditable)==!1&&(!L.ios||!this.children.some((X)=>X instanceof u3))){let X=document.createElement("BR");X.cmIgnore=!0,this.dom.appendChild(X)}}measureTextSize(){if(this.children.length==0||this.length>20)return null;let Z=0,$;for(let J of this.children){if(!(J instanceof u3)||/[^ -~]/.test(J.text))return null;let Q=w5(J.dom);if(Q.length!=1)return null;Z+=Q[0].width,$=Q[0].height}return!Z?null:{lineHeight:this.dom.getBoundingClientRect().height,charWidth:Z/this.length,textHeight:$}}coordsAt(Z,$){let J=Q6(this,Z,$);if(!this.children.length&&J&&this.parent){let{heightOracle:Q}=this.parent.view.viewState,X=J.bottom-J.top;if(Math.abs(X-Q.lineHeight)<2&&Q.textHeight<X){let K=(X-Q.textHeight)/2;return{top:J.top+K,bottom:J.bottom-K,left:J.left,right:J.left}}}return J}become(Z){return Z instanceof $3&&this.children.length==0&&Z.children.length==0&&k7(this.attrs,Z.attrs)&&this.breakAfter==Z.breakAfter}covers(){return!0}static find(Z,$){for(let J=0,Q=0;J<Z.children.length;J++){let X=Z.children[J],K=Q+X.length;if(K>=$){if(X instanceof $3)return X;if(K>$)break}Q=K+X.breakAfter}return null}}class Y9 extends l{constructor(Z,$,J){super();this.widget=Z,this.length=$,this.deco=J,this.breakAfter=0,this.prevWidget=null}merge(Z,$,J,Q,X,K){if(J&&(!(J instanceof Y9)||!this.widget.compare(J.widget)||Z>0&&X<=0||$<this.length&&K<=0))return!1;return this.length=Z+(J?J.length:0)+(this.length-$),!0}domAtPos(Z){return Z==0?q3.before(this.dom):q3.after(this.dom,Z==this.length)}split(Z){let $=this.length-Z;this.length=Z;let J=new Y9(this.widget,$,this.deco);return J.breakAfter=this.breakAfter,J}get children(){return Y4}sync(Z){if(!this.dom||!this.widget.updateDOM(this.dom,Z)){if(this.dom&&this.prevWidget)this.prevWidget.destroy(this.dom);if(this.prevWidget=null,this.setDOM(this.widget.toDOM(Z)),!this.widget.editable)this.dom.contentEditable="false"}}get overrideDOMText(){return this.parent?this.parent.view.state.doc.slice(this.posAtStart,this.posAtEnd):b.empty}domBoundsAround(){return null}become(Z){if(Z instanceof Y9&&Z.widget.constructor==this.widget.constructor){if(!Z.widget.compare(this.widget))this.markDirty(!0);if(this.dom&&!this.prevWidget)this.prevWidget=this.widget;return this.widget=Z.widget,this.length=Z.length,this.deco=Z.deco,this.breakAfter=Z.breakAfter,!0}return!1}ignoreMutation(){return!0}ignoreEvent(Z){return this.widget.ignoreEvent(Z)}get isEditable(){return!1}get isWidget(){return!0}coordsAt(Z,$){let J=this.widget.coordsAt(this.dom,Z,$);if(J)return J;if(this.widget instanceof x7)return null;return m7(this.dom.getBoundingClientRect(),this.length?Z==0:$<=0)}destroy(){if(super.destroy(),this.dom)this.widget.destroy(this.dom)}covers(Z){let{startSide:$,endSide:J}=this.deco;return $==J?!1:Z<0?$<0:J>0}}class x7 extends h9{constructor(Z){super();this.height=Z}toDOM(){let Z=document.createElement("div");return Z.className="cm-gap",this.updateDOM(Z),Z}eq(Z){return Z.height==this.height}updateDOM(Z){return Z.style.height=this.height+"px",!0}get editable(){return!0}get estimatedHeight(){return this.height}ignoreEvent(){return!1}}class k5{constructor(Z,$,J,Q){this.doc=Z,this.pos=$,this.end=J,this.disallowBlockEffectsFor=Q,this.content=[],this.curLine=null,this.breakAtStart=0,this.pendingBuffer=0,this.bufferMarks=[],this.atCursorPos=!0,this.openStart=-1,this.openEnd=-1,this.text="",this.textOff=0,this.cursor=Z.iter(),this.skip=$}posCovered(){if(this.content.length==0)return!this.breakAtStart&&this.doc.lineAt(this.pos).from!=this.pos;let Z=this.content[this.content.length-1];return!(Z.breakAfter||Z instanceof Y9&&Z.deco.endSide<0)}getLine(){if(!this.curLine)this.content.push(this.curLine=new $3),this.atCursorPos=!0;return this.curLine}flushBuffer(Z=this.bufferMarks){if(this.pendingBuffer)this.curLine.append(N7(new Q5(-1),Z),Z.length),this.pendingBuffer=0}addBlockWidget(Z){this.flushBuffer(),this.curLine=null,this.content.push(Z)}finish(Z){if(this.pendingBuffer&&Z<=this.bufferMarks.length)this.flushBuffer();else this.pendingBuffer=0;if(!this.posCovered()&&!(Z&&this.content.length&&this.content[this.content.length-1]instanceof Y9))this.getLine()}buildText(Z,$,J){while(Z>0){if(this.textOff==this.text.length){let{value:X,lineBreak:K,done:Y}=this.cursor.next(this.skip);if(this.skip=0,Y)throw new Error("Ran out of text content when drawing inline views");if(K){if(!this.posCovered())this.getLine();if(this.content.length)this.content[this.content.length-1].breakAfter=1;else this.breakAtStart=1;this.flushBuffer(),this.curLine=null,this.atCursorPos=!0,Z--;continue}else this.text=X,this.textOff=0}let Q=Math.min(this.text.length-this.textOff,Z,512);this.flushBuffer($.slice($.length-J)),this.getLine().append(N7(new u3(this.text.slice(this.textOff,this.textOff+Q)),$),J),this.atCursorPos=!0,this.textOff+=Q,Z-=Q,J=0}}span(Z,$,J,Q){if(this.buildText($-Z,J,Q),this.pos=$,this.openStart<0)this.openStart=Q}point(Z,$,J,Q,X,K){if(this.disallowBlockEffectsFor[K]&&J instanceof F9){if(J.block)throw new RangeError("Block decorations may not be specified via plugins");if($>this.doc.lineAt(this.pos).to)throw new RangeError("Decorations that replace line breaks may not be specified via plugins")}let Y=$-Z;if(J instanceof F9)if(J.block){if(J.startSide>0&&!this.posCovered())this.getLine();this.addBlockWidget(new Y9(J.widget||w9.block,Y,J))}else{let U=b9.create(J.widget||w9.inline,Y,Y?0:J.startSide),q=this.atCursorPos&&!U.isEditable&&X<=Q.length&&(Z<$||J.startSide>0),W=!U.isEditable&&(Z<$||X>Q.length||J.startSide<=0),G=this.getLine();if(this.pendingBuffer==2&&!q&&!U.isEditable)this.pendingBuffer=0;if(this.flushBuffer(Q),q)G.append(N7(new Q5(1),Q),X),X=Q.length+Math.max(0,X-Q.length);if(G.append(N7(U,Q),X),this.atCursorPos=W,this.pendingBuffer=!W?0:Z<$||X>Q.length?1:2,this.pendingBuffer)this.bufferMarks=Q.slice()}else if(this.doc.lineAt(this.pos).from==this.pos)this.getLine().addLineDeco(J);if(Y){if(this.textOff+Y<=this.text.length)this.textOff+=Y;else this.skip+=Y-(this.text.length-this.textOff),this.text="",this.textOff=0;this.pos=$}if(this.openStart<0)this.openStart=X}static build(Z,$,J,Q,X){let K=new k5(Z,$,J,X);if(K.openEnd=w.spans(Q,$,J,K),K.openStart<0)K.openStart=K.openEnd;return K.finish(K.openEnd),K}}class w9 extends h9{constructor(Z){super();this.tag=Z}eq(Z){return Z.tag==this.tag}toDOM(){return document.createElement(this.tag)}updateDOM(Z){return Z.nodeName.toLowerCase()==this.tag}get isHidden(){return!0}}w9.inline=new w9("span");w9.block=new w9("div");var i=function(Z){return Z[Z.LTR=0]="LTR",Z[Z.RTL=1]="RTL",Z}(i||(i={})),v9=i.LTR,q4=i.RTL,v2=K6("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"),h2=K6("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"),dZ=Object.create(null),i3=[];for(let Z of["()","[]","{}"]){let $=Z.charCodeAt(0),J=Z.charCodeAt(1);dZ[$]=J,dZ[J]=-$}var m2=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;class K9{get dir(){return this.level%2?q4:v9}constructor(Z,$,J){this.from=Z,this.to=$,this.level=J}side(Z,$){return this.dir==$==Z?this.to:this.from}forward(Z,$){return Z==(this.dir==$)}static find(Z,$,J,Q){let X=-1;for(let K=0;K<Z.length;K++){let Y=Z[K];if(Y.from<=$&&Y.to>=$){if(Y.level==J)return K;if(X<0||(Q!=0?Q<0?Y.from<$:Y.to>$:Z[X].level>Y.level))X=K}}if(X<0)throw new RangeError("Index out of range");return X}}var g=[],G6="",W6=B.define(),z6=B.define(),j6=B.define(),_6=B.define(),iZ=B.define(),O6=B.define(),H6=B.define(),G4=B.define(),W4=B.define(),F6=B.define({combine:(Z)=>Z.some(($)=>$)}),c2=B.define({combine:(Z)=>Z.some(($)=>$)}),N6=B.define();class J5{constructor(Z,$="nearest",J="nearest",Q=5,X=5,K=!1){this.range=Z,this.y=$,this.x=J,this.yMargin=Q,this.xMargin=X,this.isSnapshot=K}map(Z){return Z.empty?this:new J5(this.range.map(Z),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}clip(Z){return this.range.to<=Z.doc.length?this:new J5(R.cursor(Z.doc.length),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}}var D7=v.define({map:(Z,$)=>Z.map($)}),D6=v.define(),O9=B.define({combine:(Z)=>Z.length?Z[0]:!0}),s2=0,P5=B.define();class S3{constructor(Z,$,J,Q,X){this.id=Z,this.create=$,this.domEventHandlers=J,this.domEventObservers=Q,this.extension=X(this)}static define(Z,$){const{eventHandlers:J,eventObservers:Q,provide:X,decorations:K}=$||{};return new S3(s2++,Z,J,Q,(Y)=>{let U=[P5.of(Y)];if(K)U.push(v5.of((q)=>{let W=q.plugin(Y);return W?K(W):c.none}));if(X)U.push(X(Y));return U})}static fromClass(Z,$){return S3.define((J)=>new Z(J),$)}}class E7{constructor(Z){this.spec=Z,this.mustUpdate=null,this.value=null}update(Z){if(!this.value){if(this.spec)try{this.value=this.spec.create(Z)}catch($){z3(Z.state,$,"CodeMirror plugin crashed"),this.deactivate()}}else if(this.mustUpdate){let $=this.mustUpdate;if(this.mustUpdate=null,this.value.update)try{this.value.update($)}catch(J){if(z3($.state,J,"CodeMirror plugin crashed"),this.value.destroy)try{this.value.destroy()}catch(Q){}this.deactivate()}}return this}destroy(Z){var $;if(($=this.value)===null||$===void 0?void 0:$.destroy)try{this.value.destroy()}catch(J){z3(Z.state,J,"CodeMirror plugin crashed")}}deactivate(){this.spec=this.value=null}}var R6=B.define(),z4=B.define(),v5=B.define(),V6=B.define(),j4=B.define(),I6=B.define(),M6=B.define(),C5=B.define();class y3{constructor(Z,$,J,Q){this.fromA=Z,this.toA=$,this.fromB=J,this.toB=Q}join(Z){return new y3(Math.min(this.fromA,Z.fromA),Math.max(this.toA,Z.toA),Math.min(this.fromB,Z.fromB),Math.max(this.toB,Z.toB))}addToSet(Z){let $=Z.length,J=this;for(;$>0;$--){let Q=Z[$-1];if(Q.fromA>J.toA)continue;if(Q.toA<J.fromA)break;J=J.join(Q),Z.splice($-1,1)}return Z.splice($,0,J),Z}static extendWithRanges(Z,$){if($.length==0)return Z;let J=[];for(let Q=0,X=0,K=0,Y=0;;Q++){let U=Q==Z.length?null:Z[Q],q=K-Y,W=U?U.fromB:1e9;while(X<$.length&&$[X]<W){let G=$[X],z=$[X+1],j=Math.max(Y,G),_=Math.min(W,z);if(j<=_)new y3(j+q,_+q,j,_).addToSet(J);if(z>W)break;else X+=2}if(!U)return J;new y3(U.fromA,U.toA,U.fromB,U.toB).addToSet(J),K=U.toA,Y=U.toB}}}class w7{constructor(Z,$,J){this.view=Z,this.state=$,this.transactions=J,this.flags=0,this.startState=Z.state,this.changes=e.empty(this.startState.doc.length);for(let X of J)this.changes=this.changes.compose(X.changes);let Q=[];this.changes.iterChangedRanges((X,K,Y,U)=>Q.push(new y3(X,K,Y,U))),this.changedRanges=Q}static create(Z,$,J){return new w7(Z,$,J)}get viewportChanged(){return(this.flags&4)>0}get heightChanged(){return(this.flags&2)>0}get geometryChanged(){return this.docChanged||(this.flags&10)>0}get focusChanged(){return(this.flags&1)>0}get docChanged(){return!this.changes.empty}get selectionSet(){return this.transactions.some((Z)=>Z.selection)}get empty(){return this.flags==0&&this.transactions.length==0}}class nZ extends l{get length(){return this.view.state.doc.length}constructor(Z){super();this.view=Z,this.decorations=[],this.dynamicDecorationMap=[!1],this.domChanged=null,this.hasComposition=null,this.markedForComposition=new Set,this.editContextFormatting=c.none,this.lastCompositionAfterCursor=!1,this.minWidth=0,this.minWidthFrom=0,this.minWidthTo=0,this.impreciseAnchor=null,this.impreciseHead=null,this.forceSelection=!1,this.lastUpdate=Date.now(),this.setDOM(Z.contentDOM),this.children=[new $3],this.children[0].setParent(this),this.updateDeco(),this.updateInner([new y3(0,0,0,Z.state.doc.length)],0,null)}update(Z){var $;let J=Z.changedRanges;if(this.minWidth>0&&J.length)if(!J.every(({fromA:q,toA:W})=>W<this.minWidthFrom||q>this.minWidthTo))this.minWidth=this.minWidthFrom=this.minWidthTo=0;else this.minWidthFrom=Z.changes.mapPos(this.minWidthFrom,1),this.minWidthTo=Z.changes.mapPos(this.minWidthTo,1);this.updateEditContextFormatting(Z);let Q=-1;if(this.view.inputState.composing>=0&&!this.view.observer.editContext){if(($=this.domChanged)===null||$===void 0?void 0:$.newSel)Q=this.domChanged.newSel.head;else if(!e2(Z.changes,this.hasComposition)&&!Z.selectionSet)Q=Z.state.selection.main.head}let X=Q>-1?n2(this.view,Z.changes,Q):null;if(this.domChanged=null,this.hasComposition){this.markedForComposition.clear();let{from:q,to:W}=this.hasComposition;J=new y3(q,W,Z.changes.mapPos(q,-1),Z.changes.mapPos(W,1)).addToSet(J.slice())}if(this.hasComposition=X?{from:X.range.fromB,to:X.range.toB}:null,(L.ie||L.chrome)&&!X&&Z&&Z.state.doc.lines!=Z.startState.doc.lines)this.forceSelection=!0;let K=this.decorations,Y=this.updateDeco(),U=o2(K,Y,Z.changes);if(J=y3.extendWithRanges(J,U),!(this.flags&7)&&J.length==0)return!1;else{if(this.updateInner(J,Z.startState.doc.length,X),Z.transactions.length)this.lastUpdate=Date.now();return!0}}updateInner(Z,$,J){this.view.viewState.mustMeasureContent=!0,this.updateChildren(Z,$,J);let{observer:Q}=this.view;Q.ignore(()=>{this.dom.style.height=this.view.viewState.contentHeight/this.view.scaleY+"px",this.dom.style.flexBasis=this.minWidth?this.minWidth+"px":"";let K=L.chrome||L.ios?{node:Q.selectionRange.focusNode,written:!1}:void 0;if(this.sync(this.view,K),this.flags&=-8,K&&(K.written||Q.selectionRange.focusNode!=K.node))this.forceSelection=!0;this.dom.style.height=""}),this.markedForComposition.forEach((K)=>K.flags&=-9);let X=[];if(this.view.viewport.from||this.view.viewport.to<this.view.state.doc.length){for(let K of this.children)if(K instanceof Y9&&K.widget instanceof x7)X.push(K.dom)}Q.updateGaps(X)}updateChildren(Z,$,J){let Q=J?J.range.addToSet(Z.slice()):Z,X=this.childCursor($);for(let K=Q.length-1;;K--){let Y=K>=0?Q[K]:null;if(!Y)break;let{fromA:U,toA:q,fromB:W,toB:G}=Y,z,j,_,H;if(J&&J.range.fromB<G&&J.range.toB>W){let V=k5.build(this.view.state.doc,W,J.range.fromB,this.decorations,this.dynamicDecorationMap),I=k5.build(this.view.state.doc,J.range.toB,G,this.decorations,this.dynamicDecorationMap);j=V.breakAtStart,_=V.openStart,H=I.openEnd;let C=this.compositionView(J);if(I.breakAtStart)C.breakAfter=1;else if(I.content.length&&C.merge(C.length,C.length,I.content[0],!1,I.openStart,0))C.breakAfter=I.content[0].breakAfter,I.content.shift();if(V.content.length&&C.merge(0,0,V.content[V.content.length-1],!0,0,V.openEnd))V.content.pop();z=V.content.concat(C).concat(I.content)}else({content:z,breakAtStart:j,openStart:_,openEnd:H}=k5.build(this.view.state.doc,W,G,this.decorations,this.dynamicDecorationMap));let{i:F,off:N}=X.findPos(q,1),{i:D,off:M}=X.findPos(U,-1);o0(this,D,M,F,N,z,j,_,H)}if(J)this.fixCompositionDOM(J)}updateEditContextFormatting(Z){this.editContextFormatting=this.editContextFormatting.map(Z.changes);for(let $ of Z.transactions)for(let J of $.effects)if(J.is(D6))this.editContextFormatting=J.value}compositionView(Z){let $=new u3(Z.text.nodeValue);$.flags|=8;for(let{deco:Q}of Z.marks)$=new q9(Q,[$],$.length);let J=new $3;return J.append($,0),J}fixCompositionDOM(Z){let $=(X,K)=>{K.flags|=8|(K.children.some((U)=>U.flags&7)?1:0),this.markedForComposition.add(K);let Y=l.get(X);if(Y&&Y!=K)Y.dom=null;K.setDOM(X)},J=this.childPos(Z.range.fromB,1),Q=this.children[J.i];$(Z.line,Q);for(let X=Z.marks.length-1;X>=-1;X--)J=Q.childPos(J.off,1),Q=Q.children[J.i],$(X>=0?Z.marks[X].node:Z.text,Q)}updateSelection(Z=!1,$=!1){if(Z||!this.view.observer.selectionRange.focusNode)this.view.observer.readSelectionRange();let J=this.view.root.activeElement,Q=J==this.dom,X=!Q&&B7(this.dom,this.view.observer.selectionRange)&&!(J&&this.dom.contains(J));if(!(Q||$||X))return;let K=this.forceSelection;this.forceSelection=!1;let Y=this.view.state.selection.main,U=this.moveToLine(this.domAtPos(Y.anchor)),q=Y.empty?U:this.moveToLine(this.domAtPos(Y.head));if(L.gecko&&Y.empty&&!this.hasComposition&&i2(U)){let G=document.createTextNode("");this.view.observer.ignore(()=>U.node.insertBefore(G,U.node.childNodes[U.offset]||null)),U=q=new q3(G,0),K=!0}let W=this.view.observer.selectionRange;if(K||!W.focusNode||(!b5(U.node,U.offset,W.anchorNode,W.anchorOffset)||!b5(q.node,q.offset,W.focusNode,W.focusOffset))&&!this.suppressWidgetCursorChange(W,Y))this.view.observer.ignore(()=>{if(L.android&&L.chrome&&this.dom.contains(W.focusNode)&&t2(W.focusNode,this.dom))this.dom.blur(),this.dom.focus({preventScroll:!0});let G=x5(this.view.root);if(!G);else if(Y.empty){if(L.gecko){let z=a2(U.node,U.offset);if(z&&z!=3){let j=(z==1?a0:r0)(U.node,U.offset);if(j)U=new q3(j.node,j.offset)}}if(G.collapse(U.node,U.offset),Y.bidiLevel!=null&&G.caretBidiLevel!==void 0)G.caretBidiLevel=Y.bidiLevel}else if(G.extend){G.collapse(U.node,U.offset);try{G.extend(q.node,q.offset)}catch(z){}}else{let z=document.createRange();if(Y.anchor>Y.head)[U,q]=[q,U];z.setEnd(q.node,q.offset),z.setStart(U.node,U.offset),G.removeAllRanges(),G.addRange(z)}if(X&&this.view.root.activeElement==this.dom){if(this.dom.blur(),J)J.focus()}}),this.view.observer.setSelectionRange(U,q);this.impreciseAnchor=U.precise?null:new q3(W.anchorNode,W.anchorOffset),this.impreciseHead=q.precise?null:new q3(W.focusNode,W.focusOffset)}suppressWidgetCursorChange(Z,$){return this.hasComposition&&$.empty&&b5(Z.focusNode,Z.focusOffset,Z.anchorNode,Z.anchorOffset)&&this.posFromDOM(Z.focusNode,Z.focusOffset)==$.head}enforceCursorAssoc(){if(this.hasComposition)return;let{view:Z}=this,$=Z.state.selection.main,J=x5(Z.root),{anchorNode:Q,anchorOffset:X}=Z.observer.selectionRange;if(!J||!$.empty||!$.assoc||!J.modify)return;let K=$3.find(this,$.head);if(!K)return;let Y=K.posAtStart;if($.head==Y||$.head==Y+K.length)return;let U=this.coordsAt($.head,-1),q=this.coordsAt($.head,1);if(!U||!q||U.bottom>q.top)return;let W=this.domAtPos($.head+$.assoc);J.collapse(W.node,W.offset),J.modify("move",$.assoc<0?"forward":"backward","lineboundary"),Z.observer.readSelectionRange();let G=Z.observer.selectionRange;if(Z.docView.posFromDOM(G.anchorNode,G.anchorOffset)!=$.from)J.collapse(Q,X)}moveToLine(Z){let $=this.dom,J;if(Z.node!=$)return Z;for(let Q=Z.offset;!J&&Q<$.childNodes.length;Q++){let X=l.get($.childNodes[Q]);if(X instanceof $3)J=X.domAtPos(0)}for(let Q=Z.offset-1;!J&&Q>=0;Q--){let X=l.get($.childNodes[Q]);if(X instanceof $3)J=X.domAtPos(X.length)}return J?new q3(J.node,J.offset,!0):Z}nearest(Z){for(let $=Z;$;){let J=l.get($);if(J&&J.rootView==this)return J;$=$.parentNode}return null}posFromDOM(Z,$){let J=this.nearest(Z);if(!J)throw new RangeError("Trying to find position for a DOM position outside of the document");return J.localPosFromDOM(Z,$)+J.posAtStart}domAtPos(Z){let{i:$,off:J}=this.childCursor().findPos(Z,-1);for(;$<this.children.length-1;){let Q=this.children[$];if(J<Q.length||Q instanceof $3)break;$++,J=0}return this.children[$].domAtPos(J)}coordsAt(Z,$){let J=null,Q=0;for(let X=this.length,K=this.children.length-1;K>=0;K--){let Y=this.children[K],U=X-Y.breakAfter,q=U-Y.length;if(U<Z)break;if(q<=Z&&(q<Z||Y.covers(-1))&&(U>Z||Y.covers(1))&&(!J||Y instanceof $3&&!(J instanceof $3&&$>=0)))J=Y,Q=q;else if(J&&q==Z&&U==Z&&Y instanceof Y9&&Math.abs($)<2){if(Y.deco.startSide<0)break;else if(K)J=null}X=q}return J?J.coordsAt(Z-Q,$):null}coordsForChar(Z){let{i:$,off:J}=this.childPos(Z,1),Q=this.children[$];if(!(Q instanceof $3))return null;while(Q.children.length){let{i:Y,off:U}=Q.childPos(J,1);for(;;Y++){if(Y==Q.children.length)return null;if((Q=Q.children[Y]).length)break}J=U}if(!(Q instanceof u3))return null;let X=Q3(Q.text,J);if(X==J)return null;let K=x9(Q.dom,J,X).getClientRects();for(let Y=0;Y<K.length;Y++){let U=K[Y];if(Y==K.length-1||U.top<U.bottom&&U.left<U.right)return U}return null}measureVisibleLineHeights(Z){let $=[],{from:J,to:Q}=Z,X=this.view.contentDOM.clientWidth,K=X>Math.max(this.view.scrollDOM.clientWidth,this.minWidth)+1,Y=-1,U=this.view.textDirection==i.LTR;for(let q=0,W=0;W<this.children.length;W++){let G=this.children[W],z=q+G.length;if(z>Q)break;if(q>=J){let j=G.dom.getBoundingClientRect();if($.push(j.height),K){let _=G.dom.lastChild,H=_?w5(_):[];if(H.length){let F=H[H.length-1],N=U?F.right-j.left:j.right-F.left;if(N>Y)Y=N,this.minWidth=X,this.minWidthFrom=q,this.minWidthTo=z}}}q=z+G.breakAfter}return $}textDirectionAt(Z){let{i:$}=this.childPos(Z,1);return getComputedStyle(this.children[$].dom).direction=="rtl"?i.RTL:i.LTR}measureTextSize(){for(let X of this.children)if(X instanceof $3){let K=X.measureTextSize();if(K)return K}let Z=document.createElement("div"),$,J,Q;return Z.className="cm-line",Z.style.width="99999px",Z.style.position="absolute",Z.textContent="abc def ghi jkl mno pqr stu",this.view.observer.ignore(()=>{this.dom.appendChild(Z);let X=w5(Z.firstChild)[0];$=Z.getBoundingClientRect().height,J=X?X.width/27:7,Q=X?X.height:$,Z.remove()}),{lineHeight:$,charWidth:J,textHeight:Q}}childCursor(Z=this.length){let $=this.children.length;if($)Z-=this.children[--$].length;return new U4(this.children,Z,$)}computeBlockGapDeco(){let Z=[],$=this.view.viewState;for(let J=0,Q=0;;Q++){let X=Q==$.viewports.length?null:$.viewports[Q],K=X?X.from-1:this.length;if(K>J){let Y=($.lineBlockAt(K).bottom-$.lineBlockAt(J).top)/this.view.scaleY;Z.push(c.replace({widget:new x7(Y),block:!0,inclusive:!0,isBlockGap:!0}).range(J,K))}if(!X)break;J=X.to+1}return c.set(Z)}updateDeco(){let Z=1,$=this.view.state.facet(v5).map((X)=>{return(this.dynamicDecorationMap[Z++]=typeof X=="function")?X(this.view):X}),J=!1,Q=this.view.state.facet(V6).map((X,K)=>{let Y=typeof X=="function";if(Y)J=!0;return Y?X(this.view):X});if(Q.length)this.dynamicDecorationMap[Z++]=J,$.push(w.join(Q));this.decorations=[this.editContextFormatting,...$,this.computeBlockGapDeco(),this.view.viewState.lineGapDeco];while(Z<this.decorations.length)this.dynamicDecorationMap[Z++]=!1;return this.decorations}scrollIntoView(Z){if(Z.isSnapshot){let q=this.view.viewState.lineBlockAt(Z.range.head);this.view.scrollDOM.scrollTop=q.top-Z.yMargin,this.view.scrollDOM.scrollLeft=Z.xMargin;return}for(let q of this.view.state.facet(N6))try{if(q(this.view,Z.range,Z))return!0}catch(W){z3(this.view.state,W,"scroll handler")}let{range:$}=Z,J=this.coordsAt($.head,$.empty?$.assoc:$.head>$.anchor?-1:1),Q;if(!J)return;if(!$.empty&&(Q=this.coordsAt($.anchor,$.anchor>$.head?-1:1)))J={left:Math.min(J.left,Q.left),top:Math.min(J.top,Q.top),right:Math.max(J.right,Q.right),bottom:Math.max(J.bottom,Q.bottom)};let X=A6(this.view),K={left:J.left-X.left,top:J.top-X.top,right:J.right+X.right,bottom:J.bottom+X.bottom},{offsetWidth:Y,offsetHeight:U}=this.view.scrollDOM;P2(this.view.scrollDOM,K,$.head<$.anchor?-1:1,Z.x,Z.y,Math.max(Math.min(Z.xMargin,Y),-Y),Math.max(Math.min(Z.yMargin,U),-U),this.view.textDirection==i.LTR)}}var r2=class Z{constructor(){this.changes=[]}compareRange($,J){pZ($,J,this.changes)}comparePoint($,J){pZ($,J,this.changes)}},T5="\uFFFF";class E6{constructor(Z,$){this.points=Z,this.text="",this.lineSeparator=$.facet(m.lineSeparator)}append(Z){this.text+=Z}lineBreak(){this.text+=T5}readRange(Z,$){if(!Z)return this;let J=Z.parentNode;for(let Q=Z;;){this.findPointBefore(J,Q);let X=this.text.length;this.readNode(Q);let K=Q.nextSibling;if(K==$)break;let Y=l.get(Q),U=l.get(K);if(Y&&U?Y.breakAfter:(Y?Y.breakAfter:b7(Q))||b7(K)&&(Q.nodeName!="BR"||Q.cmIgnore)&&this.text.length>X)this.lineBreak();Q=K}return this.findPointBefore(J,$),this}readTextNode(Z){let $=Z.nodeValue;for(let J of this.points)if(J.node==Z)J.pos=this.text.length+Math.min(J.offset,$.length);for(let J=0,Q=this.lineSeparator?null:/\r\n?|\n/g;;){let X=-1,K=1,Y;if(this.lineSeparator)X=$.indexOf(this.lineSeparator,J),K=this.lineSeparator.length;else if(Y=Q.exec($))X=Y.index,K=Y[0].length;if(this.append($.slice(J,X<0?$.length:X)),X<0)break;if(this.lineBreak(),K>1){for(let U of this.points)if(U.node==Z&&U.pos>this.text.length)U.pos-=K-1}J=X+K}}readNode(Z){if(Z.cmIgnore)return;let $=l.get(Z),J=$&&$.overrideDOMText;if(J!=null){this.findPointInside(Z,J.length);for(let Q=J.iter();!Q.next().done;)if(Q.lineBreak)this.lineBreak();else this.append(Q.value)}else if(Z.nodeType==3)this.readTextNode(Z);else if(Z.nodeName=="BR"){if(Z.nextSibling)this.lineBreak()}else if(Z.nodeType==1)this.readRange(Z.firstChild,null)}findPointBefore(Z,$){for(let J of this.points)if(J.node==Z&&Z.childNodes[J.offset]==$)J.pos=this.text.length}findPointInside(Z,$){for(let J of this.points)if(Z.nodeType==3?J.node==Z:Z.contains(J.node))J.pos=this.text.length+(GQ(Z,J.node,J.offset)?$:0)}}class rZ{constructor(Z,$){this.node=Z,this.offset=$,this.pos=-1}}class P6{constructor(Z,$,J,Q){this.typeOver=Q,this.bounds=null,this.text="",this.domChanged=$>-1;let{impreciseHead:X,impreciseAnchor:K}=Z.docView;if(Z.state.readOnly&&$>-1)this.newSel=null;else if($>-1&&(this.bounds=Z.docView.domBoundsAround($,J,0))){let Y=X||K?[]:jQ(Z),U=new E6(Y,Z.state);U.readRange(this.bounds.startDOM,this.bounds.endDOM),this.text=U.text,this.newSel=_Q(Y,this.bounds.from)}else{let Y=Z.observer.selectionRange,U=X&&X.node==Y.focusNode&&X.offset==Y.focusOffset||!hZ(Z.contentDOM,Y.focusNode)?Z.state.selection.main.head:Z.docView.posFromDOM(Y.focusNode,Y.focusOffset),q=K&&K.node==Y.anchorNode&&K.offset==Y.anchorOffset||!hZ(Z.contentDOM,Y.anchorNode)?Z.state.selection.main.anchor:Z.docView.posFromDOM(Y.anchorNode,Y.anchorOffset),W=Z.viewport;if((L.ios||L.chrome)&&Z.state.selection.main.empty&&U!=q&&(W.from>0||W.to<Z.state.doc.length)){let G=Math.min(U,q),z=Math.max(U,q),j=W.from-G,_=W.to-z;if((j==0||j==1||G==0)&&(_==0||_==-1||z==Z.state.doc.length))U=0,q=Z.state.doc.length}this.newSel=R.single(q,U)}}}class T6{setSelectionOrigin(Z){this.lastSelectionOrigin=Z,this.lastSelectionTime=Date.now()}constructor(Z){if(this.view=Z,this.lastKeyCode=0,this.lastKeyTime=0,this.lastTouchTime=0,this.lastFocusTime=0,this.lastScrollTop=0,this.lastScrollLeft=0,this.pendingIOSKey=void 0,this.tabFocusMode=-1,this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastContextMenu=0,this.scrollHandlers=[],this.handlers=Object.create(null),this.composing=-1,this.compositionFirstChange=null,this.compositionEndedAt=0,this.compositionPendingKey=!1,this.compositionPendingChange=!1,this.mouseSelection=null,this.draggedContent=null,this.handleEvent=this.handleEvent.bind(this),this.notifiedFocused=Z.hasFocus,L.safari)Z.contentDOM.addEventListener("input",()=>null);if(L.gecko)CQ(Z.contentDOM.ownerDocument)}handleEvent(Z){if(!VQ(this.view,Z)||this.ignoreDuringComposition(Z))return;if(Z.type=="keydown"&&this.keydown(Z))return;this.runHandlers(Z.type,Z)}runHandlers(Z,$){let J=this.handlers[Z];if(J){for(let Q of J.observers)Q(this.view,$);for(let Q of J.handlers){if($.defaultPrevented)break;if(Q(this.view,$)){$.preventDefault();break}}}}ensureHandlers(Z){let $=OQ(Z),J=this.handlers,Q=this.view.contentDOM;for(let X in $)if(X!="scroll"){let K=!$[X].handlers.length,Y=J[X];if(Y&&K!=!Y.handlers.length)Q.removeEventListener(X,this.handleEvent),Y=null;if(!Y)Q.addEventListener(X,this.handleEvent,{passive:K})}for(let X in J)if(X!="scroll"&&!$[X])Q.removeEventListener(X,this.handleEvent);this.handlers=$}keydown(Z){if(this.lastKeyCode=Z.keyCode,this.lastKeyTime=Date.now(),Z.keyCode==9&&this.tabFocusMode>-1&&(!this.tabFocusMode||Date.now()<=this.tabFocusMode))return!0;if(this.tabFocusMode>0&&Z.keyCode!=27&&S6.indexOf(Z.keyCode)<0)this.tabFocusMode=-1;if(L.android&&L.chrome&&!Z.synthetic&&(Z.keyCode==13||Z.keyCode==8))return this.view.observer.delayAndroidKey(Z.key,Z.keyCode),!0;let $;if(L.ios&&!Z.synthetic&&!Z.altKey&&!Z.metaKey&&(($=y6.find((J)=>J.keyCode==Z.keyCode))&&!Z.ctrlKey||HQ.indexOf(Z.key)>-1&&Z.ctrlKey&&!Z.shiftKey))return this.pendingIOSKey=$||Z,setTimeout(()=>this.flushIOSKey(),250),!0;if(Z.keyCode!=229)this.view.observer.forceFlush();return!1}flushIOSKey(Z){let $=this.pendingIOSKey;if(!$)return!1;if($.key=="Enter"&&Z&&Z.from<Z.to&&/^\S+$/.test(Z.insert.toString()))return!1;return this.pendingIOSKey=void 0,$5(this.view.contentDOM,$.key,$.keyCode,$ instanceof KeyboardEvent?$:void 0)}ignoreDuringComposition(Z){if(!/^key/.test(Z.type))return!1;if(this.composing>0)return!0;if(L.safari&&!L.ios&&this.compositionPendingKey&&Date.now()-this.compositionEndedAt<100)return this.compositionPendingKey=!1,!0;return!1}startMouseSelection(Z){if(this.mouseSelection)this.mouseSelection.destroy();this.mouseSelection=Z}update(Z){if(this.view.observer.update(Z),this.mouseSelection)this.mouseSelection.update(Z);if(this.draggedContent&&Z.docChanged)this.draggedContent=this.draggedContent.map(Z.changes);if(Z.transactions.length)this.lastKeyCode=this.lastSelectionTime=0}destroy(){if(this.mouseSelection)this.mouseSelection.destroy()}}var y6=[{key:"Backspace",keyCode:8,inputType:"deleteContentBackward"},{key:"Enter",keyCode:13,inputType:"insertParagraph"},{key:"Enter",keyCode:13,inputType:"insertLineBreak"},{key:"Delete",keyCode:46,inputType:"deleteContentForward"}],HQ="dthko",S6=[16,17,18,20,91,92,224,225],R7=6;class b6{constructor(Z,$,J,Q){this.view=Z,this.startEvent=$,this.style=J,this.mustSelect=Q,this.scrollSpeed={x:0,y:0},this.scrolling=-1,this.lastEvent=$,this.scrollParents=C2(Z.contentDOM),this.atoms=Z.state.facet(j4).map((K)=>K(Z));let X=Z.contentDOM.ownerDocument;X.addEventListener("mousemove",this.move=this.move.bind(this)),X.addEventListener("mouseup",this.up=this.up.bind(this)),this.extend=$.shiftKey,this.multiple=Z.state.facet(m.allowMultipleSelections)&&NQ(Z,$),this.dragging=RQ(Z,$)&&w6($)==1?null:!1}start(Z){if(this.dragging===!1)this.select(Z)}move(Z){if(Z.buttons==0)return this.destroy();if(this.dragging||this.dragging==null&&FQ(this.startEvent,Z)<10)return;this.select(this.lastEvent=Z);let $=0,J=0,Q=0,X=0,K=this.view.win.innerWidth,Y=this.view.win.innerHeight;if(this.scrollParents.x)({left:Q,right:K}=this.scrollParents.x.getBoundingClientRect());if(this.scrollParents.y)({top:X,bottom:Y}=this.scrollParents.y.getBoundingClientRect());let U=A6(this.view);if(Z.clientX-U.left<=Q+R7)$=-V7(Q-Z.clientX);else if(Z.clientX+U.right>=K-R7)$=V7(Z.clientX-K);if(Z.clientY-U.top<=X+R7)J=-V7(X-Z.clientY);else if(Z.clientY+U.bottom>=Y-R7)J=V7(Z.clientY-Y);this.setScrollSpeed($,J)}up(Z){if(this.dragging==null)this.select(this.lastEvent);if(!this.dragging)Z.preventDefault();this.destroy()}destroy(){this.setScrollSpeed(0,0);let Z=this.view.contentDOM.ownerDocument;Z.removeEventListener("mousemove",this.move),Z.removeEventListener("mouseup",this.up),this.view.inputState.mouseSelection=this.view.inputState.draggedContent=null}setScrollSpeed(Z,$){if(this.scrollSpeed={x:Z,y:$},Z||$){if(this.scrolling<0)this.scrolling=setInterval(()=>this.scroll(),50)}else if(this.scrolling>-1)clearInterval(this.scrolling),this.scrolling=-1}scroll(){let{x:Z,y:$}=this.scrollSpeed;if(Z&&this.scrollParents.x)this.scrollParents.x.scrollLeft+=Z,Z=0;if($&&this.scrollParents.y)this.scrollParents.y.scrollTop+=$,$=0;if(Z||$)this.view.win.scrollBy(Z,$);if(this.dragging===!1)this.select(this.lastEvent)}skipAtoms(Z){let $=null;for(let J=0;J<Z.ranges.length;J++){let Q=Z.ranges[J],X=null;if(Q.empty){let K=P7(this.atoms,Q.from,0);if(K!=Q.from)X=R.cursor(K,-1)}else{let K=P7(this.atoms,Q.from,-1),Y=P7(this.atoms,Q.to,1);if(K!=Q.from||Y!=Q.to)X=R.range(Q.from==Q.anchor?K:Y,Q.from==Q.head?K:Y)}if(X){if(!$)$=Z.ranges.slice();$[J]=X}}return $?R.create($,Z.mainIndex):Z}select(Z){let{view:$}=this,J=this.skipAtoms(this.style.get(Z,this.extend,this.multiple));if(this.mustSelect||!J.eq($.state.selection,this.dragging===!1))this.view.dispatch({selection:J,userEvent:"select.pointer"});this.mustSelect=!1}update(Z){if(Z.transactions.some(($)=>$.isUserEvent("input.type")))this.destroy();else if(this.style.update(Z))setTimeout(()=>this.select(this.lastEvent),20)}}var f3=Object.create(null),b3=Object.create(null),k6=L.ie&&L.ie_version<15||L.ios&&L.webkit_version<604;b3.scroll=(Z)=>{Z.inputState.lastScrollTop=Z.scrollDOM.scrollTop,Z.inputState.lastScrollLeft=Z.scrollDOM.scrollLeft};f3.keydown=(Z,$)=>{if(Z.inputState.setSelectionOrigin("select"),$.keyCode==27&&Z.inputState.tabFocusMode!=0)Z.inputState.tabFocusMode=Date.now()+2000;return!1};b3.touchstart=(Z,$)=>{Z.inputState.lastTouchTime=Date.now(),Z.inputState.setSelectionOrigin("select.pointer")};b3.touchmove=(Z)=>{Z.inputState.setSelectionOrigin("select.pointer")};f3.mousedown=(Z,$)=>{if(Z.observer.flush(),Z.inputState.lastTouchTime>Date.now()-2000)return!1;let J=null;for(let Q of Z.state.facet(j6))if(J=Q(Z,$),J)break;if(!J&&$.button==0)J=LQ(Z,$);if(J){let Q=!Z.hasFocus;if(Z.inputState.startMouseSelection(new b6(Z,$,J,Q)),Q)Z.observer.ignore(()=>{s0(Z.contentDOM);let K=Z.root.activeElement;if(K&&!K.contains(Z.contentDOM))K.blur()});let X=Z.inputState.mouseSelection;if(X)return X.start($),X.dragging===!1}return!1};var L0=(Z,$,J)=>$>=J.top&&$<=J.bottom&&Z>=J.left&&Z<=J.right,AQ=L.ie&&L.ie_version<=11,E0=null,P0=0,C0=0;f3.dragstart=(Z,$)=>{let{selection:{main:J}}=Z.state;if($.target.draggable){let X=Z.docView.nearest($.target);if(X&&X.isWidget){let K=X.posAtStart,Y=K+X.length;if(K>=J.to||Y<=J.from)J=R.range(K,Y)}}let{inputState:Q}=Z;if(Q.mouseSelection)Q.mouseSelection.dragging=!0;if(Q.draggedContent=J,$.dataTransfer)$.dataTransfer.setData("Text",f7(Z.state,W4,Z.state.sliceDoc(J.from,J.to))),$.dataTransfer.effectAllowed="copyMove";return!1};f3.dragend=(Z)=>{return Z.inputState.draggedContent=null,!1};f3.drop=(Z,$)=>{if(!$.dataTransfer)return!1;if(Z.state.readOnly)return!0;let J=$.dataTransfer.files;if(J&&J.length){let Q=Array(J.length),X=0,K=()=>{if(++X==J.length)T0(Z,$,Q.filter((Y)=>Y!=null).join(Z.state.lineBreak),!1)};for(let Y=0;Y<J.length;Y++){let U=new FileReader;U.onerror=K,U.onload=()=>{if(!/[\x00-\x08\x0e-\x1f]{2}/.test(U.result))Q[Y]=U.result;K()},U.readAsText(J[Y])}return!0}else{let Q=$.dataTransfer.getData("Text");if(Q)return T0(Z,$,Q,!0),!0}return!1};f3.paste=(Z,$)=>{if(Z.state.readOnly)return!0;Z.observer.flush();let J=k6?null:$.clipboardData;if(J)return x6(Z,J.getData("text/plain")||J.getData("text/uri-list")),!0;else return IQ(Z),!1};var oZ=null;f3.copy=f3.cut=(Z,$)=>{let{text:J,ranges:Q,linewise:X}=PQ(Z.state);if(!J&&!X)return!1;if(oZ=X?J:null,$.type=="cut"&&!Z.state.readOnly)Z.dispatch({changes:Q,scrollIntoView:!0,userEvent:"delete.cut"});let K=k6?null:$.clipboardData;if(K)return K.clearData(),K.setData("text/plain",J),!0;else return EQ(Z,J),!1};var v6=V3.define();b3.focus=(Z)=>{if(Z.inputState.lastFocusTime=Date.now(),!Z.scrollDOM.scrollTop&&(Z.inputState.lastScrollTop||Z.inputState.lastScrollLeft))Z.scrollDOM.scrollTop=Z.inputState.lastScrollTop,Z.scrollDOM.scrollLeft=Z.inputState.lastScrollLeft;m6(Z)};b3.blur=(Z)=>{Z.observer.clearSelectionRange(),m6(Z)};b3.compositionstart=b3.compositionupdate=(Z)=>{if(Z.observer.editContext)return;if(Z.inputState.compositionFirstChange==null)Z.inputState.compositionFirstChange=!0;if(Z.inputState.composing<0)Z.inputState.composing=0};b3.compositionend=(Z)=>{if(Z.observer.editContext)return;if(Z.inputState.composing=-1,Z.inputState.compositionEndedAt=Date.now(),Z.inputState.compositionPendingKey=!0,Z.inputState.compositionPendingChange=Z.observer.pendingRecords().length>0,Z.inputState.compositionFirstChange=null,L.chrome&&L.android)Z.observer.flushSoon();else if(Z.inputState.compositionPendingChange)Promise.resolve().then(()=>Z.observer.flush());else setTimeout(()=>{if(Z.inputState.composing<0&&Z.docView.hasComposition)Z.update([])},50)};b3.contextmenu=(Z)=>{Z.inputState.lastContextMenu=Date.now()};f3.beforeinput=(Z,$)=>{var J,Q;if($.inputType=="insertReplacementText"&&Z.observer.editContext){let K=(J=$.dataTransfer)===null||J===void 0?void 0:J.getData("text/plain"),Y=$.getTargetRanges();if(K&&Y.length){let U=Y[0],q=Z.posAtDOM(U.startContainer,U.startOffset),W=Z.posAtDOM(U.endContainer,U.endOffset);return _4(Z,{from:q,to:W,insert:Z.state.toText(K)},null),!0}}let X;if(L.chrome&&L.android&&(X=y6.find((K)=>K.inputType==$.inputType))){if(Z.observer.delayAndroidKey(X.key,X.keyCode),X.key=="Backspace"||X.key=="Delete"){let K=((Q=window.visualViewport)===null||Q===void 0?void 0:Q.height)||0;setTimeout(()=>{var Y;if((((Y=window.visualViewport)===null||Y===void 0?void 0:Y.height)||0)>K+10&&Z.hasFocus)Z.contentDOM.blur(),Z.focus()},100)}}if(L.ios&&$.inputType=="deleteContentForward")Z.observer.flushSoon();if(L.safari&&$.inputType=="insertText"&&Z.inputState.composing>=0)setTimeout(()=>b3.compositionend(Z,$),20);return!1};var y0=new Set,S0=["pre-wrap","normal","pre-line","break-spaces"],X5=!1;class u6{constructor(Z){this.lineWrapping=Z,this.doc=b.empty,this.heightSamples={},this.lineHeight=14,this.charWidth=7,this.textHeight=14,this.lineLength=30}heightForGap(Z,$){let J=this.doc.lineAt($).number-this.doc.lineAt(Z).number+1;if(this.lineWrapping)J+=Math.max(0,Math.ceil(($-Z-J*this.lineLength*0.5)/this.lineLength));return this.lineHeight*J}heightForLine(Z){if(!this.lineWrapping)return this.lineHeight;return(1+Math.max(0,Math.ceil((Z-this.lineLength)/(this.lineLength-5))))*this.lineHeight}setDoc(Z){return this.doc=Z,this}mustRefreshForWrapping(Z){return S0.indexOf(Z)>-1!=this.lineWrapping}mustRefreshForHeights(Z){let $=!1;for(let J=0;J<Z.length;J++){let Q=Z[J];if(Q<0)J++;else if(!this.heightSamples[Math.floor(Q*10)])$=!0,this.heightSamples[Math.floor(Q*10)]=!0}return $}refresh(Z,$,J,Q,X,K){let Y=S0.indexOf(Z)>-1,U=Math.round($)!=Math.round(this.lineHeight)||this.lineWrapping!=Y;if(this.lineWrapping=Y,this.lineHeight=$,this.charWidth=J,this.textHeight=Q,this.lineLength=X,U){this.heightSamples={};for(let q=0;q<K.length;q++){let W=K[q];if(W<0)q++;else this.heightSamples[Math.floor(W*10)]=!0}}return U}}class f6{constructor(Z,$){this.from=Z,this.heights=$,this.index=0}get more(){return this.index<this.heights.length}}class n3{constructor(Z,$,J,Q,X){this.from=Z,this.length=$,this.top=J,this.height=Q,this._content=X}get type(){return typeof this._content=="number"?T3.Text:Array.isArray(this._content)?this._content:this._content.type}get to(){return this.from+this.length}get bottom(){return this.top+this.height}get widget(){return this._content instanceof F9?this._content.widget:null}get widgetLineBreaks(){return typeof this._content=="number"?this._content:0}join(Z){let $=(Array.isArray(this._content)?this._content:[this]).concat(Array.isArray(Z._content)?Z._content:[Z]);return new n3(this.from,this.length+Z.length,this.top,this.height+Z.height,$)}}var d=function(Z){return Z[Z.ByPos=0]="ByPos",Z[Z.ByHeight=1]="ByHeight",Z[Z.ByPosNoHeight=2]="ByPosNoHeight",Z}(d||(d={})),C7=0.001;class j3{constructor(Z,$,J=2){this.length=Z,this.height=$,this.flags=J}get outdated(){return(this.flags&2)>0}set outdated(Z){this.flags=(Z?2:0)|this.flags&-3}setHeight(Z){if(this.height!=Z){if(Math.abs(this.height-Z)>C7)X5=!0;this.height=Z}}replace(Z,$,J){return j3.of(J)}decomposeLeft(Z,$){$.push(this)}decomposeRight(Z,$){$.push(this)}applyChanges(Z,$,J,Q){let X=this,K=J.doc;for(let Y=Q.length-1;Y>=0;Y--){let{fromA:U,toA:q,fromB:W,toB:G}=Q[Y],z=X.lineAt(U,d.ByPosNoHeight,J.setDoc($),0,0),j=z.to>=q?z:X.lineAt(q,d.ByPosNoHeight,J,0,0);G+=j.to-q,q=j.to;while(Y>0&&z.from<=Q[Y-1].toA)if(U=Q[Y-1].fromA,W=Q[Y-1].fromB,Y--,U<z.from)z=X.lineAt(U,d.ByPosNoHeight,J,0,0);W+=z.from-U,U=z.from;let _=H4.build(J.setDoc(K),Z,W,G);X=v7(X,X.replace(U,q,_))}return X.updateHeight(J,0)}static empty(){return new I3(0,0)}static of(Z){if(Z.length==1)return Z[0];let $=0,J=Z.length,Q=0,X=0;for(;;)if($==J)if(Q>X*2){let Y=Z[$-1];if(Y.break)Z.splice(--$,1,Y.left,null,Y.right);else Z.splice(--$,1,Y.left,Y.right);J+=1+Y.break,Q-=Y.size}else if(X>Q*2){let Y=Z[J];if(Y.break)Z.splice(J,1,Y.left,null,Y.right);else Z.splice(J,1,Y.left,Y.right);J+=2+Y.break,X-=Y.size}else break;else if(Q<X){let Y=Z[$++];if(Y)Q+=Y.size}else{let Y=Z[--J];if(Y)X+=Y.size}let K=0;if(Z[$-1]==null)K=1,$--;else if(Z[$]==null)K=1,J++;return new g6(j3.of(Z.slice(0,$)),K,j3.of(Z.slice(J)))}}j3.prototype.size=1;class O4 extends j3{constructor(Z,$,J){super(Z,$);this.deco=J}blockAt(Z,$,J,Q){return new n3(Q,this.length,J,this.height,this.deco||0)}lineAt(Z,$,J,Q,X){return this.blockAt(0,J,Q,X)}forEachLine(Z,$,J,Q,X,K){if(Z<=X+this.length&&$>=X)K(this.blockAt(0,J,Q,X))}updateHeight(Z,$=0,J=!1,Q){if(Q&&Q.from<=$&&Q.more)this.setHeight(Q.heights[Q.index++]);return this.outdated=!1,this}toString(){return`block(${this.length})`}}class I3 extends O4{constructor(Z,$){super(Z,$,null);this.collapsed=0,this.widgetHeight=0,this.breaks=0}blockAt(Z,$,J,Q){return new n3(Q,this.length,J,this.height,this.breaks)}replace(Z,$,J){let Q=J[0];if(J.length==1&&(Q instanceof I3||Q instanceof X3&&Q.flags&4)&&Math.abs(this.length-Q.length)<10){if(Q instanceof X3)Q=new I3(Q.length,this.height);else Q.height=this.height;if(!this.outdated)Q.outdated=!1;return Q}else return j3.of(J)}updateHeight(Z,$=0,J=!1,Q){if(Q&&Q.from<=$&&Q.more)this.setHeight(Q.heights[Q.index++]);else if(J||this.outdated)this.setHeight(Math.max(this.widgetHeight,Z.heightForLine(this.length-this.collapsed))+this.breaks*Z.lineHeight);return this.outdated=!1,this}toString(){return`line(${this.length}${this.collapsed?-this.collapsed:""}${this.widgetHeight?":"+this.widgetHeight:""})`}}class X3 extends j3{constructor(Z){super(Z,0)}heightMetrics(Z,$){let J=Z.doc.lineAt($).number,Q=Z.doc.lineAt($+this.length).number,X=Q-J+1,K,Y=0;if(Z.lineWrapping){let U=Math.min(this.height,Z.lineHeight*X);if(K=U/X,this.length>X+1)Y=(this.height-U)/(this.length-X-1)}else K=this.height/X;return{firstLine:J,lastLine:Q,perLine:K,perChar:Y}}blockAt(Z,$,J,Q){let{firstLine:X,lastLine:K,perLine:Y,perChar:U}=this.heightMetrics($,Q);if($.lineWrapping){let q=Q+(Z<$.lineHeight?0:Math.round(Math.max(0,Math.min(1,(Z-J)/this.height))*this.length)),W=$.doc.lineAt(q),G=Y+W.length*U,z=Math.max(J,Z-G/2);return new n3(W.from,W.length,z,G,0)}else{let q=Math.max(0,Math.min(K-X,Math.floor((Z-J)/Y))),{from:W,length:G}=$.doc.line(X+q);return new n3(W,G,J+Y*q,Y,0)}}lineAt(Z,$,J,Q,X){if($==d.ByHeight)return this.blockAt(Z,J,Q,X);if($==d.ByPosNoHeight){let{from:j,to:_}=J.doc.lineAt(Z);return new n3(j,_-j,0,0,0)}let{firstLine:K,perLine:Y,perChar:U}=this.heightMetrics(J,X),q=J.doc.lineAt(Z),W=Y+q.length*U,G=q.number-K,z=Q+Y*G+U*(q.from-X-G);return new n3(q.from,q.length,Math.max(Q,Math.min(z,Q+this.height-W)),W,0)}forEachLine(Z,$,J,Q,X,K){Z=Math.max(Z,X),$=Math.min($,X+this.length);let{firstLine:Y,perLine:U,perChar:q}=this.heightMetrics(J,X);for(let W=Z,G=Q;W<=$;){let z=J.doc.lineAt(W);if(W==Z){let _=z.number-Y;G+=U*_+q*(Z-X-_)}let j=U+q*z.length;K(new n3(z.from,z.length,G,j,0)),G+=j,W=z.to+1}}replace(Z,$,J){let Q=this.length-$;if(Q>0){let X=J[J.length-1];if(X instanceof X3)J[J.length-1]=new X3(X.length+Q);else J.push(null,new X3(Q-1))}if(Z>0){let X=J[0];if(X instanceof X3)J[0]=new X3(Z+X.length);else J.unshift(new X3(Z-1),null)}return j3.of(J)}decomposeLeft(Z,$){$.push(new X3(Z-1),null)}decomposeRight(Z,$){$.push(null,new X3(this.length-Z-1))}updateHeight(Z,$=0,J=!1,Q){let X=$+this.length;if(Q&&Q.from<=$+this.length&&Q.more){let K=[],Y=Math.max($,Q.from),U=-1;if(Q.from>$)K.push(new X3(Q.from-$-1).updateHeight(Z,$));while(Y<=X&&Q.more){let W=Z.doc.lineAt(Y).length;if(K.length)K.push(null);let G=Q.heights[Q.index++];if(U==-1)U=G;else if(Math.abs(G-U)>=C7)U=-2;let z=new I3(W,G);z.outdated=!1,K.push(z),Y+=W+1}if(Y<=X)K.push(null,new X3(X-Y).updateHeight(Z,Y));let q=j3.of(K);if(U<0||Math.abs(q.height-this.height)>=C7||Math.abs(U-this.heightMetrics(Z,$).perLine)>=C7)X5=!0;return v7(this,q)}else if(J||this.outdated)this.setHeight(Z.heightForGap($,$+this.length)),this.outdated=!1;return this}toString(){return`gap(${this.length})`}}class g6 extends j3{constructor(Z,$,J){super(Z.length+$+J.length,Z.height+J.height,$|(Z.outdated||J.outdated?2:0));this.left=Z,this.right=J,this.size=Z.size+J.size}get break(){return this.flags&1}blockAt(Z,$,J,Q){let X=J+this.left.height;return Z<X?this.left.blockAt(Z,$,J,Q):this.right.blockAt(Z,$,X,Q+this.left.length+this.break)}lineAt(Z,$,J,Q,X){let K=Q+this.left.height,Y=X+this.left.length+this.break,U=$==d.ByHeight?Z<K:Z<Y,q=U?this.left.lineAt(Z,$,J,Q,X):this.right.lineAt(Z,$,J,K,Y);if(this.break||(U?q.to<Y:q.from>Y))return q;let W=$==d.ByPosNoHeight?d.ByPosNoHeight:d.ByPos;if(U)return q.join(this.right.lineAt(Y,W,J,K,Y));else return this.left.lineAt(Y,W,J,Q,X).join(q)}forEachLine(Z,$,J,Q,X,K){let Y=Q+this.left.height,U=X+this.left.length+this.break;if(this.break){if(Z<U)this.left.forEachLine(Z,$,J,Q,X,K);if($>=U)this.right.forEachLine(Z,$,J,Y,U,K)}else{let q=this.lineAt(U,d.ByPos,J,Q,X);if(Z<q.from)this.left.forEachLine(Z,q.from-1,J,Q,X,K);if(q.to>=Z&&q.from<=$)K(q);if($>q.to)this.right.forEachLine(q.to+1,$,J,Y,U,K)}}replace(Z,$,J){let Q=this.left.length+this.break;if($<Q)return this.balanced(this.left.replace(Z,$,J),this.right);if(Z>this.left.length)return this.balanced(this.left,this.right.replace(Z-Q,$-Q,J));let X=[];if(Z>0)this.decomposeLeft(Z,X);let K=X.length;for(let Y of J)X.push(Y);if(Z>0)k0(X,K-1);if($<this.length){let Y=X.length;this.decomposeRight($,X),k0(X,Y)}return j3.of(X)}decomposeLeft(Z,$){let J=this.left.length;if(Z<=J)return this.left.decomposeLeft(Z,$);if($.push(this.left),this.break){if(J++,Z>=J)$.push(null)}if(Z>J)this.right.decomposeLeft(Z-J,$)}decomposeRight(Z,$){let J=this.left.length,Q=J+this.break;if(Z>=Q)return this.right.decomposeRight(Z-Q,$);if(Z<J)this.left.decomposeRight(Z,$);if(this.break&&Z<Q)$.push(null);$.push(this.right)}balanced(Z,$){if(Z.size>2*$.size||$.size>2*Z.size)return j3.of(this.break?[Z,null,$]:[Z,$]);return this.left=v7(this.left,Z),this.right=v7(this.right,$),this.setHeight(Z.height+$.height),this.outdated=Z.outdated||$.outdated,this.size=Z.size+$.size,this.length=Z.length+this.break+$.length,this}updateHeight(Z,$=0,J=!1,Q){let{left:X,right:K}=this,Y=$+X.length+this.break,U=null;if(Q&&Q.from<=$+X.length&&Q.more)U=X=X.updateHeight(Z,$,J,Q);else X.updateHeight(Z,$,J);if(Q&&Q.from<=Y+K.length&&Q.more)U=K=K.updateHeight(Z,Y,J,Q);else K.updateHeight(Z,Y,J);if(U)return this.balanced(X,K);return this.height=this.left.height+this.right.height,this.outdated=!1,this}toString(){return this.left+(this.break?" ":"-")+this.right}}var TQ=5;class H4{constructor(Z,$){this.pos=Z,this.oracle=$,this.nodes=[],this.lineStart=-1,this.lineEnd=-1,this.covering=null,this.writtenTo=Z}get isCovered(){return this.covering&&this.nodes[this.nodes.length-1]==this.covering}span(Z,$){if(this.lineStart>-1){let J=Math.min($,this.lineEnd),Q=this.nodes[this.nodes.length-1];if(Q instanceof I3)Q.length+=J-this.pos;else if(J>this.pos||!this.isCovered)this.nodes.push(new I3(J-this.pos,-1));if(this.writtenTo=J,$>J)this.nodes.push(null),this.writtenTo++,this.lineStart=-1}this.pos=$}point(Z,$,J){if(Z<$||J.heightRelevant){let Q=J.widget?J.widget.estimatedHeight:0,X=J.widget?J.widget.lineBreaks:0;if(Q<0)Q=this.oracle.lineHeight;let K=$-Z;if(J.block)this.addBlock(new O4(K,Q,J));else if(K||X||Q>=TQ)this.addLineDeco(Q,X,K)}else if($>Z)this.span(Z,$);if(this.lineEnd>-1&&this.lineEnd<this.pos)this.lineEnd=this.oracle.doc.lineAt(this.pos).to}enterLine(){if(this.lineStart>-1)return;let{from:Z,to:$}=this.oracle.doc.lineAt(this.pos);if(this.lineStart=Z,this.lineEnd=$,this.writtenTo<Z){if(this.writtenTo<Z-1||this.nodes[this.nodes.length-1]==null)this.nodes.push(this.blankContent(this.writtenTo,Z-1));this.nodes.push(null)}if(this.pos>Z)this.nodes.push(new I3(this.pos-Z,-1));this.writtenTo=this.pos}blankContent(Z,$){let J=new X3($-Z);if(this.oracle.doc.lineAt(Z).to==$)J.flags|=4;return J}ensureLine(){this.enterLine();let Z=this.nodes.length?this.nodes[this.nodes.length-1]:null;if(Z instanceof I3)return Z;let $=new I3(0,-1);return this.nodes.push($),$}addBlock(Z){this.enterLine();let $=Z.deco;if($&&$.startSide>0&&!this.isCovered)this.ensureLine();if(this.nodes.push(Z),this.writtenTo=this.pos=this.pos+Z.length,$&&$.endSide>0)this.covering=Z}addLineDeco(Z,$,J){let Q=this.ensureLine();Q.length+=J,Q.collapsed+=J,Q.widgetHeight=Math.max(Q.widgetHeight,Z),Q.breaks+=$,this.writtenTo=this.pos=this.pos+J}finish(Z){let $=this.nodes.length==0?null:this.nodes[this.nodes.length-1];if(this.lineStart>-1&&!($ instanceof I3)&&!this.isCovered)this.nodes.push(new I3(0,-1));else if(this.writtenTo<this.pos||$==null)this.nodes.push(this.blankContent(this.writtenTo,this.pos));let J=Z;for(let Q of this.nodes){if(Q instanceof I3)Q.updateHeight(this.oracle,J);J+=Q?Q.length:1}return this.nodes}static build(Z,$,J,Q){let X=new H4(J,Z);return w.spans($,J,Q,X,0),X.finish(J)}}class l6{constructor(){this.changes=[]}compareRange(){}comparePoint(Z,$,J,Q){if(Z<$||J&&J.heightRelevant||Q&&Q.heightRelevant)pZ(Z,$,this.changes,5)}}class T7{constructor(Z,$,J){this.from=Z,this.to=$,this.size=J}static same(Z,$){if(Z.length!=$.length)return!1;for(let J=0;J<Z.length;J++){let Q=Z[J],X=$[J];if(Q.from!=X.from||Q.to!=X.to||Q.size!=X.size)return!1}return!0}draw(Z,$){return c.replace({widget:new p6(this.size*($?Z.scaleY:Z.scaleX),$)}).range(this.from,this.to)}}class p6 extends h9{constructor(Z,$){super();this.size=Z,this.vertical=$}eq(Z){return Z.size==this.size&&Z.vertical==this.vertical}toDOM(){let Z=document.createElement("div");if(this.vertical)Z.style.height=this.size+"px";else Z.style.width=this.size+"px",Z.style.height="2px",Z.style.display="inline-block";return Z}get estimatedHeight(){return this.vertical?this.size:-1}}class tZ{constructor(Z){this.state=Z,this.pixelViewport={left:0,right:window.innerWidth,top:0,bottom:0},this.inView=!0,this.paddingTop=0,this.paddingBottom=0,this.contentDOMWidth=0,this.contentDOMHeight=0,this.editorHeight=0,this.editorWidth=0,this.scrollTop=0,this.scrolledToBottom=!1,this.scaleX=1,this.scaleY=1,this.scrollAnchorPos=0,this.scrollAnchorHeight=-1,this.scaler=x0,this.scrollTarget=null,this.printing=!1,this.mustMeasureContent=!0,this.defaultTextDirection=i.LTR,this.visibleRanges=[],this.mustEnforceCursorAssoc=!1;let $=Z.facet(z4).some((J)=>typeof J!="function"&&J.class=="cm-lineWrapping");this.heightOracle=new u6($),this.stateDeco=Z.facet(v5).filter((J)=>typeof J!="function"),this.heightMap=j3.empty().applyChanges(this.stateDeco,b.empty,this.heightOracle.setDoc(Z.doc),[new y3(0,0,0,Z.doc.length)]);for(let J=0;J<2;J++)if(this.viewport=this.getViewport(0,null),!this.updateForViewport())break;this.updateViewportLines(),this.lineGaps=this.ensureLineGaps([]),this.lineGapDeco=c.set(this.lineGaps.map((J)=>J.draw(this,!1))),this.computeVisibleRanges()}updateForViewport(){let Z=[this.viewport],{main:$}=this.state.selection;for(let J=0;J<=1;J++){let Q=J?$.head:$.anchor;if(!Z.some(({from:X,to:K})=>Q>=X&&Q<=K)){let{from:X,to:K}=this.lineBlockAt(Q);Z.push(new y5(X,K))}}return this.viewports=Z.sort((J,Q)=>J.from-Q.from),this.updateScaler()}updateScaler(){let Z=this.scaler;return this.scaler=this.heightMap.height<=7000000?x0:new F4(this.heightOracle,this.heightMap,this.viewports),Z.eq(this.scaler)?0:2}updateViewportLines(){this.viewportLines=[],this.heightMap.forEachLine(this.viewport.from,this.viewport.to,this.heightOracle.setDoc(this.state.doc),0,0,(Z)=>{this.viewportLines.push(S5(Z,this.scaler))})}update(Z,$=null){this.state=Z.state;let J=this.stateDeco;this.stateDeco=this.state.facet(v5).filter((W)=>typeof W!="function");let Q=Z.changedRanges,X=y3.extendWithRanges(Q,yQ(J,this.stateDeco,Z?Z.changes:e.empty(this.state.doc.length))),K=this.heightMap.height,Y=this.scrolledToBottom?null:this.scrollAnchorAt(this.scrollTop);if(b0(),this.heightMap=this.heightMap.applyChanges(this.stateDeco,Z.startState.doc,this.heightOracle.setDoc(this.state.doc),X),this.heightMap.height!=K||X5)Z.flags|=2;if(Y)this.scrollAnchorPos=Z.changes.mapPos(Y.from,-1),this.scrollAnchorHeight=Y.top;else this.scrollAnchorPos=-1,this.scrollAnchorHeight=this.heightMap.height;let U=X.length?this.mapViewport(this.viewport,Z.changes):this.viewport;if($&&($.range.head<U.from||$.range.head>U.to)||!this.viewportIsAppropriate(U))U=this.getViewport(0,$);let q=U.from!=this.viewport.from||U.to!=this.viewport.to;if(this.viewport=U,Z.flags|=this.updateForViewport(),q||!Z.changes.empty||Z.flags&2)this.updateViewportLines();if(this.lineGaps.length||this.viewport.to-this.viewport.from>4000)this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps,Z.changes)));if(Z.flags|=this.computeVisibleRanges(),$)this.scrollTarget=$;if(!this.mustEnforceCursorAssoc&&Z.selectionSet&&Z.view.lineWrapping&&Z.state.selection.main.empty&&Z.state.selection.main.assoc&&!Z.state.facet(c2))this.mustEnforceCursorAssoc=!0}measure(Z){let $=Z.contentDOM,J=window.getComputedStyle($),Q=this.heightOracle,X=J.whiteSpace;this.defaultTextDirection=J.direction=="rtl"?i.RTL:i.LTR;let K=this.heightOracle.mustRefreshForWrapping(X),Y=$.getBoundingClientRect(),U=K||this.mustMeasureContent||this.contentDOMHeight!=Y.height;this.contentDOMHeight=Y.height,this.mustMeasureContent=!1;let q=0,W=0;if(Y.width&&Y.height){let{scaleX:V,scaleY:I}=d0($,Y);if(V>0.005&&Math.abs(this.scaleX-V)>0.005||I>0.005&&Math.abs(this.scaleY-I)>0.005)this.scaleX=V,this.scaleY=I,q|=8,K=U=!0}let G=(parseInt(J.paddingTop)||0)*this.scaleY,z=(parseInt(J.paddingBottom)||0)*this.scaleY;if(this.paddingTop!=G||this.paddingBottom!=z)this.paddingTop=G,this.paddingBottom=z,q|=10;if(this.editorWidth!=Z.scrollDOM.clientWidth){if(Q.lineWrapping)U=!0;this.editorWidth=Z.scrollDOM.clientWidth,q|=8}let j=Z.scrollDOM.scrollTop*this.scaleY;if(this.scrollTop!=j)this.scrollAnchorHeight=-1,this.scrollTop=j;this.scrolledToBottom=n0(Z.scrollDOM);let _=(this.printing?bQ:SQ)($,this.paddingTop),H=_.top-this.pixelViewport.top,F=_.bottom-this.pixelViewport.bottom;this.pixelViewport=_;let N=this.pixelViewport.bottom>this.pixelViewport.top&&this.pixelViewport.right>this.pixelViewport.left;if(N!=this.inView){if(this.inView=N,N)U=!0}if(!this.inView&&!this.scrollTarget)return 0;let D=Y.width;if(this.contentDOMWidth!=D||this.editorHeight!=Z.scrollDOM.clientHeight)this.contentDOMWidth=Y.width,this.editorHeight=Z.scrollDOM.clientHeight,q|=8;if(U){let V=Z.docView.measureVisibleLineHeights(this.viewport);if(Q.mustRefreshForHeights(V))K=!0;if(K||Q.lineWrapping&&Math.abs(D-this.contentDOMWidth)>Q.charWidth){let{lineHeight:I,charWidth:C,textHeight:S}=Z.docView.measureTextSize();if(K=I>0&&Q.refresh(X,I,C,S,D/C,V),K)Z.docView.minWidth=0,q|=8}if(H>0&&F>0)W=Math.max(H,F);else if(H<0&&F<0)W=Math.min(H,F);b0();for(let I of this.viewports){let C=I.from==this.viewport.from?V:Z.docView.measureVisibleLineHeights(I);this.heightMap=(K?j3.empty().applyChanges(this.stateDeco,b.empty,this.heightOracle,[new y3(0,0,0,Z.state.doc.length)]):this.heightMap).updateHeight(Q,0,K,new f6(I.from,C))}if(X5)q|=2}let M=!this.viewportIsAppropriate(this.viewport,W)||this.scrollTarget&&(this.scrollTarget.range.head<this.viewport.from||this.scrollTarget.range.head>this.viewport.to);if(M){if(q&2)q|=this.updateScaler();this.viewport=this.getViewport(W,this.scrollTarget),q|=this.updateForViewport()}if(q&2||M)this.updateViewportLines();if(this.lineGaps.length||this.viewport.to-this.viewport.from>4000)this.updateLineGaps(this.ensureLineGaps(K?[]:this.lineGaps,Z));if(q|=this.computeVisibleRanges(),this.mustEnforceCursorAssoc)this.mustEnforceCursorAssoc=!1,Z.docView.enforceCursorAssoc();return q}get visibleTop(){return this.scaler.fromDOM(this.pixelViewport.top)}get visibleBottom(){return this.scaler.fromDOM(this.pixelViewport.bottom)}getViewport(Z,$){let J=0.5-Math.max(-0.5,Math.min(0.5,Z/1000/2)),Q=this.heightMap,X=this.heightOracle,{visibleTop:K,visibleBottom:Y}=this,U=new y5(Q.lineAt(K-J*1000,d.ByHeight,X,0,0).from,Q.lineAt(Y+(1-J)*1000,d.ByHeight,X,0,0).to);if($){let{head:q}=$.range;if(q<U.from||q>U.to){let W=Math.min(this.editorHeight,this.pixelViewport.bottom-this.pixelViewport.top),G=Q.lineAt(q,d.ByPos,X,0,0),z;if($.y=="center")z=(G.top+G.bottom)/2-W/2;else if($.y=="start"||$.y=="nearest"&&q<U.from)z=G.top;else z=G.bottom-W;U=new y5(Q.lineAt(z-500,d.ByHeight,X,0,0).from,Q.lineAt(z+W+500,d.ByHeight,X,0,0).to)}}return U}mapViewport(Z,$){let J=$.mapPos(Z.from,-1),Q=$.mapPos(Z.to,1);return new y5(this.heightMap.lineAt(J,d.ByPos,this.heightOracle,0,0).from,this.heightMap.lineAt(Q,d.ByPos,this.heightOracle,0,0).to)}viewportIsAppropriate({from:Z,to:$},J=0){if(!this.inView)return!0;let{top:Q}=this.heightMap.lineAt(Z,d.ByPos,this.heightOracle,0,0),{bottom:X}=this.heightMap.lineAt($,d.ByPos,this.heightOracle,0,0),{visibleTop:K,visibleBottom:Y}=this;return(Z==0||Q<=K-Math.max(10,Math.min(-J,250)))&&($==this.state.doc.length||X>=Y+Math.max(10,Math.min(J,250)))&&(Q>K-2000&&X<Y+2000)}mapLineGaps(Z,$){if(!Z.length||$.empty)return Z;let J=[];for(let Q of Z)if(!$.touchesRange(Q.from,Q.to))J.push(new T7($.mapPos(Q.from),$.mapPos(Q.to),Q.size));return J}ensureLineGaps(Z,$){let J=this.heightOracle.lineWrapping,Q=J?1e4:2000,X=Q>>1,K=Q<<1;if(this.defaultTextDirection!=i.LTR&&!J)return[];let Y=[],U=(W,G,z,j)=>{if(G-W<X)return;let _=this.state.selection.main,H=[_.from];if(!_.empty)H.push(_.to);for(let N of H)if(N>W&&N<G){U(W,N-10,z,j),U(N+10,G,z,j);return}let F=xQ(Z,(N)=>N.from>=z.from&&N.to<=z.to&&Math.abs(N.from-W)<X&&Math.abs(N.to-G)<X&&!H.some((D)=>N.from<D&&N.to>D));if(!F){if(G<z.to&&$&&J&&$.visibleRanges.some((N)=>N.from<=G&&N.to>=G)){let N=$.moveToLineBoundary(R.cursor(G),!1,!0).head;if(N>W)G=N}F=new T7(W,G,this.gapSize(z,W,G,j))}Y.push(F)},q=(W)=>{if(W.length<K||W.type!=T3.Text)return;let G=kQ(W.from,W.to,this.stateDeco);if(G.total<K)return;let z=this.scrollTarget?this.scrollTarget.range.head:null,j,_;if(J){let H=Q/this.heightOracle.lineLength*this.heightOracle.lineHeight,F,N;if(z!=null){let D=M7(G,z),M=((this.visibleBottom-this.visibleTop)/2+H)/W.height;F=D-M,N=D+M}else F=(this.visibleTop-W.top-H)/W.height,N=(this.visibleBottom-W.top+H)/W.height;j=I7(G,F),_=I7(G,N)}else{let H=G.total*this.heightOracle.charWidth,F=Q*this.heightOracle.charWidth,N,D;if(z!=null){let M=M7(G,z),V=((this.pixelViewport.right-this.pixelViewport.left)/2+F)/H;N=M-V,D=M+V}else N=(this.pixelViewport.left-F)/H,D=(this.pixelViewport.right+F)/H;j=I7(G,N),_=I7(G,D)}if(j>W.from)U(W.from,j,W,G);if(_<W.to)U(_,W.to,W,G)};for(let W of this.viewportLines)if(Array.isArray(W.type))W.type.forEach(q);else q(W);return Y}gapSize(Z,$,J,Q){let X=M7(Q,J)-M7(Q,$);if(this.heightOracle.lineWrapping)return Z.height*X;else return Q.total*this.heightOracle.charWidth*X}updateLineGaps(Z){if(!T7.same(Z,this.lineGaps))this.lineGaps=Z,this.lineGapDeco=c.set(Z.map(($)=>$.draw(this,this.heightOracle.lineWrapping)))}computeVisibleRanges(){let Z=this.stateDeco;if(this.lineGaps.length)Z=Z.concat(this.lineGapDeco);let $=[];w.spans(Z,this.viewport.from,this.viewport.to,{span(Q,X){$.push({from:Q,to:X})},point(){}},20);let J=$.length!=this.visibleRanges.length||this.visibleRanges.some((Q,X)=>Q.from!=$[X].from||Q.to!=$[X].to);return this.visibleRanges=$,J?4:0}lineBlockAt(Z){return Z>=this.viewport.from&&Z<=this.viewport.to&&this.viewportLines.find(($)=>$.from<=Z&&$.to>=Z)||S5(this.heightMap.lineAt(Z,d.ByPos,this.heightOracle,0,0),this.scaler)}lineBlockAtHeight(Z){return Z>=this.viewportLines[0].top&&Z<=this.viewportLines[this.viewportLines.length-1].bottom&&this.viewportLines.find(($)=>$.top<=Z&&$.bottom>=Z)||S5(this.heightMap.lineAt(this.scaler.fromDOM(Z),d.ByHeight,this.heightOracle,0,0),this.scaler)}scrollAnchorAt(Z){let $=this.lineBlockAtHeight(Z+8);return $.from>=this.viewport.from||this.viewportLines[0].top-Z>200?$:this.viewportLines[0]}elementAtHeight(Z){return S5(this.heightMap.blockAt(this.scaler.fromDOM(Z),this.heightOracle,0,0),this.scaler)}get docHeight(){return this.scaler.toDOM(this.heightMap.height)}get contentHeight(){return this.docHeight+this.paddingTop+this.paddingBottom}}class y5{constructor(Z,$){this.from=Z,this.to=$}}var x0={toDOM(Z){return Z},fromDOM(Z){return Z},scale:1,eq(Z){return Z==this}};class F4{constructor(Z,$,J){let Q=0,X=0,K=0;this.viewports=J.map(({from:Y,to:U})=>{let q=$.lineAt(Y,d.ByPos,Z,0,0).top,W=$.lineAt(U,d.ByPos,Z,0,0).bottom;return Q+=W-q,{from:Y,to:U,top:q,bottom:W,domTop:0,domBottom:0}}),this.scale=(7000000-Q)/($.height-Q);for(let Y of this.viewports)Y.domTop=K+(Y.top-X)*this.scale,K=Y.domBottom=Y.domTop+(Y.bottom-Y.top),X=Y.bottom}toDOM(Z){for(let $=0,J=0,Q=0;;$++){let X=$<this.viewports.length?this.viewports[$]:null;if(!X||Z<X.top)return Q+(Z-J)*this.scale;if(Z<=X.bottom)return X.domTop+(Z-X.top);J=X.bottom,Q=X.domBottom}}fromDOM(Z){for(let $=0,J=0,Q=0;;$++){let X=$<this.viewports.length?this.viewports[$]:null;if(!X||Z<X.domTop)return J+(Z-Q)/this.scale;if(Z<=X.domBottom)return X.top+(Z-X.domTop);J=X.bottom,Q=X.domBottom}}eq(Z){if(!(Z instanceof F4))return!1;return this.scale==Z.scale&&this.viewports.length==Z.viewports.length&&this.viewports.every(($,J)=>$.from==Z.viewports[J].from&&$.to==Z.viewports[J].to)}}var A7=B.define({combine:(Z)=>Z.join(" ")}),eZ=B.define({combine:(Z)=>Z.indexOf(!0)>-1}),Z4=m3.newName(),d6=m3.newName(),c6=m3.newName(),s6={"&light":"."+d6,"&dark":"."+c6},wQ=$4("."+Z4,{"&":{position:"relative !important",boxSizing:"border-box","&.cm-focused":{outline:"1px dotted #212121"},display:"flex !important",flexDirection:"column"},".cm-scroller":{display:"flex !important",alignItems:"flex-start !important",fontFamily:"monospace",lineHeight:1.4,height:"100%",overflowX:"auto",position:"relative",zIndex:0,overflowAnchor:"none"},".cm-content":{margin:0,flexGrow:2,flexShrink:0,display:"block",whiteSpace:"pre",wordWrap:"normal",boxSizing:"border-box",minHeight:"100%",padding:"4px 0",outline:"none","&[contenteditable=true]":{WebkitUserModify:"read-write-plaintext-only"}},".cm-lineWrapping":{whiteSpace_fallback:"pre-wrap",whiteSpace:"break-spaces",wordBreak:"break-word",overflowWrap:"anywhere",flexShrink:1},"&light .cm-content":{caretColor:"black"},"&dark .cm-content":{caretColor:"white"},".cm-line":{display:"block",padding:"0 2px 0 6px"},".cm-layer":{position:"absolute",left:0,top:0,contain:"size style","& > *":{position:"absolute"}},"&light .cm-selectionBackground":{background:"#d9d9d9"},"&dark .cm-selectionBackground":{background:"#222"},"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#d7d4f0"},"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#233"},".cm-cursorLayer":{pointerEvents:"none"},"&.cm-focused > .cm-scroller > .cm-cursorLayer":{animation:"steps(1) cm-blink 1.2s infinite"},"@keyframes cm-blink":{"0%":{},"50%":{opacity:0},"100%":{}},"@keyframes cm-blink2":{"0%":{},"50%":{opacity:0},"100%":{}},".cm-cursor, .cm-dropCursor":{borderLeft:"1.2px solid black",marginLeft:"-0.6px",pointerEvents:"none"},".cm-cursor":{display:"none"},"&dark .cm-cursor":{borderLeftColor:"#444"},".cm-dropCursor":{position:"absolute"},"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor":{display:"block"},".cm-iso":{unicodeBidi:"isolate"},".cm-announced":{position:"fixed",top:"-10000px"},"@media print":{".cm-announced":{display:"none"}},"&light .cm-activeLine":{backgroundColor:"#cceeff44"},"&dark .cm-activeLine":{backgroundColor:"#99eeff33"},"&light .cm-specialChar":{color:"red"},"&dark .cm-specialChar":{color:"#f78"},".cm-gutters":{flexShrink:0,display:"flex",height:"100%",boxSizing:"border-box",insetInlineStart:0,zIndex:200},"&light .cm-gutters":{backgroundColor:"#f5f5f5",color:"#6c6c6c",borderRight:"1px solid #ddd"},"&dark .cm-gutters":{backgroundColor:"#333338",color:"#ccc"},".cm-gutter":{display:"flex !important",flexDirection:"column",flexShrink:0,boxSizing:"border-box",minHeight:"100%",overflow:"hidden"},".cm-gutterElement":{boxSizing:"border-box"},".cm-lineNumbers .cm-gutterElement":{padding:"0 3px 0 5px",minWidth:"20px",textAlign:"right",whiteSpace:"nowrap"},"&light .cm-activeLineGutter":{backgroundColor:"#e2f2ff"},"&dark .cm-activeLineGutter":{backgroundColor:"#222227"},".cm-panels":{boxSizing:"border-box",position:"sticky",left:0,right:0,zIndex:300},"&light .cm-panels":{backgroundColor:"#f5f5f5",color:"black"},"&light .cm-panels-top":{borderBottom:"1px solid #ddd"},"&light .cm-panels-bottom":{borderTop:"1px solid #ddd"},"&dark .cm-panels":{backgroundColor:"#333338",color:"white"},".cm-tab":{display:"inline-block",overflow:"hidden",verticalAlign:"bottom"},".cm-widgetBuffer":{verticalAlign:"text-top",height:"1em",width:0,display:"inline"},".cm-placeholder":{color:"#888",display:"inline-block",verticalAlign:"top"},".cm-highlightSpace:before":{content:"attr(data-display)",position:"absolute",pointerEvents:"none",color:"#888"},".cm-highlightTab":{backgroundImage:`url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,backgroundSize:"auto 100%",backgroundPosition:"right 90%",backgroundRepeat:"no-repeat"},".cm-trailingSpace":{backgroundColor:"#ff332255"},".cm-button":{verticalAlign:"middle",color:"inherit",fontSize:"70%",padding:".2em 1em",borderRadius:"1px"},"&light .cm-button":{backgroundImage:"linear-gradient(#eff1f5, #d9d9df)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#b4b4b4, #d0d3d6)"}},"&dark .cm-button":{backgroundImage:"linear-gradient(#393939, #111)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#111, #333)"}},".cm-textfield":{verticalAlign:"middle",color:"inherit",fontSize:"70%",border:"1px solid silver",padding:".2em .5em"},"&light .cm-textfield":{backgroundColor:"white"},"&dark .cm-textfield":{border:"1px solid #555",backgroundColor:"inherit"}},s6),vQ={childList:!0,characterData:!0,subtree:!0,attributes:!0,characterDataOldValue:!0},kZ=L.ie&&L.ie_version<=11;class i6{constructor(Z){if(this.view=Z,this.active=!1,this.editContext=null,this.selectionRange=new c0,this.selectionChanged=!1,this.delayedFlush=-1,this.resizeTimeout=-1,this.queue=[],this.delayedAndroidKey=null,this.flushingAndroidKey=-1,this.lastChange=0,this.scrollTargets=[],this.intersection=null,this.resizeScroll=null,this.intersecting=!1,this.gapIntersection=null,this.gaps=[],this.printQuery=null,this.parentCheck=-1,this.dom=Z.contentDOM,this.observer=new MutationObserver(($)=>{for(let J of $)this.queue.push(J);if((L.ie&&L.ie_version<=11||L.ios&&Z.composing)&&$.some((J)=>J.type=="childList"&&J.removedNodes.length||J.type=="characterData"&&J.oldValue.length>J.target.nodeValue.length))this.flushSoon();else this.flush()}),window.EditContext&&Z.constructor.EDIT_CONTEXT!==!1&&!(L.chrome&&L.chrome_version<126)){if(this.editContext=new n6(Z),Z.state.facet(O9))Z.contentDOM.editContext=this.editContext.editContext}if(kZ)this.onCharData=($)=>{this.queue.push({target:$.target,type:"characterData",oldValue:$.prevValue}),this.flushSoon()};if(this.onSelectionChange=this.onSelectionChange.bind(this),this.onResize=this.onResize.bind(this),this.onPrint=this.onPrint.bind(this),this.onScroll=this.onScroll.bind(this),window.matchMedia)this.printQuery=window.matchMedia("print");if(typeof ResizeObserver=="function")this.resizeScroll=new ResizeObserver(()=>{var $;if((($=this.view.docView)===null||$===void 0?void 0:$.lastUpdate)<Date.now()-75)this.onResize()}),this.resizeScroll.observe(Z.scrollDOM);if(this.addWindowListeners(this.win=Z.win),this.start(),typeof IntersectionObserver=="function")this.intersection=new IntersectionObserver(($)=>{if(this.parentCheck<0)this.parentCheck=setTimeout(this.listenForScroll.bind(this),1000);if($.length>0&&$[$.length-1].intersectionRatio>0!=this.intersecting){if(this.intersecting=!this.intersecting,this.intersecting!=this.view.inView)this.onScrollChanged(document.createEvent("Event"))}},{threshold:[0,0.001]}),this.intersection.observe(this.dom),this.gapIntersection=new IntersectionObserver(($)=>{if($.length>0&&$[$.length-1].intersectionRatio>0)this.onScrollChanged(document.createEvent("Event"))},{});this.listenForScroll(),this.readSelectionRange()}onScrollChanged(Z){if(this.view.inputState.runHandlers("scroll",Z),this.intersecting)this.view.measure()}onScroll(Z){if(this.intersecting)this.flush(!1);if(this.editContext)this.view.requestMeasure(this.editContext.measureReq);this.onScrollChanged(Z)}onResize(){if(this.resizeTimeout<0)this.resizeTimeout=setTimeout(()=>{this.resizeTimeout=-1,this.view.requestMeasure()},50)}onPrint(Z){if((Z.type=="change"||!Z.type)&&!Z.matches)return;this.view.viewState.printing=!0,this.view.measure(),setTimeout(()=>{this.view.viewState.printing=!1,this.view.requestMeasure()},500)}updateGaps(Z){if(this.gapIntersection&&(Z.length!=this.gaps.length||this.gaps.some(($,J)=>$!=Z[J]))){this.gapIntersection.disconnect();for(let $ of Z)this.gapIntersection.observe($);this.gaps=Z}}onSelectionChange(Z){let $=this.selectionChanged;if(!this.readSelectionRange()||this.delayedAndroidKey)return;let{view:J}=this,Q=this.selectionRange;if(J.state.facet(O9)?J.root.activeElement!=this.dom:!B7(J.dom,Q))return;let X=Q.anchorNode&&J.docView.nearest(Q.anchorNode);if(X&&X.ignoreEvent(Z)){if(!$)this.selectionChanged=!1;return}if((L.ie&&L.ie_version<=11||L.android&&L.chrome)&&!J.state.selection.main.empty&&Q.focusNode&&b5(Q.focusNode,Q.focusOffset,Q.anchorNode,Q.anchorOffset))this.flushSoon();else this.flush(!1)}readSelectionRange(){let{view:Z}=this,$=x5(Z.root);if(!$)return!1;let J=L.safari&&Z.root.nodeType==11&&B2(this.dom.ownerDocument)==this.dom&&hQ(this.view,$)||$;if(!J||this.selectionRange.eq(J))return!1;let Q=B7(this.dom,J);if(Q&&!this.selectionChanged&&Z.inputState.lastFocusTime>Date.now()-200&&Z.inputState.lastTouchTime<Date.now()-300&&y2(this.dom,J))return this.view.inputState.lastFocusTime=0,Z.docView.updateSelection(),!1;if(this.selectionRange.setRange(J),Q)this.selectionChanged=!0;return!0}setSelectionRange(Z,$){this.selectionRange.set(Z.node,Z.offset,$.node,$.offset),this.selectionChanged=!1}clearSelectionRange(){this.selectionRange.set(null,0,null,0)}listenForScroll(){this.parentCheck=-1;let Z=0,$=null;for(let J=this.dom;J;)if(J.nodeType==1){if(!$&&Z<this.scrollTargets.length&&this.scrollTargets[Z]==J)Z++;else if(!$)$=this.scrollTargets.slice(0,Z);if($)$.push(J);J=J.assignedSlot||J.parentNode}else if(J.nodeType==11)J=J.host;else break;if(Z<this.scrollTargets.length&&!$)$=this.scrollTargets.slice(0,Z);if($){for(let J of this.scrollTargets)J.removeEventListener("scroll",this.onScroll);for(let J of this.scrollTargets=$)J.addEventListener("scroll",this.onScroll)}}ignore(Z){if(!this.active)return Z();try{return this.stop(),Z()}finally{this.start(),this.clear()}}start(){if(this.active)return;if(this.observer.observe(this.dom,vQ),kZ)this.dom.addEventListener("DOMCharacterDataModified",this.onCharData);this.active=!0}stop(){if(!this.active)return;if(this.active=!1,this.observer.disconnect(),kZ)this.dom.removeEventListener("DOMCharacterDataModified",this.onCharData)}clear(){this.processRecords(),this.queue.length=0,this.selectionChanged=!1}delayAndroidKey(Z,$){var J;if(!this.delayedAndroidKey){let Q=()=>{let X=this.delayedAndroidKey;if(X){if(this.clearDelayedAndroidKey(),this.view.inputState.lastKeyCode=X.keyCode,this.view.inputState.lastKeyTime=Date.now(),!this.flush()&&X.force)$5(this.dom,X.key,X.keyCode)}};this.flushingAndroidKey=this.view.win.requestAnimationFrame(Q)}if(!this.delayedAndroidKey||Z=="Enter")this.delayedAndroidKey={key:Z,keyCode:$,force:this.lastChange<Date.now()-50||!!((J=this.delayedAndroidKey)===null||J===void 0?void 0:J.force)}}clearDelayedAndroidKey(){this.win.cancelAnimationFrame(this.flushingAndroidKey),this.delayedAndroidKey=null,this.flushingAndroidKey=-1}flushSoon(){if(this.delayedFlush<0)this.delayedFlush=this.view.win.requestAnimationFrame(()=>{this.delayedFlush=-1,this.flush()})}forceFlush(){if(this.delayedFlush>=0)this.view.win.cancelAnimationFrame(this.delayedFlush),this.delayedFlush=-1;this.flush()}pendingRecords(){for(let Z of this.observer.takeRecords())this.queue.push(Z);return this.queue}processRecords(){let Z=this.pendingRecords();if(Z.length)this.queue=[];let $=-1,J=-1,Q=!1;for(let X of Z){let K=this.readMutation(X);if(!K)continue;if(K.typeOver)Q=!0;if($==-1)({from:$,to:J}=K);else $=Math.min(K.from,$),J=Math.max(K.to,J)}return{from:$,to:J,typeOver:Q}}readChange(){let{from:Z,to:$,typeOver:J}=this.processRecords(),Q=this.selectionChanged&&B7(this.dom,this.selectionRange);if(Z<0&&!Q)return null;if(Z>-1)this.lastChange=Date.now();this.view.inputState.lastFocusTime=0,this.selectionChanged=!1;let X=new P6(this.view,Z,$,J);return this.view.docView.domChanged={newSel:X.newSel?X.newSel.main:null},X}flush(Z=!0){if(this.delayedFlush>=0||this.delayedAndroidKey)return!1;if(Z)this.readSelectionRange();let $=this.readChange();if(!$)return this.view.requestMeasure(),!1;let J=this.view.state,Q=C6(this.view,$);if(this.view.state==J&&($.domChanged||$.newSel&&!$.newSel.main.eq(this.view.state.selection.main)))this.view.update([]);return Q}readMutation(Z){let $=this.view.docView.nearest(Z.target);if(!$||$.ignoreMutation(Z))return null;if($.markDirty(Z.type=="attributes"),Z.type=="attributes")$.flags|=4;if(Z.type=="childList"){let J=w0($,Z.previousSibling||Z.target.previousSibling,-1),Q=w0($,Z.nextSibling||Z.target.nextSibling,1);return{from:J?$.posAfter(J):$.posAtStart,to:Q?$.posBefore(Q):$.posAtEnd,typeOver:!1}}else if(Z.type=="characterData")return{from:$.posAtStart,to:$.posAtEnd,typeOver:Z.target.nodeValue==Z.oldValue};else return null}setWindow(Z){if(Z!=this.win)this.removeWindowListeners(this.win),this.win=Z,this.addWindowListeners(this.win)}addWindowListeners(Z){if(Z.addEventListener("resize",this.onResize),this.printQuery)if(this.printQuery.addEventListener)this.printQuery.addEventListener("change",this.onPrint);else this.printQuery.addListener(this.onPrint);else Z.addEventListener("beforeprint",this.onPrint);Z.addEventListener("scroll",this.onScroll),Z.document.addEventListener("selectionchange",this.onSelectionChange)}removeWindowListeners(Z){if(Z.removeEventListener("scroll",this.onScroll),Z.removeEventListener("resize",this.onResize),this.printQuery)if(this.printQuery.removeEventListener)this.printQuery.removeEventListener("change",this.onPrint);else this.printQuery.removeListener(this.onPrint);else Z.removeEventListener("beforeprint",this.onPrint);Z.document.removeEventListener("selectionchange",this.onSelectionChange)}update(Z){if(this.editContext){if(this.editContext.update(Z),Z.startState.facet(O9)!=Z.state.facet(O9))Z.view.contentDOM.editContext=Z.state.facet(O9)?this.editContext.editContext:null}}destroy(){var Z,$,J;this.stop(),(Z=this.intersection)===null||Z===void 0||Z.disconnect(),($=this.gapIntersection)===null||$===void 0||$.disconnect(),(J=this.resizeScroll)===null||J===void 0||J.disconnect();for(let Q of this.scrollTargets)Q.removeEventListener("scroll",this.onScroll);if(this.removeWindowListeners(this.win),clearTimeout(this.parentCheck),clearTimeout(this.resizeTimeout),this.win.cancelAnimationFrame(this.delayedFlush),this.win.cancelAnimationFrame(this.flushingAndroidKey),this.editContext)this.view.contentDOM.editContext=null,this.editContext.destroy()}}class n6{constructor(Z){this.from=0,this.to=0,this.pendingContextChange=null,this.handlers=Object.create(null),this.resetRange(Z.state);let $=this.editContext=new window.EditContext({text:Z.state.doc.sliceString(this.from,this.to),selectionStart:this.toContextPos(Math.max(this.from,Math.min(this.to,Z.state.selection.main.anchor))),selectionEnd:this.toContextPos(Z.state.selection.main.head)});this.handlers.textupdate=(J)=>{let{anchor:Q}=Z.state.selection.main,X={from:this.toEditorPos(J.updateRangeStart),to:this.toEditorPos(J.updateRangeEnd),insert:b.of(J.text.split("\n"))};if(X.from==this.from&&Q<this.from)X.from=Q;else if(X.to==this.to&&Q>this.to)X.to=Q;if(X.from==X.to&&!X.insert.length)return;if(this.pendingContextChange=X,!Z.state.readOnly)_4(Z,X,R.single(this.toEditorPos(J.selectionStart),this.toEditorPos(J.selectionEnd)));if(this.pendingContextChange)this.revertPending(Z.state),this.setSelection(Z.state)},this.handlers.characterboundsupdate=(J)=>{let Q=[],X=null;for(let K=this.toEditorPos(J.rangeStart),Y=this.toEditorPos(J.rangeEnd);K<Y;K++){let U=Z.coordsForChar(K);X=U&&new DOMRect(U.left,U.top,U.right-U.left,U.bottom-U.top)||X||new DOMRect,Q.push(X)}$.updateCharacterBounds(J.rangeStart,Q)},this.handlers.textformatupdate=(J)=>{let Q=[];for(let X of J.getTextFormats()){let{underlineStyle:K,underlineThickness:Y}=X;if(K!="None"&&Y!="None"){let U=`text-decoration: underline ${K=="Dashed"?"dashed ":K=="Squiggle"?"wavy ":""}${Y=="Thin"?1:2}px`;Q.push(c.mark({attributes:{style:U}}).range(this.toEditorPos(X.rangeStart),this.toEditorPos(X.rangeEnd)))}}Z.dispatch({effects:D6.of(c.set(Q))})},this.handlers.compositionstart=()=>{if(Z.inputState.composing<0)Z.inputState.composing=0,Z.inputState.compositionFirstChange=!0},this.handlers.compositionend=()=>{Z.inputState.composing=-1,Z.inputState.compositionFirstChange=null};for(let J in this.handlers)$.addEventListener(J,this.handlers[J]);this.measureReq={read:(J)=>{this.editContext.updateControlBounds(J.contentDOM.getBoundingClientRect());let Q=x5(J.root);if(Q&&Q.rangeCount)this.editContext.updateSelectionBounds(Q.getRangeAt(0).getBoundingClientRect())}}}applyEdits(Z){let $=0,J=!1,Q=this.pendingContextChange;if(Z.changes.iterChanges((X,K,Y,U,q)=>{if(J)return;let W=q.length-(K-X);if(Q&&K>=Q.to)if(Q.from==X&&Q.to==K&&Q.insert.eq(q)){Q=this.pendingContextChange=null,$+=W,this.to+=W;return}else Q=null,this.revertPending(Z.state);if(X+=$,K+=$,K<=this.from)this.from+=W,this.to+=W;else if(X<this.to){if(X<this.from||K>this.to||this.to-this.from+q.length>30000){J=!0;return}this.editContext.updateText(this.toContextPos(X),this.toContextPos(K),q.toString()),this.to+=W}$+=W}),Q&&!J)this.revertPending(Z.state);return!J}update(Z){let $=this.pendingContextChange;if(!this.applyEdits(Z)||!this.rangeIsValid(Z.state))this.pendingContextChange=null,this.resetRange(Z.state),this.editContext.updateText(0,this.editContext.text.length,Z.state.doc.sliceString(this.from,this.to)),this.setSelection(Z.state);else if(Z.docChanged||Z.selectionSet||$)this.setSelection(Z.state);if(Z.geometryChanged||Z.docChanged||Z.selectionSet)Z.view.requestMeasure(this.measureReq)}resetRange(Z){let{head:$}=Z.selection.main;this.from=Math.max(0,$-1e4),this.to=Math.min(Z.doc.length,$+1e4)}revertPending(Z){let $=this.pendingContextChange;this.pendingContextChange=null,this.editContext.updateText(this.toContextPos($.from),this.toContextPos($.from+$.insert.length),Z.doc.sliceString($.from,$.to))}setSelection(Z){let{main:$}=Z.selection,J=this.toContextPos(Math.max(this.from,Math.min(this.to,$.anchor))),Q=this.toContextPos($.head);if(this.editContext.selectionStart!=J||this.editContext.selectionEnd!=Q)this.editContext.updateSelection(J,Q)}rangeIsValid(Z){let{head:$}=Z.selection.main;return!(this.from>0&&$-this.from<500||this.to<Z.doc.length&&this.to-$<500||this.to-this.from>30000)}toEditorPos(Z){return Z+this.from}toContextPos(Z){return Z-this.from}destroy(){for(let Z in this.handlers)this.editContext.removeEventListener(Z,this.handlers[Z])}}class E{get state(){return this.viewState.state}get viewport(){return this.viewState.viewport}get visibleRanges(){return this.viewState.visibleRanges}get inView(){return this.viewState.inView}get composing(){return this.inputState.composing>0}get compositionStarted(){return this.inputState.composing>=0}get root(){return this._root}get win(){return this.dom.ownerDocument.defaultView||window}constructor(Z={}){var $;if(this.plugins=[],this.pluginMap=new Map,this.editorAttrs={},this.contentAttrs={},this.bidiCache=[],this.destroyed=!1,this.updateState=2,this.measureScheduled=-1,this.measureRequests=[],this.contentDOM=document.createElement("div"),this.scrollDOM=document.createElement("div"),this.scrollDOM.tabIndex=-1,this.scrollDOM.className="cm-scroller",this.scrollDOM.appendChild(this.contentDOM),this.announceDOM=document.createElement("div"),this.announceDOM.className="cm-announced",this.announceDOM.setAttribute("aria-live","polite"),this.dom=document.createElement("div"),this.dom.appendChild(this.announceDOM),this.dom.appendChild(this.scrollDOM),Z.parent)Z.parent.appendChild(this.dom);let{dispatch:J}=Z;if(this.dispatchTransactions=Z.dispatchTransactions||J&&((Q)=>Q.forEach((X)=>J(X,this)))||((Q)=>this.update(Q)),this.dispatch=this.dispatch.bind(this),this._root=Z.root||T2(Z.parent)||document,this.viewState=new tZ(Z.state||m.create(Z)),Z.scrollTo&&Z.scrollTo.is(D7))this.viewState.scrollTarget=Z.scrollTo.value.clip(this.viewState.state);this.plugins=this.state.facet(P5).map((Q)=>new E7(Q));for(let Q of this.plugins)Q.update(this);if(this.observer=new i6(this),this.inputState=new T6(this),this.inputState.ensureHandlers(this.plugins),this.docView=new nZ(this),this.mountStyles(),this.updateAttrs(),this.updateState=0,this.requestMeasure(),($=document.fonts)===null||$===void 0?void 0:$.ready)document.fonts.ready.then(()=>this.requestMeasure())}dispatch(...Z){let $=Z.length==1&&Z[0]instanceof a?Z:Z.length==1&&Array.isArray(Z[0])?Z[0]:[this.state.update(...Z)];this.dispatchTransactions($,this)}update(Z){if(this.updateState!=0)throw new Error("Calls to EditorView.update are not allowed while an update is in progress");let $=!1,J=!1,Q,X=this.state;for(let z of Z){if(z.startState!=X)throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");X=z.state}if(this.destroyed){this.viewState.state=X;return}let K=this.hasFocus,Y=0,U=null;if(Z.some((z)=>z.annotation(v6)))this.inputState.notifiedFocused=K,Y=1;else if(K!=this.inputState.notifiedFocused){if(this.inputState.notifiedFocused=K,U=h6(X,K),!U)Y=1}let q=this.observer.delayedAndroidKey,W=null;if(q){if(this.observer.clearDelayedAndroidKey(),W=this.observer.readChange(),W&&!this.state.doc.eq(X.doc)||!this.state.selection.eq(X.selection))W=null}else this.observer.clear();if(X.facet(m.phrases)!=this.state.facet(m.phrases))return this.setState(X);Q=w7.create(this,X,Z),Q.flags|=Y;let G=this.viewState.scrollTarget;try{this.updateState=2;for(let z of Z){if(G)G=G.map(z.changes);if(z.scrollIntoView){let{main:j}=z.state.selection;G=new J5(j.empty?j:R.cursor(j.head,j.head>j.anchor?-1:1))}for(let j of z.effects)if(j.is(D7))G=j.value.clip(this.state)}if(this.viewState.update(Q,G),this.bidiCache=h7.update(this.bidiCache,Q.changes),!Q.empty)this.updatePlugins(Q),this.inputState.update(Q);if($=this.docView.update(Q),this.state.facet(C5)!=this.styleModules)this.mountStyles();J=this.updateAttrs(),this.showAnnouncements(Z),this.docView.updateSelection($,Z.some((z)=>z.isUserEvent("select.pointer")))}finally{this.updateState=0}if(Q.startState.facet(A7)!=Q.state.facet(A7))this.viewState.mustMeasureContent=!0;if($||J||G||this.viewState.mustEnforceCursorAssoc||this.viewState.mustMeasureContent)this.requestMeasure();if($)this.docViewUpdate();if(!Q.empty)for(let z of this.state.facet(iZ))try{z(Q)}catch(j){z3(this.state,j,"update listener")}if(U||W)Promise.resolve().then(()=>{if(U&&this.state==U.startState)this.dispatch(U);if(W){if(!C6(this,W)&&q.force)$5(this.contentDOM,q.key,q.keyCode)}})}setState(Z){if(this.updateState!=0)throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");if(this.destroyed){this.viewState.state=Z;return}this.updateState=2;let $=this.hasFocus;try{for(let J of this.plugins)J.destroy(this);this.viewState=new tZ(Z),this.plugins=Z.facet(P5).map((J)=>new E7(J)),this.pluginMap.clear();for(let J of this.plugins)J.update(this);this.docView.destroy(),this.docView=new nZ(this),this.inputState.ensureHandlers(this.plugins),this.mountStyles(),this.updateAttrs(),this.bidiCache=[]}finally{this.updateState=0}if($)this.focus();this.requestMeasure()}updatePlugins(Z){let $=Z.startState.facet(P5),J=Z.state.facet(P5);if($!=J){let Q=[];for(let X of J){let K=$.indexOf(X);if(K<0)Q.push(new E7(X));else{let Y=this.plugins[K];Y.mustUpdate=Z,Q.push(Y)}}for(let X of this.plugins)if(X.mustUpdate!=Z)X.destroy(this);this.plugins=Q,this.pluginMap.clear()}else for(let Q of this.plugins)Q.mustUpdate=Z;for(let Q=0;Q<this.plugins.length;Q++)this.plugins[Q].update(this);if($!=J)this.inputState.ensureHandlers(this.plugins)}docViewUpdate(){for(let Z of this.plugins){let $=Z.value;if($&&$.docViewUpdate)try{$.docViewUpdate(this)}catch(J){z3(this.state,J,"doc view update listener")}}}measure(Z=!0){if(this.destroyed)return;if(this.measureScheduled>-1)this.win.cancelAnimationFrame(this.measureScheduled);if(this.observer.delayedAndroidKey){this.measureScheduled=-1,this.requestMeasure();return}if(this.measureScheduled=0,Z)this.observer.forceFlush();let $=null,J=this.scrollDOM,Q=J.scrollTop*this.scaleY,{scrollAnchorPos:X,scrollAnchorHeight:K}=this.viewState;if(Math.abs(Q-this.viewState.scrollTop)>1)K=-1;this.viewState.scrollAnchorHeight=-1;try{for(let Y=0;;Y++){if(K<0)if(n0(J))X=-1,K=this.viewState.heightMap.height;else{let j=this.viewState.scrollAnchorAt(Q);X=j.from,K=j.top}this.updateState=1;let U=this.viewState.measure(this);if(!U&&!this.measureRequests.length&&this.viewState.scrollTarget==null)break;if(Y>5){console.warn(this.measureRequests.length?"Measure loop restarted more than 5 times":"Viewport failed to stabilize");break}let q=[];if(!(U&4))[this.measureRequests,q]=[q,this.measureRequests];let W=q.map((j)=>{try{return j.read(this)}catch(_){return z3(this.state,_),h0}}),G=w7.create(this,this.state,[]),z=!1;if(G.flags|=U,!$)$=G;else $.flags|=U;if(this.updateState=2,!G.empty){if(this.updatePlugins(G),this.inputState.update(G),this.updateAttrs(),z=this.docView.update(G),z)this.docViewUpdate()}for(let j=0;j<q.length;j++)if(W[j]!=h0)try{let _=q[j];if(_.write)_.write(W[j],this)}catch(_){z3(this.state,_)}if(z)this.docView.updateSelection(!0);if(!G.viewportChanged&&this.measureRequests.length==0){if(this.viewState.editorHeight)if(this.viewState.scrollTarget){this.docView.scrollIntoView(this.viewState.scrollTarget),this.viewState.scrollTarget=null,K=-1;continue}else{let _=(X<0?this.viewState.heightMap.height:this.viewState.lineBlockAt(X).top)-K;if(_>1||_<-1){Q=Q+_,J.scrollTop=Q/this.scaleY,K=-1;continue}}break}}}finally{this.updateState=0,this.measureScheduled=-1}if($&&!$.empty)for(let Y of this.state.facet(iZ))Y($)}get themeClasses(){return Z4+" "+(this.state.facet(eZ)?c6:d6)+" "+this.state.facet(A7)}updateAttrs(){let Z=m0(this,R6,{class:"cm-editor"+(this.hasFocus?" cm-focused ":" ")+this.themeClasses}),$={spellcheck:"false",autocorrect:"off",autocapitalize:"off",translate:"no",contenteditable:!this.state.facet(O9)?"false":"true",class:"cm-content",style:`${L.tabSize}: ${this.state.tabSize}`,role:"textbox","aria-multiline":"true"};if(this.state.readOnly)$["aria-readonly"]="true";m0(this,z4,$);let J=this.observer.ignore(()=>{let Q=lZ(this.contentDOM,this.contentAttrs,$),X=lZ(this.dom,this.editorAttrs,Z);return Q||X});return this.editorAttrs=Z,this.contentAttrs=$,J}showAnnouncements(Z){let $=!0;for(let J of Z)for(let Q of J.effects)if(Q.is(E.announce)){if($)this.announceDOM.textContent="";$=!1;let X=this.announceDOM.appendChild(document.createElement("div"));X.textContent=Q.value}}mountStyles(){this.styleModules=this.state.facet(C5);let Z=this.state.facet(E.cspNonce);m3.mount(this.root,this.styleModules.concat(wQ).reverse(),Z?{nonce:Z}:void 0)}readMeasured(){if(this.updateState==2)throw new Error("Reading the editor layout isn't allowed during an update");if(this.updateState==0&&this.measureScheduled>-1)this.measure(!1)}requestMeasure(Z){if(this.measureScheduled<0)this.measureScheduled=this.win.requestAnimationFrame(()=>this.measure());if(Z){if(this.measureRequests.indexOf(Z)>-1)return;if(Z.key!=null){for(let $=0;$<this.measureRequests.length;$++)if(this.measureRequests[$].key===Z.key){this.measureRequests[$]=Z;return}}this.measureRequests.push(Z)}}plugin(Z){let $=this.pluginMap.get(Z);if($===void 0||$&&$.spec!=Z)this.pluginMap.set(Z,$=this.plugins.find((J)=>J.spec==Z)||null);return $&&$.update(this).value}get documentTop(){return this.contentDOM.getBoundingClientRect().top+this.viewState.paddingTop}get documentPadding(){return{top:this.viewState.paddingTop,bottom:this.viewState.paddingBottom}}get scaleX(){return this.viewState.scaleX}get scaleY(){return this.viewState.scaleY}elementAtHeight(Z){return this.readMeasured(),this.viewState.elementAtHeight(Z)}lineBlockAtHeight(Z){return this.readMeasured(),this.viewState.lineBlockAtHeight(Z)}get viewportLineBlocks(){return this.viewState.viewportLines}lineBlockAt(Z){return this.viewState.lineBlockAt(Z)}get contentHeight(){return this.viewState.contentHeight}moveByChar(Z,$,J){return bZ(this,Z,I0(this,Z,$,J))}moveByGroup(Z,$){return bZ(this,Z,I0(this,Z,$,(J)=>UQ(this,Z.head,J)))}visualLineSide(Z,$){let J=this.bidiSpans(Z),Q=this.textDirectionAt(Z.from),X=J[$?J.length-1:0];return R.cursor(X.side($,Q)+Z.from,X.forward(!$,Q)?1:-1)}moveToLineBoundary(Z,$,J=!0){return YQ(this,Z,$,J)}moveVertically(Z,$,J){return bZ(this,Z,qQ(this,Z,$,J))}domAtPos(Z){return this.docView.domAtPos(Z)}posAtDOM(Z,$=0){return this.docView.posFromDOM(Z,$)}posAtCoords(Z,$=!0){return this.readMeasured(),B6(this,Z,$)}coordsAtPos(Z,$=1){this.readMeasured();let J=this.docView.coordsAt(Z,$);if(!J||J.left==J.right)return J;let Q=this.state.doc.lineAt(Z),X=this.bidiSpans(Q),K=X[K9.find(X,Z-Q.from,-1,$)];return m7(J,K.dir==i.LTR==$>0)}coordsForChar(Z){return this.readMeasured(),this.docView.coordsForChar(Z)}get defaultCharacterWidth(){return this.viewState.heightOracle.charWidth}get defaultLineHeight(){return this.viewState.heightOracle.lineHeight}get textDirection(){return this.viewState.defaultTextDirection}textDirectionAt(Z){if(!this.state.facet(F6)||Z<this.viewport.from||Z>this.viewport.to)return this.textDirection;return this.readMeasured(),this.docView.textDirectionAt(Z)}get lineWrapping(){return this.viewState.heightOracle.lineWrapping}bidiSpans(Z){if(Z.length>mQ)return q6(Z.length);let $=this.textDirectionAt(Z.from),J;for(let X of this.bidiCache)if(X.from==Z.from&&X.dir==$&&(X.fresh||U6(X.isolates,J=F0(this,Z))))return X.order;if(!J)J=F0(this,Z);let Q=l2(Z.text,$,J);return this.bidiCache.push(new h7(Z.from,Z.to,$,J,!0,Q)),Q}get hasFocus(){var Z;return(this.dom.ownerDocument.hasFocus()||L.safari&&((Z=this.inputState)===null||Z===void 0?void 0:Z.lastContextMenu)>Date.now()-30000)&&this.root.activeElement==this.contentDOM}focus(){this.observer.ignore(()=>{s0(this.contentDOM),this.docView.updateSelection()})}setRoot(Z){if(this._root!=Z)this._root=Z,this.observer.setWindow((Z.nodeType==9?Z:Z.ownerDocument).defaultView||window),this.mountStyles()}destroy(){if(this.root.activeElement==this.contentDOM)this.contentDOM.blur();for(let Z of this.plugins)Z.destroy(this);if(this.plugins=[],this.inputState.destroy(),this.docView.destroy(),this.dom.remove(),this.observer.destroy(),this.measureScheduled>-1)this.win.cancelAnimationFrame(this.measureScheduled);this.destroyed=!0}static scrollIntoView(Z,$={}){return D7.of(new J5(typeof Z=="number"?R.cursor(Z):Z,$.y,$.x,$.yMargin,$.xMargin))}scrollSnapshot(){let{scrollTop:Z,scrollLeft:$}=this.scrollDOM,J=this.viewState.scrollAnchorAt(Z);return D7.of(new J5(R.cursor(J.from),"start","start",J.top-Z,$,!0))}setTabFocusMode(Z){if(Z==null)this.inputState.tabFocusMode=this.inputState.tabFocusMode<0?0:-1;else if(typeof Z=="boolean")this.inputState.tabFocusMode=Z?0:-1;else if(this.inputState.tabFocusMode!=0)this.inputState.tabFocusMode=Date.now()+Z}static domEventHandlers(Z){return S3.define(()=>({}),{eventHandlers:Z})}static domEventObservers(Z){return S3.define(()=>({}),{eventObservers:Z})}static theme(Z,$){let J=m3.newName(),Q=[A7.of(J),C5.of($4(`.${J}`,Z))];if($&&$.dark)Q.push(eZ.of(!0));return Q}static baseTheme(Z){return Q9.lowest(C5.of($4("."+Z4,Z,s6)))}static findFromDOM(Z){var $;let J=Z.querySelector(".cm-content"),Q=J&&l.get(J)||l.get(Z);return(($=Q===null||Q===void 0?void 0:Q.rootView)===null||$===void 0?void 0:$.view)||null}}E.styleModule=C5;E.inputHandler=O6;E.clipboardInputFilter=G4;E.clipboardOutputFilter=W4;E.scrollHandler=N6;E.focusChangeEffect=H6;E.perLineTextDirection=F6;E.exceptionSink=_6;E.updateListener=iZ;E.editable=O9;E.mouseSelectionStyle=j6;E.dragMovesSelection=z6;E.clickAddsSelectionRange=W6;E.decorations=v5;E.outerDecorations=V6;E.atomicRanges=j4;E.bidiIsolatedRanges=I6;E.scrollMargins=M6;E.darkTheme=eZ;E.cspNonce=B.define({combine:(Z)=>Z.length?Z[0]:""});E.contentAttributes=z4;E.editorAttributes=R6;E.lineWrapping=E.contentAttributes.of({class:"cm-lineWrapping"});E.announce=v.define();var mQ=4096,h0={};class h7{constructor(Z,$,J,Q,X,K){this.from=Z,this.to=$,this.dir=J,this.isolates=Q,this.fresh=X,this.order=K}static update(Z,$){if($.empty&&!Z.some((X)=>X.fresh))return Z;let J=[],Q=Z.length?Z[Z.length-1].dir:i.LTR;for(let X=Math.max(0,Z.length-10);X<Z.length;X++){let K=Z[X];if(K.dir==Q&&!$.touchesRange(K.from,K.to))J.push(new h7($.mapPos(K.from,1),$.mapPos(K.to,-1),K.dir,K.isolates,!1,K.order))}return J}}var uQ=L.mac?"mac":L.windows?"win":L.linux?"linux":"key",gQ=Q9.default(E.domEventHandlers({keydown(Z,$){return cQ(lQ($.state),Z,$,"editor")}})),K5=B.define({enables:gQ}),u0=new WeakMap,H9=null,pQ=4000,J4=null;var sQ=!L.ios;var f0={".cm-line":{"& ::selection, &::selection":{backgroundColor:"transparent !important"}},".cm-content":{"& :focus":{caretColor:"initial !important","&::selection, & ::selection":{backgroundColor:"Highlight !important"}}}};if(sQ)f0[".cm-line"].caretColor=f0[".cm-content"].caretColor="transparent !important";var pq=/x/.unicode!=null?"gu":"g";var E5="-10000px";class a6{constructor(Z,$,J,Q){this.facet=$,this.createTooltipView=J,this.removeTooltipView=Q,this.input=Z.state.facet($),this.tooltips=this.input.filter((K)=>K);let X=null;this.tooltipViews=this.tooltips.map((K)=>X=J(K,X))}update(Z,$){var J;let Q=Z.state.facet(this.facet),X=Q.filter((U)=>U);if(Q===this.input){for(let U of this.tooltipViews)if(U.update)U.update(Z);return!1}let K=[],Y=$?[]:null;for(let U=0;U<X.length;U++){let q=X[U],W=-1;if(!q)continue;for(let G=0;G<this.tooltips.length;G++){let z=this.tooltips[G];if(z&&z.create==q.create)W=G}if(W<0){if(K[U]=this.createTooltipView(q,U?K[U-1]:null),Y)Y[U]=!!q.above}else{let G=K[U]=this.tooltipViews[W];if(Y)Y[U]=$[W];if(G.update)G.update(Z)}}for(let U of this.tooltipViews)if(K.indexOf(U)<0)this.removeTooltipView(U),(J=U.destroy)===null||J===void 0||J.call(U);if($)Y.forEach((U,q)=>$[q]=U),$.length=Y.length;return this.input=Q,this.tooltips=X,this.tooltipViews=K,!0}}var xZ=B.define({combine:(Z)=>{var $,J,Q;return{position:L.ios?"absolute":(($=Z.find((X)=>X.position))===null||$===void 0?void 0:$.position)||"fixed",parent:((J=Z.find((X)=>X.parent))===null||J===void 0?void 0:J.parent)||null,tooltipSpace:((Q=Z.find((X)=>X.tooltipSpace))===null||Q===void 0?void 0:Q.tooltipSpace)||iQ}}}),g0=new WeakMap,r6=S3.fromClass(class{constructor(Z){this.view=Z,this.above=[],this.inView=!0,this.madeAbsolute=!1,this.lastTransaction=0,this.measureTimeout=-1;let $=Z.state.facet(xZ);this.position=$.position,this.parent=$.parent,this.classes=Z.themeClasses,this.createContainer(),this.measureReq={read:this.readMeasure.bind(this),write:this.writeMeasure.bind(this),key:this},this.resizeObserver=typeof ResizeObserver=="function"?new ResizeObserver(()=>this.measureSoon()):null,this.manager=new a6(Z,N4,(J,Q)=>this.createTooltip(J,Q),(J)=>{if(this.resizeObserver)this.resizeObserver.unobserve(J.dom);J.dom.remove()}),this.above=this.manager.tooltips.map((J)=>!!J.above),this.intersectionObserver=typeof IntersectionObserver=="function"?new IntersectionObserver((J)=>{if(Date.now()>this.lastTransaction-50&&J.length>0&&J[J.length-1].intersectionRatio<1)this.measureSoon()},{threshold:[1]}):null,this.observeIntersection(),Z.win.addEventListener("resize",this.measureSoon=this.measureSoon.bind(this)),this.maybeMeasure()}createContainer(){if(this.parent)this.container=document.createElement("div"),this.container.style.position="relative",this.container.className=this.view.themeClasses,this.parent.appendChild(this.container);else this.container=this.view.dom}observeIntersection(){if(this.intersectionObserver){this.intersectionObserver.disconnect();for(let Z of this.manager.tooltipViews)this.intersectionObserver.observe(Z.dom)}}measureSoon(){if(this.measureTimeout<0)this.measureTimeout=setTimeout(()=>{this.measureTimeout=-1,this.maybeMeasure()},50)}update(Z){if(Z.transactions.length)this.lastTransaction=Date.now();let $=this.manager.update(Z,this.above);if($)this.observeIntersection();let J=$||Z.geometryChanged,Q=Z.state.facet(xZ);if(Q.position!=this.position&&!this.madeAbsolute){this.position=Q.position;for(let X of this.manager.tooltipViews)X.dom.style.position=this.position;J=!0}if(Q.parent!=this.parent){if(this.parent)this.container.remove();this.parent=Q.parent,this.createContainer();for(let X of this.manager.tooltipViews)this.container.appendChild(X.dom);J=!0}else if(this.parent&&this.view.themeClasses!=this.classes)this.classes=this.container.className=this.view.themeClasses;if(J)this.maybeMeasure()}createTooltip(Z,$){let J=Z.create(this.view),Q=$?$.dom:null;if(J.dom.classList.add("cm-tooltip"),Z.arrow&&!J.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")){let X=document.createElement("div");X.className="cm-tooltip-arrow",J.dom.appendChild(X)}if(J.dom.style.position=this.position,J.dom.style.top=E5,J.dom.style.left="0px",this.container.insertBefore(J.dom,Q),J.mount)J.mount(this.view);if(this.resizeObserver)this.resizeObserver.observe(J.dom);return J}destroy(){var Z,$,J;this.view.win.removeEventListener("resize",this.measureSoon);for(let Q of this.manager.tooltipViews)Q.dom.remove(),(Z=Q.destroy)===null||Z===void 0||Z.call(Q);if(this.parent)this.container.remove();($=this.resizeObserver)===null||$===void 0||$.disconnect(),(J=this.intersectionObserver)===null||J===void 0||J.disconnect(),clearTimeout(this.measureTimeout)}readMeasure(){let Z=this.view.dom.getBoundingClientRect(),$=1,J=1,Q=!1;if(this.position=="fixed"&&this.manager.tooltipViews.length){let{dom:X}=this.manager.tooltipViews[0];if(L.gecko)Q=X.offsetParent!=this.container.ownerDocument.body;else if(X.style.top==E5&&X.style.left=="0px"){let K=X.getBoundingClientRect();Q=Math.abs(K.top+1e4)>1||Math.abs(K.left)>1}}if(Q||this.position=="absolute")if(this.parent){let X=this.parent.getBoundingClientRect();if(X.width&&X.height)$=X.width/this.parent.offsetWidth,J=X.height/this.parent.offsetHeight}else({scaleX:$,scaleY:J}=this.view.viewState);return{editor:Z,parent:this.parent?this.container.getBoundingClientRect():Z,pos:this.manager.tooltips.map((X,K)=>{let Y=this.manager.tooltipViews[K];return Y.getCoords?Y.getCoords(X.pos):this.view.coordsAtPos(X.pos)}),size:this.manager.tooltipViews.map(({dom:X})=>X.getBoundingClientRect()),space:this.view.state.facet(xZ).tooltipSpace(this.view),scaleX:$,scaleY:J,makeAbsolute:Q}}writeMeasure(Z){var $;if(Z.makeAbsolute){this.madeAbsolute=!0,this.position="absolute";for(let U of this.manager.tooltipViews)U.dom.style.position="absolute"}let{editor:J,space:Q,scaleX:X,scaleY:K}=Z,Y=[];for(let U=0;U<this.manager.tooltips.length;U++){let q=this.manager.tooltips[U],W=this.manager.tooltipViews[U],{dom:G}=W,z=Z.pos[U],j=Z.size[U];if(!z||z.bottom<=Math.max(J.top,Q.top)||z.top>=Math.min(J.bottom,Q.bottom)||z.right<Math.max(J.left,Q.left)-0.1||z.left>Math.min(J.right,Q.right)+0.1){G.style.top=E5;continue}let _=q.arrow?W.dom.querySelector(".cm-tooltip-arrow"):null,H=_?7:0,F=j.right-j.left,N=($=g0.get(W))!==null&&$!==void 0?$:j.bottom-j.top,D=W.offset||aQ,M=this.view.textDirection==i.LTR,V=j.width>Q.right-Q.left?M?Q.left:Q.right-j.width:M?Math.max(Q.left,Math.min(z.left-(_?14:0)+D.x,Q.right-F)):Math.min(Math.max(Q.left,z.left-F+(_?14:0)-D.x),Q.right-F),I=this.above[U];if(!q.strictSide&&(I?z.top-(j.bottom-j.top)-D.y<Q.top:z.bottom+(j.bottom-j.top)+D.y>Q.bottom)&&I==Q.bottom-z.bottom>z.top-Q.top)I=this.above[U]=!I;let C=(I?z.top-Q.top:Q.bottom-z.bottom)-H;if(C<N&&W.resize!==!1){if(C<this.view.defaultLineHeight){G.style.top=E5;continue}g0.set(W,N),G.style.height=(N=C)/K+"px"}else if(G.style.height)G.style.height="";let S=I?z.top-N-H-D.y:z.bottom+H+D.y,T=V+F;if(W.overlap!==!0){for(let h of Y)if(h.left<T&&h.right>V&&h.top<S+N&&h.bottom>S)S=I?h.top-N-2-H:h.bottom+H+2}if(this.position=="absolute")G.style.top=(S-Z.parent.top)/K+"px",G.style.left=(V-Z.parent.left)/X+"px";else G.style.top=S/K+"px",G.style.left=V/X+"px";if(_){let h=z.left+(M?D.x:-D.x)-(V+14-7);_.style.left=h/X+"px"}if(W.overlap!==!0)Y.push({left:V,top:S,right:T,bottom:S+N});if(G.classList.toggle("cm-tooltip-above",I),G.classList.toggle("cm-tooltip-below",!I),W.positioned)W.positioned(Z.space)}}maybeMeasure(){if(this.manager.tooltips.length){if(this.view.inView)this.view.requestMeasure(this.measureReq);if(this.inView!=this.view.inView){if(this.inView=this.view.inView,!this.inView)for(let Z of this.manager.tooltipViews)Z.dom.style.top=E5}}}},{eventObservers:{scroll(){this.maybeMeasure()}}}),nQ=E.baseTheme({".cm-tooltip":{zIndex:100,boxSizing:"border-box"},"&light .cm-tooltip":{border:"1px solid #bbb",backgroundColor:"#f5f5f5"},"&light .cm-tooltip-section:not(:first-child)":{borderTop:"1px solid #bbb"},"&dark .cm-tooltip":{backgroundColor:"#333338",color:"white"},".cm-tooltip-arrow":{height:"7px",width:"14px",position:"absolute",zIndex:-1,overflow:"hidden","&:before, &:after":{content:"''",position:"absolute",width:0,height:0,borderLeft:"7px solid transparent",borderRight:"7px solid transparent"},".cm-tooltip-above &":{bottom:"-7px","&:before":{borderTop:"7px solid #bbb"},"&:after":{borderTop:"7px solid #f5f5f5",bottom:"1px"}},".cm-tooltip-below &":{top:"-7px","&:before":{borderBottom:"7px solid #bbb"},"&:after":{borderBottom:"7px solid #f5f5f5",top:"1px"}}},"&dark .cm-tooltip .cm-tooltip-arrow":{"&:before":{borderTopColor:"#333338",borderBottomColor:"#333338"},"&:after":{borderTopColor:"transparent",borderBottomColor:"transparent"}}}),aQ={x:0,y:0},N4=B.define({enables:[r6,nQ]});class G9 extends s3{compare(Z){return this==Z||this.constructor==Z.constructor&&this.eq(Z)}eq(Z){return!1}destroy(Z){}}G9.prototype.elementClass="";G9.prototype.toDOM=void 0;G9.prototype.mapMode=J3.TrackBefore;G9.prototype.startSide=G9.prototype.endSide=-1;G9.prototype.point=!0;var wZ=B.define(),rQ=B.define();var y7=B.define(),Q4=B.define({combine:(Z)=>Z.some(($)=>$)}),tQ=S3.fromClass(class{constructor(Z){this.view=Z,this.prevViewport=Z.viewport,this.dom=document.createElement("div"),this.dom.className="cm-gutters",this.dom.setAttribute("aria-hidden","true"),this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px",this.gutters=Z.state.facet(y7).map(($)=>new K4(Z,$));for(let $ of this.gutters)this.dom.appendChild($.dom);if(this.fixed=!Z.state.facet(Q4),this.fixed)this.dom.style.position="sticky";this.syncGutters(!1),Z.scrollDOM.insertBefore(this.dom,Z.contentDOM)}update(Z){if(this.updateGutters(Z)){let $=this.prevViewport,J=Z.view.viewport,Q=Math.min($.to,J.to)-Math.max($.from,J.from);this.syncGutters(Q<(J.to-J.from)*0.8)}if(Z.geometryChanged)this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px";if(this.view.state.facet(Q4)!=!this.fixed)this.fixed=!this.fixed,this.dom.style.position=this.fixed?"sticky":"";this.prevViewport=Z.view.viewport}syncGutters(Z){let $=this.dom.nextSibling;if(Z)this.dom.remove();let J=w.iter(this.view.state.facet(wZ),this.view.viewport.from),Q=[],X=this.gutters.map((K)=>new o6(K,this.view.viewport,-this.view.documentPadding.top));for(let K of this.view.viewportLineBlocks){if(Q.length)Q=[];if(Array.isArray(K.type)){let Y=!0;for(let U of K.type)if(U.type==T3.Text&&Y){X4(J,Q,U.from);for(let q of X)q.line(this.view,U,Q);Y=!1}else if(U.widget)for(let q of X)q.widget(this.view,U)}else if(K.type==T3.Text){X4(J,Q,K.from);for(let Y of X)Y.line(this.view,K,Q)}else if(K.widget)for(let Y of X)Y.widget(this.view,K)}for(let K of X)K.finish();if(Z)this.view.scrollDOM.insertBefore(this.dom,$)}updateGutters(Z){let $=Z.startState.facet(y7),J=Z.state.facet(y7),Q=Z.docChanged||Z.heightChanged||Z.viewportChanged||!w.eq(Z.startState.facet(wZ),Z.state.facet(wZ),Z.view.viewport.from,Z.view.viewport.to);if($==J){for(let X of this.gutters)if(X.update(Z))Q=!0}else{Q=!0;let X=[];for(let K of J){let Y=$.indexOf(K);if(Y<0)X.push(new K4(this.view,K));else this.gutters[Y].update(Z),X.push(this.gutters[Y])}for(let K of this.gutters)if(K.dom.remove(),X.indexOf(K)<0)K.destroy();for(let K of X)this.dom.appendChild(K.dom);this.gutters=X}return Q}destroy(){for(let Z of this.gutters)Z.destroy();this.dom.remove()}},{provide:(Z)=>E.scrollMargins.of(($)=>{let J=$.plugin(Z);if(!J||J.gutters.length==0||!J.fixed)return null;return $.textDirection==i.LTR?{left:J.dom.offsetWidth*$.scaleX}:{right:J.dom.offsetWidth*$.scaleX}})});class o6{constructor(Z,$,J){this.gutter=Z,this.height=J,this.i=0,this.cursor=w.iter(Z.markers,$.from)}addElement(Z,$,J){let{gutter:Q}=this,X=($.top-this.height)/Z.scaleY,K=$.height/Z.scaleY;if(this.i==Q.elements.length){let Y=new R4(Z,K,X,J);Q.elements.push(Y),Q.dom.appendChild(Y.dom)}else Q.elements[this.i].update(Z,K,X,J);this.height=$.bottom,this.i++}line(Z,$,J){let Q=[];if(X4(this.cursor,Q,$.from),J.length)Q=Q.concat(J);let X=this.gutter.config.lineMarker(Z,$,Q);if(X)Q.unshift(X);let K=this.gutter;if(Q.length==0&&!K.config.renderEmptyElements)return;this.addElement(Z,$,Q)}widget(Z,$){let J=this.gutter.config.widgetMarker(Z,$.widget,$),Q=J?[J]:null;for(let X of Z.state.facet(rQ)){let K=X(Z,$.widget,$);if(K)(Q||(Q=[])).push(K)}if(Q)this.addElement(Z,$,Q)}finish(){let Z=this.gutter;while(Z.elements.length>this.i){let $=Z.elements.pop();Z.dom.removeChild($.dom),$.destroy()}}}class K4{constructor(Z,$){this.view=Z,this.config=$,this.elements=[],this.spacer=null,this.dom=document.createElement("div"),this.dom.className="cm-gutter"+(this.config.class?" "+this.config.class:"");for(let J in $.domEventHandlers)this.dom.addEventListener(J,(Q)=>{let X=Q.target,K;if(X!=this.dom&&this.dom.contains(X)){while(X.parentNode!=this.dom)X=X.parentNode;let U=X.getBoundingClientRect();K=(U.top+U.bottom)/2}else K=Q.clientY;let Y=Z.lineBlockAtHeight(K-Z.documentTop);if($.domEventHandlers[J](Z,Y,Q))Q.preventDefault()});if(this.markers=l0($.markers(Z)),$.initialSpacer)this.spacer=new R4(Z,0,0,[$.initialSpacer(Z)]),this.dom.appendChild(this.spacer.dom),this.spacer.dom.style.cssText+="visibility: hidden; pointer-events: none"}update(Z){let $=this.markers;if(this.markers=l0(this.config.markers(Z.view)),this.spacer&&this.config.updateSpacer){let Q=this.config.updateSpacer(this.spacer.markers[0],Z);if(Q!=this.spacer.markers[0])this.spacer.update(Z.view,0,0,[Q])}let J=Z.view.viewport;return!w.eq(this.markers,$,J.from,J.to)||(this.config.lineMarkerChange?this.config.lineMarkerChange(Z):!1)}destroy(){for(let Z of this.elements)Z.destroy()}}class R4{constructor(Z,$,J,Q){this.height=-1,this.above=0,this.markers=[],this.dom=document.createElement("div"),this.dom.className="cm-gutterElement",this.update(Z,$,J,Q)}update(Z,$,J,Q){if(this.height!=$)this.height=$,this.dom.style.height=$+"px";if(this.above!=J)this.dom.style.marginTop=(this.above=J)?J+"px":"";if(!eQ(this.markers,Q))this.setMarkers(Z,Q)}setMarkers(Z,$){let J="cm-gutterElement",Q=this.dom.firstChild;for(let X=0,K=0;;){let Y=K,U=X<$.length?$[X++]:null,q=!1;if(U){let W=U.elementClass;if(W)J+=" "+W;for(let G=K;G<this.markers.length;G++)if(this.markers[G].compare(U)){Y=G,q=!0;break}}else Y=this.markers.length;while(K<Y){let W=this.markers[K++];if(W.toDOM){W.destroy(Q);let G=Q.nextSibling;Q.remove(),Q=G}}if(!U)break;if(U.toDOM)if(q)Q=Q.nextSibling;else this.dom.insertBefore(U.toDOM(Z),Q);if(q)K++}this.dom.className=J,this.markers=$}destroy(){this.setMarkers(null,[])}}var ZX=B.define(),$X=B.define(),Z5=B.define({combine(Z){return y9(Z,{formatNumber:String,domEventHandlers:{}},{domEventHandlers($,J){let Q=Object.assign({},$);for(let X in J){let K=Q[X],Y=J[X];Q[X]=K?(U,q,W)=>K(U,q,W)||Y(U,q,W):Y}return Q}})}});class S7 extends G9{constructor(Z){super();this.number=Z}eq(Z){return this.number==Z.number}toDOM(){return document.createTextNode(this.number)}}var JX=y7.compute([Z5],(Z)=>({class:"cm-lineNumbers",renderEmptyElements:!1,markers($){return $.state.facet(ZX)},lineMarker($,J,Q){if(Q.some((X)=>X.toDOM))return null;return new S7(vZ($,$.state.doc.lineAt(J.from).number))},widgetMarker:($,J,Q)=>{for(let X of $.state.facet($X)){let K=X($,J,Q);if(K)return K}return null},lineMarkerChange:($)=>$.startState.facet(Z5)!=$.state.facet(Z5),initialSpacer($){return new S7(vZ($,p0($.state.doc.lines)))},updateSpacer($,J){let Q=vZ(J.view,p0(J.view.state.doc.lines));return Q==$.number?$:new S7(Q)},domEventHandlers:Z.facet(Z5).domEventHandlers}));function U1(Z,$,J,Q){switch(Z){case-2:return J<$;case-1:return Q>=$&&J<$;case 0:return J<$&&Q>$;case 1:return J<=$&&Q>$;case 2:return Q>$;case 4:return!0}}function u5(Z,$,J,Q){var X;while(Z.from==Z.to||(J<1?Z.from>=$:Z.from>$)||(J>-1?Z.to<=$:Z.to<$)){let Y=!Q&&Z instanceof G3&&Z.index<0?null:Z.parent;if(!Y)return Z;Z=Y}let K=Q?0:u.IgnoreOverlays;if(Q){for(let Y=Z,U=Y.parent;U;Y=U,U=Y.parent)if(Y instanceof G3&&Y.index<0&&((X=U.enter($,J,K))===null||X===void 0?void 0:X.from)!=Y.from)Z=U}for(;;){let Y=Z.enter($,J,K);if(!Y)return Z;Z=Y}}function Z1(Z,$,J,Q){let X=Z.cursor(),K=[];if(!X.firstChild())return K;if(J!=null){for(let Y=!1;!Y;)if(Y=X.type.is(J),!X.nextSibling())return K}for(;;){if(Q!=null&&X.type.is(Q))return K;if(X.type.is($))K.push(X.node);if(!X.nextSibling())return Q==null?K:[]}}function V4(Z,$,J=$.length-1){for(let Q=Z.parent;J>=0;Q=Q.parent){if(!Q)return!1;if(!Q.type.isAnonymous){if($[J]&&$[J]!=Q.name)return!1;J--}}return!0}function G1(Z){if(!Z.length)return null;let $=0,J=Z[0];for(let K=1;K<Z.length;K++){let Y=Z[K];if(Y.from>J.from||Y.to<J.to)J=Y,$=K}let Q=J instanceof G3&&J.index<0?null:J.parent,X=Z.slice();if(Q)X[$]=Q;else X.splice($,1);return new W1(X,J)}function KX(Z,$,J){let Q=Z.resolveInner($,J),X=null;for(let K=Q instanceof G3?Q:Q.context.parent;K;K=K.parent)if(K.index<0){let Y=K.parent;(X||(X=[Q])).push(Y.resolve($,J)),K=Y}else{let Y=Y5.get(K.tree);if(Y&&Y.overlay&&Y.overlay[0].from<=$&&Y.overlay[Y.overlay.length-1].to>=$){let U=new G3(Y.tree,Y.overlay[0].from+K.from,-1,K);(X||(X=[Q])).push(u5(U,$,J,!1))}}return X?G1(X):Q}function E4(Z){return Z.children.some(($)=>$ instanceof N9||!$.type.isAnonymous||E4($))}function YX(Z){var $;let{buffer:J,nodeSet:Q,maxBufferLength:X=1024,reused:K=[],minRepeatType:Y=Q.types.length}=Z,U=Array.isArray(J)?new L4(J,J.length):J,q=Q.types,W=0,G=0;function z(C,S,T,h,p,f){let{id:k,start:x,end:r,size:n}=U,H3=G;while(n<0)if(U.next(),n==-1){let J9=K[k];T.push(J9),h.push(x-C);return}else if(n==-3){W=k;return}else if(n==-4){G=k;return}else throw new RangeError(`Unrecognized record size: ${n}`);let L9=q[k],d9,B9,y8=x-C;if(r-x<=X&&(B9=N(U.pos-S,p))){let J9=new Uint16Array(B9.size-B9.skip),E3=U.pos-B9.size,p3=J9.length;while(U.pos>E3)p3=D(B9.start,J9,p3);d9=new N9(J9,r-B9.start,Q),y8=B9.start-C}else{let J9=U.pos-n;U.next();let E3=[],p3=[],E9=k>=Y?k:-1,c9=0,q7=r;while(U.pos>J9)if(E9>=0&&U.id==E9&&U.size>=0){if(U.end<=q7-X)H(E3,p3,x,c9,U.end,q7,E9,H3),c9=E3.length,q7=U.end;U.next()}else if(f>2500)j(x,J9,E3,p3);else z(x,J9,E3,p3,E9,f+1);if(E9>=0&&c9>0&&c9<E3.length)H(E3,p3,x,c9,x,q7,E9,H3);if(E3.reverse(),p3.reverse(),E9>-1&&c9>0){let S8=_(L9);d9=P4(L9,E3,p3,0,E3.length,0,r-x,S8,S8)}else d9=F(L9,E3,p3,r-x,H3-r)}T.push(d9),h.push(y8)}function j(C,S,T,h){let p=[],f=0,k=-1;while(U.pos>S){let{id:x,start:r,end:n,size:H3}=U;if(H3>4)U.next();else if(k>-1&&r<k)break;else{if(k<0)k=n-X;p.push(x,r,n),f++,U.next()}}if(f){let x=new Uint16Array(f*4),r=p[p.length-2];for(let n=p.length-3,H3=0;n>=0;n-=3)x[H3++]=p[n],x[H3++]=p[n+1]-r,x[H3++]=p[n+2]-r,x[H3++]=H3;T.push(new N9(x,p[2]-r,Q)),h.push(r-C)}}function _(C){return(S,T,h)=>{let p=0,f=S.length-1,k,x;if(f>=0&&(k=S[f])instanceof s){if(!f&&k.type==C&&k.length==h)return k;if(x=k.prop(y.lookAhead))p=T[f]+k.length+x}return F(C,S,T,h,p)}}function H(C,S,T,h,p,f,k,x){let r=[],n=[];while(C.length>h)r.push(C.pop()),n.push(S.pop()+T-p);C.push(F(Q.types[k],r,n,f-p,x-f)),S.push(p-T)}function F(C,S,T,h,p=0,f){if(W){let k=[y.contextHash,W];f=f?[k].concat(f):[k]}if(p>25){let k=[y.lookAhead,p];f=f?[k].concat(f):[k]}return new s(C,S,T,h,f)}function N(C,S){let T=U.fork(),h=0,p=0,f=0,k=T.end-X,x={size:0,start:0,skip:0};Z:for(let r=T.pos-C;T.pos>r;){let n=T.size;if(T.id==S&&n>=0){x.size=h,x.start=p,x.skip=f,f+=4,h+=4,T.next();continue}let H3=T.pos-n;if(n<0||H3<r||T.start<k)break;let L9=T.id>=Y?4:0,d9=T.start;T.next();while(T.pos>H3){if(T.size<0)if(T.size==-3)L9+=4;else break Z;else if(T.id>=Y)L9+=4;T.next()}p=d9,h+=n,f+=L9}if(S<0||h==C)x.size=h,x.start=p,x.skip=f;return x.size>4?x:void 0}function D(C,S,T){let{id:h,start:p,end:f,size:k}=U;if(U.next(),k>=0&&h<Y){let x=T;if(k>4){let r=U.pos-(k-4);while(U.pos>r)T=D(C,S,T)}S[--T]=x,S[--T]=f-C,S[--T]=p-C,S[--T]=h}else if(k==-3)W=h;else if(k==-4)G=h;return T}let M=[],V=[];while(U.pos>0)z(Z.start||0,Z.bufferStart||0,M,V,-1,0);let I=($=Z.length)!==null&&$!==void 0?$:M.length?V[0]+M[0].length:0;return new s(q[Z.topID],M.reverse(),V.reverse(),I)}function l7(Z,$){if(!Z.isAnonymous||$ instanceof N9||$.type!=Z)return 1;let J=$1.get($);if(J==null){J=1;for(let Q of $.children){if(Q.type!=Z||!(Q instanceof s)){J=1;break}J+=l7(Z,Q)}$1.set($,J)}return J}function P4(Z,$,J,Q,X,K,Y,U,q){let W=0;for(let H=Q;H<X;H++)W+=l7(Z,$[H]);let G=Math.ceil(W*1.5/8),z=[],j=[];function _(H,F,N,D,M){for(let V=N;V<D;){let I=V,C=F[V],S=l7(Z,H[V]);V++;for(;V<D;V++){let T=l7(Z,H[V]);if(S+T>=G)break;S+=T}if(V==I+1){if(S>G){let T=H[I];_(T.children,T.positions,0,T.children.length,F[I]+M);continue}z.push(H[I])}else{let T=F[V-1]+H[V-1].length-C;z.push(P4(Z,H,F,I,V,C,T,null,q))}j.push(C+M-K)}}return _($,J,Q,X,0),(U||q)(z,j,Y)}function j1(Z){return($,J,Q,X)=>new O1($,Z,J,Q,X)}function J1(Z){if(!Z.length||Z.some(($)=>$.from>=$.to))throw new RangeError("Invalid inner parse ranges given: "+JSON.stringify(Z))}function UX(Z,$,J){for(let Q of Z){if(Q.from>=J)break;if(Q.to>$)return Q.from<=$&&Q.to>=J?2:1}return 0}function Q1(Z,$,J,Q,X,K){if($<J){let Y=Z.buffer[$+1];Q.push(Z.slice($,J,Y)),X.push(Y-K)}}function qX(Z){let{node:$}=Z,J=[],Q=$.context.buffer;do J.push(Z.index),Z.parent();while(!Z.tree);let X=Z.tree,K=X.children.indexOf(Q),Y=X.children[K],U=Y.buffer,q=[K];function W(G,z,j,_,H,F){let N=J[F],D=[],M=[];Q1(Y,G,N,D,M,_);let V=U[N+1],I=U[N+2];q.push(D.length);let C=F?W(N+4,U[N+3],Y.set.types[U[N]],V,I-V,F-1):$.toTree();return D.push(C),M.push(V-_),Q1(Y,U[N+3],z,D,M,_),new s(j,D,M,H)}X.children[K]=W(0,U.length,K3.none,0,Y.length,J.length-1);for(let G of q){let z=Z.tree.children[G],j=Z.tree.positions[G];Z.yield(new G3(z,j+Z.from,G,Z._tree))}}function X1(Z,$){let J=null,Q=$;for(let X=1,K=0;X<Z.length;X++){let Y=Z[X-1].to,U=Z[X].from;for(;K<Q.length;K++){let q=Q[K];if(q.from>=U)break;if(q.to<=Y)continue;if(!J)Q=J=$.slice();if(q.from<Y){if(J[K]=new M3(q.from,Y),q.to>U)J.splice(K+1,0,new M3(U,q.to))}else if(q.to>U)J[K--]=new M3(U,q.to);else J.splice(K--,1)}}return Q}function GX(Z,$,J,Q){let X=0,K=0,Y=!1,U=!1,q=-1e9,W=[];for(;;){let G=X==Z.length?1e9:Y?Z[X].to:Z[X].from,z=K==$.length?1e9:U?$[K].to:$[K].from;if(Y!=U){let j=Math.max(q,J),_=Math.min(G,z,Q);if(j<_)W.push(new M3(j,_))}if(q=Math.min(G,z),q==1e9)break;if(G==q)if(!Y)Y=!0;else Y=!1,X++;if(z==q)if(!U)U=!0;else U=!1,K++}return W}function K1(Z,$){let J=[];for(let{pos:Q,mount:X,frag:K}of Z){let Y=Q+(X.overlay?X.overlay[0].from:0),U=Y+X.tree.length,q=Math.max(K.from,Y),W=Math.min(K.to,U);if(X.overlay){let G=X.overlay.map((j)=>new M3(j.from+Q,j.to+Q)),z=GX($,G,q,W);for(let j=0,_=q;;j++){let H=j==z.length,F=H?W:z[j].from;if(F>_)J.push(new r3(_,F,X.tree,-Y,K.from>=_||K.openStart,K.to<=F||K.openEnd));if(H)break;_=z[j].to}}else J.push(new r3(q,W,X.tree,-Y,K.from>=Y||K.openStart,K.to<=U||K.openEnd))}return J}var Y1=1024,QX=0;class M3{constructor(Z,$){this.from=Z,this.to=$}}class y{constructor(Z={}){this.id=QX++,this.perNode=!!Z.perNode,this.deserialize=Z.deserialize||(()=>{throw new Error("This node type doesn't define a deserialize function")})}add(Z){if(this.perNode)throw new RangeError("Can't add per-node props to node types");if(typeof Z!="function")Z=K3.match(Z);return($)=>{let J=Z($);return J===void 0?null:[this,J]}}}y.closedBy=new y({deserialize:(Z)=>Z.split(" ")});y.openedBy=new y({deserialize:(Z)=>Z.split(" ")});y.group=new y({deserialize:(Z)=>Z.split(" ")});y.isolate=new y({deserialize:(Z)=>{if(Z&&Z!="rtl"&&Z!="ltr"&&Z!="auto")throw new RangeError("Invalid value for isolate: "+Z);return Z||"auto"}});y.contextHash=new y({perNode:!0});y.lookAhead=new y({perNode:!0});y.mounted=new y({perNode:!0});class Y5{constructor(Z,$,J){this.tree=Z,this.overlay=$,this.parser=J}static get(Z){return Z&&Z.props&&Z.props[y.mounted.id]}}var XX=Object.create(null);class K3{constructor(Z,$,J,Q=0){this.name=Z,this.props=$,this.id=J,this.flags=Q}static define(Z){let $=Z.props&&Z.props.length?Object.create(null):XX,J=(Z.top?1:0)|(Z.skipped?2:0)|(Z.error?4:0)|(Z.name==null?8:0),Q=new K3(Z.name||"",$,Z.id,J);if(Z.props)for(let X of Z.props){if(!Array.isArray(X))X=X(Q);if(X){if(X[0].perNode)throw new RangeError("Can't store a per-node prop on a node type");$[X[0].id]=X[1]}}return Q}prop(Z){return this.props[Z.id]}get isTop(){return(this.flags&1)>0}get isSkipped(){return(this.flags&2)>0}get isError(){return(this.flags&4)>0}get isAnonymous(){return(this.flags&8)>0}is(Z){if(typeof Z=="string"){if(this.name==Z)return!0;let $=this.prop(y.group);return $?$.indexOf(Z)>-1:!1}return this.id==Z}static match(Z){let $=Object.create(null);for(let J in Z)for(let Q of J.split(" "))$[Q]=Z[J];return(J)=>{for(let Q=J.prop(y.group),X=-1;X<(Q?Q.length:0);X++){let K=$[X<0?J.name:Q[X]];if(K)return K}}}}K3.none=new K3("",Object.create(null),0,8);class g5{constructor(Z){this.types=Z;for(let $=0;$<Z.length;$++)if(Z[$].id!=$)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...Z){let $=[];for(let J of this.types){let Q=null;for(let X of Z){let K=X(J);if(K){if(!Q)Q=Object.assign({},J.props);Q[K[0].id]=K[1]}}$.push(Q?new K3(J.name,Q,J.id,J.flags):J)}return new g5($)}}var g7=new WeakMap,e6=new WeakMap,u;(function(Z){Z[Z.ExcludeBuffers=1]="ExcludeBuffers",Z[Z.IncludeAnonymous=2]="IncludeAnonymous",Z[Z.IgnoreMounts=4]="IgnoreMounts",Z[Z.IgnoreOverlays=8]="IgnoreOverlays"})(u||(u={}));class s{constructor(Z,$,J,Q,X){if(this.type=Z,this.children=$,this.positions=J,this.length=Q,this.props=null,X&&X.length){this.props=Object.create(null);for(let[K,Y]of X)this.props[typeof K=="number"?K:K.id]=Y}}toString(){let Z=Y5.get(this);if(Z&&!Z.overlay)return Z.tree.toString();let $="";for(let J of this.children){let Q=J.toString();if(Q){if($)$+=",";$+=Q}}return!this.type.name?$:(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+($.length?"("+$+")":"")}cursor(Z=0){return new f5(this.topNode,Z)}cursorAt(Z,$=0,J=0){let Q=g7.get(this)||this.topNode,X=new f5(Q);return X.moveTo(Z,$),g7.set(this,X._tree),X}get topNode(){return new G3(this,0,0,null)}resolve(Z,$=0){let J=u5(g7.get(this)||this.topNode,Z,$,!1);return g7.set(this,J),J}resolveInner(Z,$=0){let J=u5(e6.get(this)||this.topNode,Z,$,!0);return e6.set(this,J),J}resolveStack(Z,$=0){return KX(this,Z,$)}iterate(Z){let{enter:$,leave:J,from:Q=0,to:X=this.length}=Z,K=Z.mode||0,Y=(K&u.IncludeAnonymous)>0;for(let U=this.cursor(K|u.IncludeAnonymous);;){let q=!1;if(U.from<=X&&U.to>=Q&&(!Y&&U.type.isAnonymous||$(U)!==!1)){if(U.firstChild())continue;q=!0}for(;;){if(q&&J&&(Y||!U.type.isAnonymous))J(U);if(U.nextSibling())break;if(!U.parent())return;q=!0}}}prop(Z){return!Z.perNode?this.type.prop(Z):this.props?this.props[Z.id]:void 0}get propValues(){let Z=[];if(this.props)for(let $ in this.props)Z.push([+$,this.props[$]]);return Z}balance(Z={}){return this.children.length<=8?this:P4(K3.none,this.children,this.positions,0,this.children.length,0,this.length,($,J,Q)=>new s(this.type,$,J,Q,this.propValues),Z.makeTree||(($,J,Q)=>new s(K3.none,$,J,Q)))}static build(Z){return YX(Z)}}s.empty=new s(K3.none,[],[],0);class L4{constructor(Z,$){this.buffer=Z,this.index=$}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new L4(this.buffer,this.index)}}class N9{constructor(Z,$,J){this.buffer=Z,this.length=$,this.set=J}get type(){return K3.none}toString(){let Z=[];for(let $=0;$<this.buffer.length;)Z.push(this.childString($)),$=this.buffer[$+3];return Z.join(",")}childString(Z){let $=this.buffer[Z],J=this.buffer[Z+3],Q=this.set.types[$],X=Q.name;if(/\W/.test(X)&&!Q.isError)X=JSON.stringify(X);if(Z+=4,J==Z)return X;let K=[];while(Z<J)K.push(this.childString(Z)),Z=this.buffer[Z+3];return X+"("+K.join(",")+")"}findChild(Z,$,J,Q,X){let{buffer:K}=this,Y=-1;for(let U=Z;U!=$;U=K[U+3])if(U1(X,Q,K[U+1],K[U+2])){if(Y=U,J>0)break}return Y}slice(Z,$,J){let Q=this.buffer,X=new Uint16Array($-Z),K=0;for(let Y=Z,U=0;Y<$;){X[U++]=Q[Y++],X[U++]=Q[Y++]-J;let q=X[U++]=Q[Y++]-J;X[U++]=Q[Y++]-Z,K=Math.max(K,q)}return new N9(X,K,this.set)}}class B4{cursor(Z=0){return new f5(this,Z)}getChild(Z,$=null,J=null){let Q=Z1(this,Z,$,J);return Q.length?Q[0]:null}getChildren(Z,$=null,J=null){return Z1(this,Z,$,J)}resolve(Z,$=0){return u5(this,Z,$,!1)}resolveInner(Z,$=0){return u5(this,Z,$,!0)}matchContext(Z){return V4(this,Z)}enterUnfinishedNodesBefore(Z){let $=this.childBefore(Z),J=this;while($){let Q=$.lastChild;if(!Q||Q.to!=$.to)break;if(Q.type.isError&&Q.from==Q.to)J=$,$=Q.prevSibling;else $=Q}return J}get node(){return this}get next(){return this.parent}}class G3 extends B4{constructor(Z,$,J,Q){super();this._tree=Z,this.from=$,this.index=J,this._parent=Q}get type(){return this._tree.type}get name(){return this._tree.type.name}get to(){return this.from+this._tree.length}nextChild(Z,$,J,Q,X=0){for(let K=this;;){for(let{children:Y,positions:U}=K._tree,q=$>0?Y.length:-1;Z!=q;Z+=$){let W=Y[Z],G=U[Z]+K.from;if(!U1(Q,J,G,G+W.length))continue;if(W instanceof N9){if(X&u.ExcludeBuffers)continue;let z=W.findChild(0,W.buffer.length,$,J-G,Q);if(z>-1)return new a3(new q1(K,W,Z,G),null,z)}else if(X&u.IncludeAnonymous||(!W.type.isAnonymous||E4(W))){let z;if(!(X&u.IgnoreMounts)&&(z=Y5.get(W))&&!z.overlay)return new G3(z.tree,G,Z,K);let j=new G3(W,G,Z,K);return X&u.IncludeAnonymous||!j.type.isAnonymous?j:j.nextChild($<0?W.children.length-1:0,$,J,Q)}}if(X&u.IncludeAnonymous||!K.type.isAnonymous)return null;if(K.index>=0)Z=K.index+$;else Z=$<0?-1:K._parent._tree.children.length;if(K=K._parent,!K)return null}}get firstChild(){return this.nextChild(0,1,0,4)}get lastChild(){return this.nextChild(this._tree.children.length-1,-1,0,4)}childAfter(Z){return this.nextChild(0,1,Z,2)}childBefore(Z){return this.nextChild(this._tree.children.length-1,-1,Z,-2)}enter(Z,$,J=0){let Q;if(!(J&u.IgnoreOverlays)&&(Q=Y5.get(this._tree))&&Q.overlay){let X=Z-this.from;for(let{from:K,to:Y}of Q.overlay)if(($>0?K<=X:K<X)&&($<0?Y>=X:Y>X))return new G3(Q.tree,Q.overlay[0].from+this.from,-1,this)}return this.nextChild(0,1,Z,$,J)}nextSignificantParent(){let Z=this;while(Z.type.isAnonymous&&Z._parent)Z=Z._parent;return Z}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index+1,1,0,4):null}get prevSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index-1,-1,0,4):null}get tree(){return this._tree}toTree(){return this._tree}toString(){return this._tree.toString()}}class q1{constructor(Z,$,J,Q){this.parent=Z,this.buffer=$,this.index=J,this.start=Q}}class a3 extends B4{get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}constructor(Z,$,J){super();this.context=Z,this._parent=$,this.index=J,this.type=Z.buffer.set.types[Z.buffer.buffer[J]]}child(Z,$,J){let{buffer:Q}=this.context,X=Q.findChild(this.index+4,Q.buffer[this.index+3],Z,$-this.context.start,J);return X<0?null:new a3(this.context,this,X)}get firstChild(){return this.child(1,0,4)}get lastChild(){return this.child(-1,0,4)}childAfter(Z){return this.child(1,Z,2)}childBefore(Z){return this.child(-1,Z,-2)}enter(Z,$,J=0){if(J&u.ExcludeBuffers)return null;let{buffer:Q}=this.context,X=Q.findChild(this.index+4,Q.buffer[this.index+3],$>0?1:-1,Z-this.context.start,$);return X<0?null:new a3(this.context,this,X)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(Z){return this._parent?null:this.context.parent.nextChild(this.context.index+Z,Z,0,4)}get nextSibling(){let{buffer:Z}=this.context,$=Z.buffer[this.index+3];if($<(this._parent?Z.buffer[this._parent.index+3]:Z.buffer.length))return new a3(this.context,this._parent,$);return this.externalSibling(1)}get prevSibling(){let{buffer:Z}=this.context,$=this._parent?this._parent.index+4:0;if(this.index==$)return this.externalSibling(-1);return new a3(this.context,this._parent,Z.findChild($,this.index,-1,0,4))}get tree(){return null}toTree(){let Z=[],$=[],{buffer:J}=this.context,Q=this.index+4,X=J.buffer[this.index+3];if(X>Q){let K=J.buffer[this.index+1];Z.push(J.slice(Q,X,K)),$.push(0)}return new s(this.type,Z,$,this.to-this.from)}toString(){return this.context.buffer.childString(this.index)}}class W1{constructor(Z,$){this.heads=Z,this.node=$}get next(){return G1(this.heads)}}class f5{get name(){return this.type.name}constructor(Z,$=0){if(this.mode=$,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,Z instanceof G3)this.yieldNode(Z);else{this._tree=Z.context.parent,this.buffer=Z.context;for(let J=Z._parent;J;J=J._parent)this.stack.unshift(J.index);this.bufferNode=Z,this.yieldBuf(Z.index)}}yieldNode(Z){if(!Z)return!1;return this._tree=Z,this.type=Z.type,this.from=Z.from,this.to=Z.to,!0}yieldBuf(Z,$){this.index=Z;let{start:J,buffer:Q}=this.buffer;return this.type=$||Q.set.types[Q.buffer[Z]],this.from=J+Q.buffer[Z+1],this.to=J+Q.buffer[Z+2],!0}yield(Z){if(!Z)return!1;if(Z instanceof G3)return this.buffer=null,this.yieldNode(Z);return this.buffer=Z.context,this.yieldBuf(Z.index,Z.type)}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enterChild(Z,$,J){if(!this.buffer)return this.yield(this._tree.nextChild(Z<0?this._tree._tree.children.length-1:0,Z,$,J,this.mode));let{buffer:Q}=this.buffer,X=Q.findChild(this.index+4,Q.buffer[this.index+3],Z,$-this.buffer.start,J);if(X<0)return!1;return this.stack.push(this.index),this.yieldBuf(X)}firstChild(){return this.enterChild(1,0,4)}lastChild(){return this.enterChild(-1,0,4)}childAfter(Z){return this.enterChild(1,Z,2)}childBefore(Z){return this.enterChild(-1,Z,-2)}enter(Z,$,J=this.mode){if(!this.buffer)return this.yield(this._tree.enter(Z,$,J));return J&u.ExcludeBuffers?!1:this.enterChild(1,Z,$)}parent(){if(!this.buffer)return this.yieldNode(this.mode&u.IncludeAnonymous?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let Z=this.mode&u.IncludeAnonymous?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(Z)}sibling(Z){if(!this.buffer)return!this._tree._parent?!1:this.yield(this._tree.index<0?null:this._tree._parent.nextChild(this._tree.index+Z,Z,0,4,this.mode));let{buffer:$}=this.buffer,J=this.stack.length-1;if(Z<0){let Q=J<0?0:this.stack[J]+4;if(this.index!=Q)return this.yieldBuf($.findChild(Q,this.index,-1,0,4))}else{let Q=$.buffer[this.index+3];if(Q<(J<0?$.buffer.length:$.buffer[this.stack[J]+3]))return this.yieldBuf(Q)}return J<0?this.yield(this.buffer.parent.nextChild(this.buffer.index+Z,Z,0,4,this.mode)):!1}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(Z){let $,J,{buffer:Q}=this;if(Q){if(Z>0){if(this.index<Q.buffer.buffer.length)return!1}else for(let X=0;X<this.index;X++)if(Q.buffer.buffer[X+3]<this.index)return!1;({index:$,parent:J}=Q)}else({index:$,_parent:J}=this._tree);for(;J;{index:$,_parent:J}=J)if($>-1)for(let X=$+Z,K=Z<0?-1:J._tree.children.length;X!=K;X+=Z){let Y=J._tree.children[X];if(this.mode&u.IncludeAnonymous||Y instanceof N9||!Y.type.isAnonymous||E4(Y))return!1}return!0}move(Z,$){if($&&this.enterChild(Z,0,4))return!0;for(;;){if(this.sibling(Z))return!0;if(this.atLastNode(Z)||!this.parent())return!1}}next(Z=!0){return this.move(1,Z)}prev(Z=!0){return this.move(-1,Z)}moveTo(Z,$=0){while(this.from==this.to||($<1?this.from>=Z:this.from>Z)||($>-1?this.to<=Z:this.to<Z))if(!this.parent())break;while(this.enterChild(1,Z,$));return this}get node(){if(!this.buffer)return this._tree;let Z=this.bufferNode,$=null,J=0;if(Z&&Z.context==this.buffer)Z:for(let Q=this.index,X=this.stack.length;X>=0;){for(let K=Z;K;K=K._parent)if(K.index==Q){if(Q==this.index)return K;$=K,J=X+1;break Z}Q=this.stack[--X]}for(let Q=J;Q<this.stack.length;Q++)$=new a3(this.buffer,$,this.stack[Q]);return this.bufferNode=new a3(this.buffer,$,this.index)}get tree(){return this.buffer?null:this._tree._tree}iterate(Z,$){for(let J=0;;){let Q=!1;if(this.type.isAnonymous||Z(this)!==!1){if(this.firstChild()){J++;continue}if(!this.type.isAnonymous)Q=!0}for(;;){if(Q&&$)$(this);if(Q=this.type.isAnonymous,this.nextSibling())break;if(!J)return;this.parent(),J--,Q=!0}}}matchContext(Z){if(!this.buffer)return V4(this.node,Z);let{buffer:$}=this.buffer,{types:J}=$.set;for(let Q=Z.length-1,X=this.stack.length-1;Q>=0;X--){if(X<0)return V4(this.node,Z,Q);let K=J[$.buffer[this.stack[X]]];if(!K.isAnonymous){if(Z[Q]&&Z[Q]!=K.name)return!1;Q--}}return!0}}var $1=new WeakMap;class l5{constructor(){this.map=new WeakMap}setBuffer(Z,$,J){let Q=this.map.get(Z);if(!Q)this.map.set(Z,Q=new Map);Q.set($,J)}getBuffer(Z,$){let J=this.map.get(Z);return J&&J.get($)}set(Z,$){if(Z instanceof a3)this.setBuffer(Z.context.buffer,Z.index,$);else if(Z instanceof G3)this.map.set(Z.tree,$)}get(Z){return Z instanceof a3?this.getBuffer(Z.context.buffer,Z.index):Z instanceof G3?this.map.get(Z.tree):void 0}cursorSet(Z,$){if(Z.buffer)this.setBuffer(Z.buffer.buffer,Z.index,$);else this.map.set(Z.tree,$)}cursorGet(Z){return Z.buffer?this.getBuffer(Z.buffer.buffer,Z.index):this.map.get(Z.tree)}}class r3{constructor(Z,$,J,Q,X=!1,K=!1){this.from=Z,this.to=$,this.tree=J,this.offset=Q,this.open=(X?1:0)|(K?2:0)}get openStart(){return(this.open&1)>0}get openEnd(){return(this.open&2)>0}static addTree(Z,$=[],J=!1){let Q=[new r3(0,Z.length,Z,0,!1,J)];for(let X of $)if(X.to>Z.length)Q.push(X);return Q}static applyChanges(Z,$,J=128){if(!$.length)return Z;let Q=[],X=1,K=Z.length?Z[0]:null;for(let Y=0,U=0,q=0;;Y++){let W=Y<$.length?$[Y]:null,G=W?W.fromA:1e9;if(G-U>=J)while(K&&K.from<G){let z=K;if(U>=z.from||G<=z.to||q){let j=Math.max(z.from,U)-q,_=Math.min(z.to,G)-q;z=j>=_?null:new r3(j,_,z.tree,z.offset+q,Y>0,!!W)}if(z)Q.push(z);if(K.to>G)break;K=X<Z.length?Z[X++]:null}if(!W)break;U=W.toA,q=W.toA-W.toB}return Q}}class p5{startParse(Z,$,J){if(typeof Z=="string")Z=new z1(Z);return J=!J?[new M3(0,Z.length)]:J.length?J.map((Q)=>new M3(Q.from,Q.to)):[new M3(0,0)],this.createParse(Z,$||[],J)}parse(Z,$,J){let Q=this.startParse(Z,$,J);for(;;){let X=Q.advance();if(X)return X}}}class z1{constructor(Z){this.string=Z}get length(){return this.string.length}chunk(Z){return this.string.slice(Z)}get lineChunks(){return!1}read(Z,$){return this.string.slice(Z,$)}}class I4{constructor(Z,$,J,Q,X){this.parser=Z,this.parse=$,this.overlay=J,this.target=Q,this.from=X}}class _1{constructor(Z,$,J,Q,X,K,Y){this.parser=Z,this.predicate=$,this.mounts=J,this.index=Q,this.start=X,this.target=K,this.prev=Y,this.depth=0,this.ranges=[]}}var M4=new y({perNode:!0});class O1{constructor(Z,$,J,Q,X){this.nest=$,this.input=J,this.fragments=Q,this.ranges=X,this.inner=[],this.innerDone=0,this.baseTree=null,this.stoppedAt=null,this.baseParse=Z}advance(){if(this.baseParse){let J=this.baseParse.advance();if(!J)return null;if(this.baseParse=null,this.baseTree=J,this.startInner(),this.stoppedAt!=null)for(let Q of this.inner)Q.parse.stopAt(this.stoppedAt)}if(this.innerDone==this.inner.length){let J=this.baseTree;if(this.stoppedAt!=null)J=new s(J.type,J.children,J.positions,J.length,J.propValues.concat([[M4,this.stoppedAt]]));return J}let Z=this.inner[this.innerDone],$=Z.parse.advance();if($){this.innerDone++;let J=Object.assign(Object.create(null),Z.target.props);J[y.mounted.id]=new Y5($,Z.overlay,Z.parser),Z.target.props=J}return null}get parsedPos(){if(this.baseParse)return 0;let Z=this.input.length;for(let $=this.innerDone;$<this.inner.length;$++)if(this.inner[$].from<Z)Z=Math.min(Z,this.inner[$].parse.parsedPos);return Z}stopAt(Z){if(this.stoppedAt=Z,this.baseParse)this.baseParse.stopAt(Z);else for(let $=this.innerDone;$<this.inner.length;$++)this.inner[$].parse.stopAt(Z)}startInner(){let Z=new H1(this.fragments),$=null,J=null,Q=new f5(new G3(this.baseTree,this.ranges[0].from,0,null),u.IncludeAnonymous|u.IgnoreMounts);Z:for(let X,K;;){let Y=!0,U;if(this.stoppedAt!=null&&Q.from>=this.stoppedAt)Y=!1;else if(Z.hasNode(Q)){if($){let q=$.mounts.find((W)=>W.frag.from<=Q.from&&W.frag.to>=Q.to&&W.mount.overlay);if(q)for(let W of q.mount.overlay){let G=W.from+q.pos,z=W.to+q.pos;if(G>=Q.from&&z<=Q.to&&!$.ranges.some((j)=>j.from<z&&j.to>G))$.ranges.push({from:G,to:z})}}Y=!1}else if(J&&(K=UX(J.ranges,Q.from,Q.to)))Y=K!=2;else if(!Q.type.isAnonymous&&(X=this.nest(Q,this.input))&&(Q.from<Q.to||!X.overlay)){if(!Q.tree)qX(Q);let q=Z.findMounts(Q.from,X.parser);if(typeof X.overlay=="function")$=new _1(X.parser,X.overlay,q,this.inner.length,Q.from,Q.tree,$);else{let W=X1(this.ranges,X.overlay||(Q.from<Q.to?[new M3(Q.from,Q.to)]:[]));if(W.length)J1(W);if(W.length||!X.overlay)this.inner.push(new I4(X.parser,W.length?X.parser.startParse(this.input,K1(q,W),W):X.parser.startParse(""),X.overlay?X.overlay.map((G)=>new M3(G.from-Q.from,G.to-Q.from)):null,Q.tree,W.length?W[0].from:Q.from));if(!X.overlay)Y=!1;else if(W.length)J={ranges:W,depth:0,prev:J}}}else if($&&(U=$.predicate(Q))){if(U===!0)U=new M3(Q.from,Q.to);if(U.from<U.to)$.ranges.push(U)}if(Y&&Q.firstChild()){if($)$.depth++;if(J)J.depth++}else for(;;){if(Q.nextSibling())break;if(!Q.parent())break Z;if($&&!--$.depth){let q=X1(this.ranges,$.ranges);if(q.length)J1(q),this.inner.splice($.index,0,new I4($.parser,$.parser.startParse(this.input,K1($.mounts,q),q),$.ranges.map((W)=>new M3(W.from-$.start,W.to-$.start)),$.target,q[0].from));$=$.prev}if(J&&!--J.depth)J=J.prev}}}}class A4{constructor(Z,$){this.offset=$,this.done=!1,this.cursor=Z.cursor(u.IncludeAnonymous|u.IgnoreMounts)}moveTo(Z){let{cursor:$}=this,J=Z-this.offset;while(!this.done&&$.from<J)if($.to>=Z&&$.enter(J,1,u.IgnoreOverlays|u.ExcludeBuffers));else if(!$.next(!1))this.done=!0}hasNode(Z){if(this.moveTo(Z.from),!this.done&&this.cursor.from+this.offset==Z.from&&this.cursor.tree)for(let $=this.cursor.tree;;){if($==Z.tree)return!0;if($.children.length&&$.positions[0]==0&&$.children[0]instanceof s)$=$.children[0];else break}return!1}}class H1{constructor(Z){var $;if(this.fragments=Z,this.curTo=0,this.fragI=0,Z.length){let J=this.curFrag=Z[0];this.curTo=($=J.tree.prop(M4))!==null&&$!==void 0?$:J.to,this.inner=new A4(J.tree,-J.offset)}else this.curFrag=this.inner=null}hasNode(Z){while(this.curFrag&&Z.from>=this.curTo)this.nextFrag();return this.curFrag&&this.curFrag.from<=Z.from&&this.curTo>=Z.to&&this.inner.hasNode(Z)}nextFrag(){var Z;if(this.fragI++,this.fragI==this.fragments.length)this.curFrag=this.inner=null;else{let $=this.curFrag=this.fragments[this.fragI];this.curTo=(Z=$.tree.prop(M4))!==null&&Z!==void 0?Z:$.to,this.inner=new A4($.tree,-$.offset)}}findMounts(Z,$){var J;let Q=[];if(this.inner){this.inner.cursor.moveTo(Z,1);for(let X=this.inner.cursor.node;X;X=X.parent){let K=(J=X.tree)===null||J===void 0?void 0:J.prop(y.mounted);if(K&&K.parser==$)for(let Y=this.fragI;Y<this.fragments.length;Y++){let U=this.fragments[Y];if(U.from>=X.to)break;if(U.tree==this.curFrag.tree)Q.push({frag:U,pos:X.from-U.offset,mount:K})}}}return Q}}function jX(Z,$){return Z.length==$.length&&Z.every((J,Q)=>J==$[Q])}function _X(Z){let $=[[]];for(let J=0;J<Z.length;J++)for(let Q=0,X=$.length;Q<X;Q++)$.push($[Q].concat(Z[J]));return $.sort((J,Q)=>Q.length-J.length)}function V9(Z){let $=Object.create(null);for(let J in Z){let Q=Z[J];if(!Array.isArray(Q))Q=[Q];for(let X of J.split(" "))if(X){let K=[],Y=2,U=X;for(let z=0;;){if(U=="..."&&z>0&&z+3==X.length){Y=1;break}let j=/^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(U);if(!j)throw new RangeError("Invalid path: "+X);if(K.push(j[0]=="*"?"":j[0][0]=='"'?JSON.parse(j[0]):j[0]),z+=j[0].length,z==X.length)break;let _=X[z++];if(z==X.length&&_=="!"){Y=0;break}if(_!="/")throw new RangeError("Invalid path: "+X);U=X.slice(z)}let q=K.length-1,W=K[q];if(!W)throw new RangeError("Invalid path: "+X);let G=new c5(Q,Y,q>0?K.slice(0,q):null);$[W]=G.sort($[W])}}return D1.add($)}function y4(Z,$){let J=Object.create(null);for(let K of Z)if(!Array.isArray(K.tag))J[K.tag.id]=K.class;else for(let Y of K.tag)J[Y.id]=K.class;let{scope:Q,all:X=null}=$||{};return{style:(K)=>{let Y=X;for(let U of K)for(let q of U.set){let W=J[q.id];if(W){Y=Y?Y+" "+W:W;break}}return Y},scope:Q}}function OX(Z,$){let J=null;for(let Q of Z){let X=Q.style($);if(X)J=J?J+" "+X:X}return J}function R1(Z,$,J,Q=0,X=Z.length){let K=new V1(Q,Array.isArray($)?$:[$],J);K.highlightRange(Z.cursor(),Q,X,"",K.highlighters),K.flush(X)}function HX(Z){let $=Z.type.prop(D1);while($&&$.context&&!Z.matchContext($.context))$=$.next;return $||null}var WX=0;class k3{constructor(Z,$,J,Q){this.name=Z,this.set=$,this.base=J,this.modified=Q,this.id=WX++}toString(){let{name:Z}=this;for(let $ of this.modified)if($.name)Z=`${$.name}(${Z})`;return Z}static define(Z,$){let J=typeof Z=="string"?Z:"?";if(Z instanceof k3)$=Z;if($===null||$===void 0?void 0:$.base)throw new Error("Can not derive from a modified tag");let Q=new k3(J,[],null,[]);if(Q.set.push(Q),$)for(let X of $.set)Q.set.push(X);return Q}static defineModifier(Z){let $=new s7(Z);return(J)=>{if(J.modified.indexOf($)>-1)return J;return s7.get(J.base||J,J.modified.concat($).sort((Q,X)=>Q.id-X.id))}}}var zX=0;class s7{constructor(Z){this.name=Z,this.instances=[],this.id=zX++}static get(Z,$){if(!$.length)return Z;let J=$[0].instances.find((Y)=>Y.base==Z&&jX($,Y.modified));if(J)return J;let Q=[],X=new k3(Z.name,Q,Z,$);for(let Y of $)Y.instances.push(X);let K=_X($);for(let Y of Z.set)if(!Y.modified.length)for(let U of K)Q.push(s7.get(Y,U));return X}}var D1=new y;class c5{constructor(Z,$,J,Q){this.tags=Z,this.mode=$,this.context=J,this.next=Q}get opaque(){return this.mode==0}get inherit(){return this.mode==1}sort(Z){if(!Z||Z.depth<this.depth)return this.next=Z,this;return Z.next=this.sort(Z.next),Z}get depth(){return this.context?this.context.length:0}}c5.empty=new c5([],2,null);class V1{constructor(Z,$,J){this.at=Z,this.highlighters=$,this.span=J,this.class=""}startSpan(Z,$){if($!=this.class){if(this.flush(Z),Z>this.at)this.at=Z;this.class=$}}flush(Z){if(Z>this.at&&this.class)this.span(this.at,Z,this.class)}highlightRange(Z,$,J,Q,X){let{type:K,from:Y,to:U}=Z;if(Y>=J||U<=$)return;if(K.isTop)X=this.highlighters.filter((j)=>!j.scope||j.scope(K));let q=Q,W=HX(Z)||c5.empty,G=OX(X,W.tags);if(G){if(q)q+=" ";if(q+=G,W.mode==1)Q+=(Q?" ":"")+G}if(this.startSpan(Math.max($,Y),q),W.opaque)return;let z=Z.tree&&Z.tree.prop(y.mounted);if(z&&z.overlay){let j=Z.node.enter(z.overlay[0].from+Y,1),_=this.highlighters.filter((F)=>!F.scope||F.scope(z.tree.type)),H=Z.firstChild();for(let F=0,N=Y;;F++){let D=F<z.overlay.length?z.overlay[F]:null,M=D?D.from+Y:U,V=Math.max($,N),I=Math.min(J,M);if(V<I&&H){while(Z.from<I)if(this.highlightRange(Z,V,I,Q,X),this.startSpan(Math.min(I,Z.to),q),Z.to>=M||!Z.nextSibling())break}if(!D||M>J)break;if(N=D.to+Y,N>$)this.highlightRange(j.cursor(),Math.max($,D.from+Y),Math.min(J,N),"",_),this.startSpan(Math.min(J,N),q)}if(H)Z.parent()}else if(Z.firstChild()){if(z)Q="";do{if(Z.to<=$)continue;if(Z.from>=J)break;this.highlightRange(Z,$,J,Q,X),this.startSpan(Math.min(J,Z.to),q)}while(Z.nextSibling());Z.parent()}}}var A=k3.define,p7=A(),D9=A(),F1=A(D9),N1=A(D9),R9=A(),d7=A(R9),C4=A(R9),e3=A(),m9=A(e3),o3=A(),t3=A(),T4=A(),d5=A(T4),c7=A(),O={comment:p7,lineComment:A(p7),blockComment:A(p7),docComment:A(p7),name:D9,variableName:A(D9),typeName:F1,tagName:A(F1),propertyName:N1,attributeName:A(N1),className:A(D9),labelName:A(D9),namespace:A(D9),macroName:A(D9),literal:R9,string:d7,docString:A(d7),character:A(d7),attributeValue:A(d7),number:C4,integer:A(C4),float:A(C4),bool:A(R9),regexp:A(R9),escape:A(R9),color:A(R9),url:A(R9),keyword:o3,self:A(o3),null:A(o3),atom:A(o3),unit:A(o3),modifier:A(o3),operatorKeyword:A(o3),controlKeyword:A(o3),definitionKeyword:A(o3),moduleKeyword:A(o3),operator:t3,derefOperator:A(t3),arithmeticOperator:A(t3),logicOperator:A(t3),bitwiseOperator:A(t3),compareOperator:A(t3),updateOperator:A(t3),definitionOperator:A(t3),typeOperator:A(t3),controlOperator:A(t3),punctuation:T4,separator:A(T4),bracket:d5,angleBracket:A(d5),squareBracket:A(d5),paren:A(d5),brace:A(d5),content:e3,heading:m9,heading1:A(m9),heading2:A(m9),heading3:A(m9),heading4:A(m9),heading5:A(m9),heading6:A(m9),contentSeparator:A(e3),list:A(e3),quote:A(e3),emphasis:A(e3),strong:A(e3),link:A(e3),monospace:A(e3),strikethrough:A(e3),inserted:A(),deleted:A(),changed:A(),invalid:A(),meta:c7,documentMeta:A(c7),annotation:A(c7),processingInstruction:A(c7),definition:k3.defineModifier("definition"),constant:k3.defineModifier("constant"),function:k3.defineModifier("function"),standard:k3.defineModifier("standard"),local:k3.defineModifier("local"),special:k3.defineModifier("special")};for(let Z in O){let $=O[Z];if($ instanceof k3)$.name=Z}var aq=y4([{tag:O.link,class:"tok-link"},{tag:O.heading,class:"tok-heading"},{tag:O.emphasis,class:"tok-emphasis"},{tag:O.strong,class:"tok-strong"},{tag:O.keyword,class:"tok-keyword"},{tag:O.atom,class:"tok-atom"},{tag:O.bool,class:"tok-bool"},{tag:O.url,class:"tok-url"},{tag:O.labelName,class:"tok-labelName"},{tag:O.inserted,class:"tok-inserted"},{tag:O.deleted,class:"tok-deleted"},{tag:O.literal,class:"tok-literal"},{tag:O.string,class:"tok-string"},{tag:O.number,class:"tok-number"},{tag:[O.regexp,O.escape,O.special(O.string)],class:"tok-string2"},{tag:O.variableName,class:"tok-variableName"},{tag:O.local(O.variableName),class:"tok-variableName tok-local"},{tag:O.definition(O.variableName),class:"tok-variableName tok-definition"},{tag:O.special(O.variableName),class:"tok-variableName2"},{tag:O.definition(O.propertyName),class:"tok-propertyName tok-definition"},{tag:O.typeName,class:"tok-typeName"},{tag:O.namespace,class:"tok-namespace"},{tag:O.className,class:"tok-className"},{tag:O.macroName,class:"tok-macroName"},{tag:O.propertyName,class:"tok-propertyName"},{tag:O.operator,class:"tok-operator"},{tag:O.comment,class:"tok-comment"},{tag:O.meta,class:"tok-meta"},{tag:O.invalid,class:"tok-invalid"},{tag:O.punctuation,class:"tok-punctuation"}]);function m4(Z){return B.define({combine:Z?($)=>$.concat(Z):void 0})}function I1(Z,$,J){let Q=Z.facet(G5),X=o(Z).topNode;if(!Q||Q.allowsNesting){for(let K=X;K;K=K.enter($,J,u.ExcludeBuffers))if(K.type.isTop)X=K}return X}function o(Z){let $=Z.field(x3.state,!1);return $?$.tree:s.empty}function M1(Z,$,J){return r3.applyChanges(Z,[{fromA:$,toA:J,fromB:$,toB:J}])}function i5(Z){let $=Z.facet(W5);return $.charCodeAt(0)==9?Z.tabSize*$.length:$.length}function n5(Z,$){let J="",Q=Z.tabSize,X=Z.facet(W5)[0];if(X=="\t"){while($>=Q)J+="\t",$-=Q;X=" "}for(let K=0;K<$;K++)J+=X;return J}function u4(Z,$){if(Z instanceof m)Z=new z5(Z);for(let Q of Z.state.facet(NX)){let X=Q(Z,$);if(X!==void 0)return X}let J=o(Z.state);return J.length>=$?DX(Z,J,$):null}function DX(Z,$,J){let Q=$.resolveStack(J),X=Q.node.enterUnfinishedNodesBefore(J);if(X!=Q.node){let K=[];for(let Y=X;Y!=Q.node;Y=Y.parent)K.push(Y);for(let Y=K.length-1;Y>=0;Y--)Q={node:K[Y],next:Q}}return C1(Q,Z,J)}function C1(Z,$,J){for(let Q=Z;Q;Q=Q.next){let X=VX(Q.node);if(X)return X(f4.create($,J,Q))}return 0}function RX(Z){return Z.pos==Z.options.simulateBreak&&Z.options.simulateDoubleBreak}function VX(Z){let $=Z.type.prop(f9);if($)return $;let J=Z.firstChild,Q;if(J&&(Q=J.type.prop(y.closedBy))){let X=Z.lastChild,K=X&&Q.indexOf(X.name)>-1;return(Y)=>y1(Y,!0,1,void 0,K&&!RX(Y)?X.from:void 0)}return Z.parent==null?IX:null}function IX(){return 0}function MX(Z,$){for(let J=$;J;J=J.parent)if(Z==J)return!0;return!1}function AX(Z){let $=Z.node,J=$.childAfter($.from),Q=$.lastChild;if(!J)return null;let X=Z.options.simulateBreak,K=Z.state.doc.lineAt(J.from),Y=X==null||X<=K.from?K.to:Math.min(K.to,X);for(let U=J.to;;){let q=$.childAfter(U);if(!q||q==Q)return null;if(!q.type.isSkipped)return q.from<Y?J:null;U=q.to}}function T1({closing:Z,align:$=!0,units:J=1}){return(Q)=>y1(Q,$,J,Z)}function y1(Z,$,J,Q,X){let K=Z.textAfter,Y=K.match(/^\s*/)[0].length,U=Q&&K.slice(Y,Y+Q.length)==Q||X==Z.pos+Y,q=$?AX(Z):null;if(q)return U?Z.column(q.from):Z.column(q.to);return Z.baseIndent+(U?0:Z.unit*J)}function j5({except:Z,units:$=1}={}){return(J)=>{let Q=Z&&Z.test(J.textAfter);return J.baseIndent+(Q?0:$*J.unit)}}function a7(Z){let{firstChild:$,lastChild:J}=Z;return $&&$.to<J.from?{from:$.to,to:J.type.isError?Z.to:J.from}:null}function k4(Z){let $=Z.facet(w4);return $.length?$:Z.facet(b1)}function k1(Z,$){let J=[LX],Q;if(Z instanceof O5){if(Z.module)J.push(E.styleModule.of(Z.module));Q=Z.themeType}if($===null||$===void 0?void 0:$.fallback)J.push(b1.of(Z));else if(Q)J.push(w4.computeN([E.darkTheme],(X)=>{return X.facet(E.darkTheme)==(Q=="dark")?[Z]:[]}));else J.push(w4.of(Z));return J}function v4(Z,$,J){let Q=Z.prop($<0?y.openedBy:y.closedBy);if(Q)return Q;if(Z.name.length==1){let X=J.indexOf(Z.name);if(X>-1&&X%2==($<0?1:0))return[J[X+$]]}return null}function h4(Z){let $=Z.type.prop(g4);return $?$(Z.node):Z}function g9(Z,$,J,Q={}){let X=Q.maxScanDistance||BX,K=Q.brackets||EX,Y=o(Z),U=Y.resolveInner($,J);for(let q=U;q;q=q.parent){let W=v4(q.type,J,K);if(W&&q.from<q.to){let G=h4(q);if(G&&(J>0?$>=G.from&&$<G.to:$>G.from&&$<=G.to))return PX(Z,$,J,q,G,W,K)}}return CX(Z,$,J,Y,U.type,X,K)}function PX(Z,$,J,Q,X,K,Y){let U=Q.parent,q={from:X.from,to:X.to},W=0,G=U===null||U===void 0?void 0:U.cursor();if(G&&(J<0?G.childBefore(Q.from):G.childAfter(Q.to)))do if(J<0?G.to<=Q.from:G.from>=Q.to){if(W==0&&K.indexOf(G.type.name)>-1&&G.from<G.to){let z=h4(G);return{start:q,end:z?{from:z.from,to:z.to}:void 0,matched:!0}}else if(v4(G.type,J,Y))W++;else if(v4(G.type,-J,Y)){if(W==0){let z=h4(G);return{start:q,end:z&&z.from<z.to?{from:z.from,to:z.to}:void 0,matched:!1}}W--}}while(J<0?G.prevSibling():G.nextSibling());return{start:q,matched:!1}}function CX(Z,$,J,Q,X,K,Y){let U=J<0?Z.sliceDoc($-1,$):Z.sliceDoc($,$+1),q=Y.indexOf(U);if(q<0||q%2==0!=J>0)return null;let W={from:J<0?$-1:$,to:J>0?$+1:$},G=Z.doc.iterRange($,J>0?Z.doc.length:0),z=0;for(let j=0;!G.next().done&&j<=K;){let _=G.value;if(J<0)j+=_.length;let H=$+j*J;for(let F=J>0?0:_.length-1,N=J>0?_.length:-1;F!=N;F+=J){let D=Y.indexOf(_[F]);if(D<0||Q.resolveInner(H+F,1).type!=X)continue;if(D%2==0==J>0)z++;else if(z==1)return{start:W,end:{from:H+F,to:H+F+1},matched:D>>1==q>>1};else z--}if(J>0)j+=_.length}return G.done?{start:W,matched:!1}:null}function x4(Z,$){if(L1.indexOf(Z)>-1)return;L1.push(Z),console.warn($)}function SX(Z,$){let J=[];for(let U of $.split(" ")){let q=[];for(let W of U.split(".")){let G=Z[W]||O[W];if(!G)x4(W,`Unknown highlighting tag ${W}`);else if(typeof G=="function")if(!q.length)x4(W,`Modifier ${W} used at start of tag`);else q=q.map(G);else if(q.length)x4(W,`Tag ${W} used as modifier`);else q=Array.isArray(G)?G:[G]}for(let W of q)J.push(W)}if(!J.length)return 0;let Q=$.replace(/ /g,"_"),X=Q+" "+J.map((U)=>U.id),K=B1[X];if(K)return K.id;let Y=B1[X]=K3.define({id:A1.length,name:Q,props:[V9({[Q]:J})]});return A1.push(Y),Y.id}var S4,U5=new y,n7=new y;class x3{constructor(Z,$,J=[],Q=""){if(this.data=Z,this.name=Q,!m.prototype.hasOwnProperty("tree"))Object.defineProperty(m.prototype,"tree",{get(){return o(this)}});this.parser=$,this.extension=[G5.of(this),m.languageData.of((X,K,Y)=>{let U=I1(X,K,Y),q=U.type.prop(U5);if(!q)return[];let W=X.facet(q),G=U.type.prop(n7);if(G){let z=U.resolve(K-U.from,Y);for(let j of G)if(j.test(z,X)){let _=X.facet(j.facet);return j.type=="replace"?_:_.concat(W)}}return W})].concat(J)}isActiveAt(Z,$,J=-1){return I1(Z,$,J).type.prop(U5)==this.data}findRegions(Z){let $=Z.facet(G5);if(($===null||$===void 0?void 0:$.data)==this.data)return[{from:0,to:Z.doc.length}];if(!$||!$.allowsNesting)return[];let J=[],Q=(X,K)=>{if(X.prop(U5)==this.data){J.push({from:K,to:K+X.length});return}let Y=X.prop(y.mounted);if(Y){if(Y.tree.prop(U5)==this.data){if(Y.overlay)for(let U of Y.overlay)J.push({from:U.from+K,to:U.to+K});else J.push({from:K,to:K+X.length});return}else if(Y.overlay){let U=J.length;if(Q(Y.tree,Y.overlay[0].from+K),J.length>U)return}}for(let U=0;U<X.children.length;U++){let q=X.children[U];if(q instanceof s)Q(q,X.positions[U]+K)}};return Q(o(Z),0),J}get allowsNesting(){return!0}}x3.setState=v.define();class W9 extends x3{constructor(Z,$,J){super(Z,$,[],J);this.parser=$}static define(Z){let $=m4(Z.languageData);return new W9($,Z.parser.configure({props:[U5.add((J)=>J.isTop?$:void 0)]}),Z.name)}configure(Z,$){return new W9(this.data,this.parser.configure(Z),$||this.name)}get allowsNesting(){return this.parser.hasWrappers()}}class E1{constructor(Z){this.doc=Z,this.cursorPos=0,this.string="",this.cursor=Z.iter()}get length(){return this.doc.length}syncTo(Z){return this.string=this.cursor.next(Z-this.cursorPos).value,this.cursorPos=Z+this.string.length,this.cursorPos-this.string.length}chunk(Z){return this.syncTo(Z),this.string}get lineChunks(){return!0}read(Z,$){let J=this.cursorPos-this.string.length;if(Z<J||$>=this.cursorPos)return this.doc.sliceString(Z,$);else return this.string.slice(Z-J,$-J)}}var s5=null;class i7{constructor(Z,$,J=[],Q,X,K,Y,U){this.parser=Z,this.state=$,this.fragments=J,this.tree=Q,this.treeLen=X,this.viewport=K,this.skipped=Y,this.scheduleOn=U,this.parse=null,this.tempSkipped=[]}static create(Z,$,J){return new i7(Z,$,[],s.empty,0,J,[],null)}startParse(){return this.parser.startParse(new E1(this.state.doc),this.fragments)}work(Z,$){if($!=null&&$>=this.state.doc.length)$=void 0;if(this.tree!=s.empty&&this.isDone($!==null&&$!==void 0?$:this.state.doc.length))return this.takeTree(),!0;return this.withContext(()=>{var J;if(typeof Z=="number"){let Q=Date.now()+Z;Z=()=>Date.now()>Q}if(!this.parse)this.parse=this.startParse();if($!=null&&(this.parse.stoppedAt==null||this.parse.stoppedAt>$)&&$<this.state.doc.length)this.parse.stopAt($);for(;;){let Q=this.parse.advance();if(Q)if(this.fragments=this.withoutTempSkipped(r3.addTree(Q,this.fragments,this.parse.stoppedAt!=null)),this.treeLen=(J=this.parse.stoppedAt)!==null&&J!==void 0?J:this.state.doc.length,this.tree=Q,this.parse=null,this.treeLen<($!==null&&$!==void 0?$:this.state.doc.length))this.parse=this.startParse();else return!0;if(Z())return!1}})}takeTree(){let Z,$;if(this.parse&&(Z=this.parse.parsedPos)>=this.treeLen){if(this.parse.stoppedAt==null||this.parse.stoppedAt>Z)this.parse.stopAt(Z);this.withContext(()=>{while(!($=this.parse.advance()));}),this.treeLen=Z,this.tree=$,this.fragments=this.withoutTempSkipped(r3.addTree(this.tree,this.fragments,!0)),this.parse=null}}withContext(Z){let $=s5;s5=this;try{return Z()}finally{s5=$}}withoutTempSkipped(Z){for(let $;$=this.tempSkipped.pop();)Z=M1(Z,$.from,$.to);return Z}changes(Z,$){let{fragments:J,tree:Q,treeLen:X,viewport:K,skipped:Y}=this;if(this.takeTree(),!Z.empty){let U=[];if(Z.iterChangedRanges((q,W,G,z)=>U.push({fromA:q,toA:W,fromB:G,toB:z})),J=r3.applyChanges(J,U),Q=s.empty,X=0,K={from:Z.mapPos(K.from,-1),to:Z.mapPos(K.to,1)},this.skipped.length){Y=[];for(let q of this.skipped){let W=Z.mapPos(q.from,1),G=Z.mapPos(q.to,-1);if(W<G)Y.push({from:W,to:G})}}}return new i7(this.parser,$,J,Q,X,K,Y,this.scheduleOn)}updateViewport(Z){if(this.viewport.from==Z.from&&this.viewport.to==Z.to)return!1;this.viewport=Z;let $=this.skipped.length;for(let J=0;J<this.skipped.length;J++){let{from:Q,to:X}=this.skipped[J];if(Q<Z.to&&X>Z.from)this.fragments=M1(this.fragments,Q,X),this.skipped.splice(J--,1)}if(this.skipped.length>=$)return!1;return this.reset(),!0}reset(){if(this.parse)this.takeTree(),this.parse=null}skipUntilInView(Z,$){this.skipped.push({from:Z,to:$})}static getSkippingParser(Z){return new class extends p5{createParse($,J,Q){let X=Q[0].from,K=Q[Q.length-1].to;return{parsedPos:X,advance(){let U=s5;if(U){for(let q of Q)U.tempSkipped.push(q);if(Z)U.scheduleOn=U.scheduleOn?Promise.all([U.scheduleOn,Z]):Z}return this.parsedPos=K,new s(K3.none,[],[],K-X)},stoppedAt:null,stopAt(){}}}}}isDone(Z){Z=Math.min(Z,this.state.doc.length);let $=this.fragments;return this.treeLen>=Z&&$.length&&$[0].from==0&&$[0].to>=Z}static get(){return s5}}class q5{constructor(Z){this.context=Z,this.tree=Z.tree}apply(Z){if(!Z.docChanged&&this.tree==this.context.tree)return this;let $=this.context.changes(Z.changes,Z.state),J=this.context.treeLen==Z.startState.doc.length?void 0:Math.max(Z.changes.mapPos(this.context.treeLen),$.viewport.to);if(!$.work(20,J))$.takeTree();return new q5($)}static init(Z){let $=Math.min(3000,Z.doc.length),J=i7.create(Z.facet(G5).parser,Z,{from:0,to:$});if(!J.work(20,$))J.takeTree();return new q5(J)}}x3.state=F3.define({create:q5.init,update(Z,$){for(let J of $.effects)if(J.is(x3.setState))return J.value;if($.startState.facet(G5)!=$.state.facet(G5))return q5.init($.state);return Z.apply($)}});var P1=(Z)=>{let $=setTimeout(()=>Z(),500);return()=>clearTimeout($)};if(typeof requestIdleCallback!="undefined")P1=(Z)=>{let $=-1,J=setTimeout(()=>{$=requestIdleCallback(Z,{timeout:400})},100);return()=>$<0?clearTimeout(J):cancelIdleCallback($)};var b4=typeof navigator!="undefined"&&((S4=navigator.scheduling)===null||S4===void 0?void 0:S4.isInputPending)?()=>navigator.scheduling.isInputPending():null,FX=S3.fromClass(class Z{constructor($){this.view=$,this.working=null,this.workScheduled=0,this.chunkEnd=-1,this.chunkBudget=-1,this.work=this.work.bind(this),this.scheduleWork()}update($){let J=this.view.state.field(x3.state).context;if(J.updateViewport($.view.viewport)||this.view.viewport.to>J.treeLen)this.scheduleWork();if($.docChanged||$.selectionSet){if(this.view.hasFocus)this.chunkBudget+=50;this.scheduleWork()}this.checkAsyncSchedule(J)}scheduleWork(){if(this.working)return;let{state:$}=this.view,J=$.field(x3.state);if(J.tree!=J.context.tree||!J.context.isDone($.doc.length))this.working=P1(this.work)}work($){this.working=null;let J=Date.now();if(this.chunkEnd<J&&(this.chunkEnd<0||this.view.hasFocus))this.chunkEnd=J+30000,this.chunkBudget=3000;if(this.chunkBudget<=0)return;let{state:Q,viewport:{to:X}}=this.view,K=Q.field(x3.state);if(K.tree==K.context.tree&&K.context.isDone(X+1e5))return;let Y=Date.now()+Math.min(this.chunkBudget,100,$&&!b4?Math.max(25,$.timeRemaining()-5):1e9),U=K.context.treeLen<X&&Q.doc.length>X+1000,q=K.context.work(()=>{return b4&&b4()||Date.now()>Y},X+(U?0:1e5));if(this.chunkBudget-=Date.now()-J,q||this.chunkBudget<=0)K.context.takeTree(),this.view.dispatch({effects:x3.setState.of(new q5(K.context))});if(this.chunkBudget>0&&!(q&&!U))this.scheduleWork();this.checkAsyncSchedule(K.context)}checkAsyncSchedule($){if($.scheduleOn)this.workScheduled++,$.scheduleOn.then(()=>this.scheduleWork()).catch((J)=>z3(this.view.state,J)).then(()=>this.workScheduled--),$.scheduleOn=null}destroy(){if(this.working)this.working()}isWorking(){return!!(this.working||this.workScheduled>0)}},{eventHandlers:{focus(){this.scheduleWork()}}}),G5=B.define({combine(Z){return Z.length?Z[0]:null},enables:(Z)=>[x3.state,FX,E.contentAttributes.compute([Z],($)=>{let J=$.facet(Z);return J&&J.name?{"data-language":J.name}:{}})]});class u9{constructor(Z,$=[]){this.language=Z,this.support=$,this.extension=[Z,$]}}var NX=B.define(),W5=B.define({combine:(Z)=>{if(!Z.length)return"  ";let $=Z[0];if(!$||/\S/.test($)||Array.from($).some((J)=>J!=$[0]))throw new Error("Invalid indent unit: "+JSON.stringify(Z[0]));return $}});class z5{constructor(Z,$={}){this.state=Z,this.options=$,this.unit=i5(Z)}lineAt(Z,$=1){let J=this.state.doc.lineAt(Z),{simulateBreak:Q,simulateDoubleBreak:X}=this.options;if(Q!=null&&Q>=J.from&&Q<=J.to)if(X&&Q==Z)return{text:"",from:Z};else if($<0?Q<Z:Q<=Z)return{text:J.text.slice(Q-J.from),from:Q};else return{text:J.text.slice(0,Q-J.from),from:J.from};return J}textAfterPos(Z,$=1){if(this.options.simulateDoubleBreak&&Z==this.options.simulateBreak)return"";let{text:J,from:Q}=this.lineAt(Z,$);return J.slice(Z-Q,Math.min(J.length,Z+100-Q))}column(Z,$=1){let{text:J,from:Q}=this.lineAt(Z,$),X=this.countColumn(J,Z-Q),K=this.options.overrideIndentation?this.options.overrideIndentation(Q):-1;if(K>-1)X+=K-this.countColumn(J,J.search(/\S|$/));return X}countColumn(Z,$=Z.length){return S9(Z,this.state.tabSize,$)}lineIndent(Z,$=1){let{text:J,from:Q}=this.lineAt(Z,$),X=this.options.overrideIndentation;if(X){let K=X(Q);if(K>-1)return K}return this.countColumn(J,J.search(/\S|$/))}get simulatedBreak(){return this.options.simulateBreak||null}}var f9=new y;class f4 extends z5{constructor(Z,$,J){super(Z.state,Z.options);this.base=Z,this.pos=$,this.context=J}get node(){return this.context.node}static create(Z,$,J){return new f4(Z,$,J)}get textAfter(){return this.textAfterPos(this.pos)}get baseIndent(){return this.baseIndentFor(this.node)}baseIndentFor(Z){let $=this.state.doc.lineAt(Z.from);for(;;){let J=Z.resolve($.from);while(J.parent&&J.parent.from==J.from)J=J.parent;if(MX(J,Z))break;$=this.state.doc.lineAt(J.from)}return this.lineIndent($.from)}continue(){return C1(this.context.next,this.base,this.pos)}}var S1=(Z)=>Z.baseIndent;var _5=new y;class O5{constructor(Z,$){this.specs=Z;let J;function Q(Y){let U=m3.newName();return(J||(J=Object.create(null)))["."+U]=Y,U}const X=typeof $.all=="string"?$.all:$.all?Q($.all):void 0,K=$.scope;this.scope=K instanceof x3?(Y)=>Y.prop(U5)==K.data:K?(Y)=>Y==K:void 0,this.style=y4(Z.map((Y)=>({tag:Y.tag,class:Y.class||Q(Object.assign({},Y,{tag:null}))})),{all:X}).style,this.module=J?new m3(J):null,this.themeType=$.themeType}static define(Z,$){return new O5(Z,$||{})}}var w4=B.define(),b1=B.define({combine(Z){return Z.length?[Z[0]]:null}});class x1{constructor(Z){this.markCache=Object.create(null),this.tree=o(Z.state),this.decorations=this.buildDeco(Z,k4(Z.state)),this.decoratedTo=Z.viewport.to}update(Z){let $=o(Z.state),J=k4(Z.state),Q=J!=k4(Z.startState),{viewport:X}=Z.view,K=Z.changes.mapPos(this.decoratedTo,1);if($.length<X.to&&!Q&&$.type==this.tree.type&&K>=X.to)this.decorations=this.decorations.map(Z.changes),this.decoratedTo=K;else if($!=this.tree||Z.viewportChanged||Q)this.tree=$,this.decorations=this.buildDeco(Z.view,J),this.decoratedTo=X.to}buildDeco(Z,$){if(!$||!this.tree.length)return c.none;let J=new T9;for(let{from:Q,to:X}of Z.visibleRanges)R1(this.tree,$,(K,Y,U)=>{J.add(K,Y,this.markCache[U]||(this.markCache[U]=c.mark({class:U})))},Q,X);return J.finish()}}var LX=Q9.high(S3.fromClass(x1,{decorations:(Z)=>Z.decorations})),QG=O5.define([{tag:O.meta,color:"#404740"},{tag:O.link,textDecoration:"underline"},{tag:O.heading,textDecoration:"underline",fontWeight:"bold"},{tag:O.emphasis,fontStyle:"italic"},{tag:O.strong,fontWeight:"bold"},{tag:O.strikethrough,textDecoration:"line-through"},{tag:O.keyword,color:"#708"},{tag:[O.atom,O.bool,O.url,O.contentSeparator,O.labelName],color:"#219"},{tag:[O.literal,O.inserted],color:"#164"},{tag:[O.string,O.deleted],color:"#a11"},{tag:[O.regexp,O.escape,O.special(O.string)],color:"#e40"},{tag:O.definition(O.variableName),color:"#00f"},{tag:O.local(O.variableName),color:"#30a"},{tag:[O.typeName,O.namespace],color:"#085"},{tag:O.className,color:"#167"},{tag:[O.special(O.variableName),O.macroName],color:"#256"},{tag:O.definition(O.propertyName),color:"#00c"},{tag:O.comment,color:"#940"},{tag:O.invalid,color:"#f00"}]);var BX=1e4,EX="()[]{}";var g4=new y;var TX=Object.create(null),A1=[K3.none];var L1=[],B1=Object.create(null),yX=Object.create(null);for(let[Z,$]of[["variable","variableName"],["variable-2","variableName.special"],["string-2","string.special"],["def","variableName.definition"],["tag","tagName"],["attribute","attributeName"],["type","typeName"],["builtin","variableName.standard"],["qualifier","modifier"],["error","invalid"],["header","heading"],["property","propertyName"]])yX[Z]=SX(TX,$);var XG={rtl:c.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"rtl"},bidiIsolate:i.RTL}),ltr:c.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"ltr"},bidiIsolate:i.LTR}),auto:c.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"auto"},bidiIsolate:null})};function i4(Z,$){return({state:J,dispatch:Q})=>{if(J.readOnly)return!1;let X=Z($,J);if(!X)return!1;return Q(J.update(X)),!0}}function n4(Z,$){let J=Z.languageDataAt("commentTokens",$);return J.length?J[0]:{}}function vX(Z,{open:$,close:J},Q,X){let K=Z.sliceDoc(Q-a5,Q),Y=Z.sliceDoc(X,X+a5),U=/\s*$/.exec(K)[0].length,q=/^\s*/.exec(Y)[0].length,W=K.length-U;if(K.slice(W-$.length,W)==$&&Y.slice(q,q+J.length)==J)return{open:{pos:Q-U,margin:U&&1},close:{pos:X+q,margin:q&&1}};let G,z;if(X-Q<=2*a5)G=z=Z.sliceDoc(Q,X);else G=Z.sliceDoc(Q,Q+a5),z=Z.sliceDoc(X-a5,X);let j=/^\s*/.exec(G)[0].length,_=/\s*$/.exec(z)[0].length,H=z.length-_-J.length;if(G.slice(j,j+$.length)==$&&z.slice(H,H+J.length)==J)return{open:{pos:Q+j+$.length,margin:/\s/.test(G.charAt(j+$.length))?1:0},close:{pos:X-_-J.length,margin:/\s/.test(z.charAt(H-1))?1:0}};return null}function hX(Z){let $=[];for(let J of Z.selection.ranges){let Q=Z.doc.lineAt(J.from),X=J.to<=Q.to?Q:Z.doc.lineAt(J.to),K=$.length-1;if(K>=0&&$[K].to>Q.from)$[K].to=X.to;else $.push({from:Q.from+/^\s*/.exec(Q.text)[0].length,to:X.to})}return $}function l1(Z,$,J=$.selection.ranges){let Q=J.map((K)=>n4($,K.from).block);if(!Q.every((K)=>K))return null;let X=J.map((K,Y)=>vX($,Q[Y],K.from,K.to));if(Z!=2&&!X.every((K)=>K))return{changes:$.changes(J.map((K,Y)=>{if(X[Y])return[];return[{from:K.from,insert:Q[Y].open+" "},{from:K.to,insert:" "+Q[Y].close}]}))};else if(Z!=1&&X.some((K)=>K)){let K=[];for(let Y=0,U;Y<X.length;Y++)if(U=X[Y]){let q=Q[Y],{open:W,close:G}=U;K.push({from:W.pos-q.open.length,to:W.pos+W.margin},{from:G.pos-G.margin,to:G.pos+q.close.length})}return{changes:K}}return null}function mX(Z,$,J=$.selection.ranges){let Q=[],X=-1;for(let{from:K,to:Y}of J){let U=Q.length,q=1e9,W=n4($,K).line;if(!W)continue;for(let G=K;G<=Y;){let z=$.doc.lineAt(G);if(z.from>X&&(K==Y||Y>z.from)){X=z.from;let j=/^\s*/.exec(z.text)[0].length,_=j==z.length,H=z.text.slice(j,j+W.length)==W?j:-1;if(j<z.text.length&&j<q)q=j;Q.push({line:z,comment:H,token:W,indent:j,empty:_,single:!1})}G=z.to+1}if(q<1e9){for(let G=U;G<Q.length;G++)if(Q[G].indent<Q[G].line.text.length)Q[G].indent=q}if(Q.length==U+1)Q[U].single=!0}if(Z!=2&&Q.some((K)=>K.comment<0&&(!K.empty||K.single))){let K=[];for(let{line:U,token:q,indent:W,empty:G,single:z}of Q)if(z||!G)K.push({from:U.from+W,insert:q+" "});let Y=$.changes(K);return{changes:Y,selection:$.selection.map(Y,1)}}else if(Z!=1&&Q.some((K)=>K.comment>=0)){let K=[];for(let{line:Y,comment:U,token:q}of Q)if(U>=0){let W=Y.from+U,G=W+q.length;if(Y.text[G-Y.from]==" ")G++;K.push({from:W,to:G})}return{changes:K}}return null}function c1(Z={}){return[d1,p1.of(Z),E.domEventHandlers({beforeinput($,J){let Q=$.inputType=="historyUndo"?s1:$.inputType=="historyRedo"?d4:null;if(!Q)return!1;return $.preventDefault(),Q(J)}})]}function t7(Z,$){return function({state:J,dispatch:Q}){if(!$&&J.readOnly)return!1;let X=J.field(d1,!1);if(!X)return!1;let K=X.pop(Z,J,$);if(!K)return!1;return Q(K),!0}}function o7(Z,$,J,Q){let X=$+1>J+20?$-J-1:0,K=Z.slice(X,$);return K.push(Q),K}function pX(Z,$){let J=[],Q=!1;return Z.iterChangedRanges((X,K)=>J.push(X,K)),$.iterChangedRanges((X,K,Y,U)=>{for(let q=0;q<J.length;){let W=J[q++],G=J[q++];if(U>=W&&Y<=G)Q=!0}}),Q}function dX(Z,$){return Z.ranges.length==$.ranges.length&&Z.ranges.filter((J,Q)=>J.empty!=$.ranges[Q].empty).length===0}function i1(Z,$){return!Z.length?$:!$.length?Z:Z.concat($)}function n1(Z,$){if(!Z.length)return[D3.selection([$])];else{let J=Z[Z.length-1],Q=J.selectionsAfter.slice(Math.max(0,J.selectionsAfter.length-cX));if(Q.length&&Q[Q.length-1].eq($))return Z;return Q.push($),o7(Z,Z.length-1,1e9,J.setSelAfter(Q))}}function sX(Z){let $=Z[Z.length-1],J=Z.slice();return J[Z.length-1]=$.setSelAfter($.selectionsAfter.slice(0,$.selectionsAfter.length-1)),J}function l4(Z,$){if(!Z.length)return Z;let J=Z.length,Q=w3;while(J){let X=iX(Z[J-1],$,Q);if(X.changes&&!X.changes.empty||X.effects.length){let K=Z.slice(0,J);return K[J-1]=X,K}else $=X.mapped,J--,Q=X.selectionsAfter}return Q.length?[D3.selection(Q)]:w3}function iX(Z,$,J){let Q=i1(Z.selectionsAfter.length?Z.selectionsAfter.map((U)=>U.map($)):w3,J);if(!Z.changes)return D3.selection(Q);let X=Z.changes.map($),K=$.mapDesc(Z.changes,!0),Y=Z.mapped?Z.mapped.composeDesc(K):K;return new D3(X,v.mapEffects(Z.effects,$),Y,Z.startSelection.map(K),Q)}function H5(Z,$){return R.create(Z.ranges.map($),Z.mainIndex)}function $9(Z,$){return Z.update({selection:$,scrollIntoView:!0,userEvent:"select"})}function g3({state:Z,dispatch:$},J){let Q=H5(Z.selection,J);if(Q.eq(Z.selection,!0))return!1;return $($9(Z,Q)),!0}function e7(Z,$){return R.cursor($?Z.to:Z.from)}function r1(Z,$){return g3(Z,(J)=>J.empty?Z.moveByChar(J,$):e7(J,$))}function W3(Z){return Z.textDirectionAt(Z.state.selection.main.head)==i.LTR}function e1(Z,$){return g3(Z,(J)=>J.empty?Z.moveByGroup(J,$):e7(J,$))}function oX(Z,$,J){if($.type.prop(J))return!0;let Q=$.to-$.from;return Q&&(Q>2||/[^\s,.;:]/.test(Z.sliceDoc($.from,$.to)))||$.firstChild}function ZZ(Z,$,J){let Q=o(Z).resolveInner($.head),X=J?y.closedBy:y.openedBy;for(let q=$.head;;){let W=J?Q.childAfter(q):Q.childBefore(q);if(!W)break;if(oX(Z,W,X))Q=W;else q=J?W.to:W.from}let K=Q.type.prop(X),Y,U;if(K&&(Y=J?g9(Z,Q.from,1):g9(Z,Q.to,-1))&&Y.matched)U=J?Y.end.to:Y.end.from;else U=J?Q.to:Q.from;return R.cursor(U,J?-1:1)}function Z$(Z,$){return g3(Z,(J)=>{if(!J.empty)return e7(J,$);let Q=Z.moveVertically(J,$);return Q.head!=J.head?Q:Z.moveToLineBoundary(J,$)})}function Q$(Z){let $=Z.scrollDOM.clientHeight<Z.scrollDOM.scrollHeight-2,J=0,Q=0,X;if($){for(let K of Z.state.facet(E.scrollMargins)){let Y=K(Z);if(Y===null||Y===void 0?void 0:Y.top)J=Math.max(Y===null||Y===void 0?void 0:Y.top,J);if(Y===null||Y===void 0?void 0:Y.bottom)Q=Math.max(Y===null||Y===void 0?void 0:Y.bottom,Q)}X=Z.scrollDOM.clientHeight-J-Q}else X=(Z.dom.ownerDocument.defaultView||window).innerHeight;return{marginTop:J,marginBottom:Q,selfScroll:$,height:Math.max(Z.defaultLineHeight,X-5)}}function X$(Z,$){let J=Q$(Z),{state:Q}=Z,X=H5(Q.selection,(Y)=>{return Y.empty?Z.moveVertically(Y,$,J.height):e7(Y,$)});if(X.eq(Q.selection))return!1;let K;if(J.selfScroll){let Y=Z.coordsAtPos(Q.selection.main.head),U=Z.scrollDOM.getBoundingClientRect(),q=U.top+J.marginTop,W=U.bottom-J.marginBottom;if(Y&&Y.top>q&&Y.bottom<W)K=E.scrollIntoView(X.main.head,{y:"start",yMargin:Y.top-q})}return Z.dispatch($9(Q,X),{effects:K}),!0}function I9(Z,$,J){let Q=Z.lineBlockAt($.head),X=Z.moveToLineBoundary($,J);if(X.head==$.head&&X.head!=(J?Q.to:Q.from))X=Z.moveToLineBoundary($,J,!1);if(!J&&X.head==Q.from&&Q.length){let K=/^\s*/.exec(Z.state.sliceDoc(Q.from,Math.min(Q.from+100,Q.to)))[0].length;if(K&&$.head!=Q.from+K)X=R.cursor(Q.from+K)}return X}function YK(Z,$,J){let Q=!1,X=H5(Z.selection,(K)=>{let Y=g9(Z,K.head,-1)||g9(Z,K.head,1)||K.head>0&&g9(Z,K.head-1,1)||K.head<Z.doc.length&&g9(Z,K.head+1,-1);if(!Y||!Y.end)return K;Q=!0;let U=Y.start.from==K.head?Y.end.to:Y.end.from;return J?R.range(K.anchor,U):R.cursor(U)});if(!Q)return!1;return $($9(Z,X)),!0}function v3(Z,$){let J=H5(Z.state.selection,(Q)=>{let X=$(Q);return R.range(Q.anchor,X.head,X.goalColumn,X.bidiLevel||void 0)});if(J.eq(Z.state.selection))return!1;return Z.dispatch($9(Z.state,J)),!0}function K$(Z,$){return v3(Z,(J)=>Z.moveByChar(J,$))}function q$(Z,$){return v3(Z,(J)=>Z.moveByGroup(J,$))}function G$(Z,$){return v3(Z,(J)=>Z.moveVertically(J,$))}function j$(Z,$){return v3(Z,(J)=>Z.moveVertically(J,$,Q$(Z).height))}function r5(Z,$){if(Z.state.readOnly)return!1;let J="delete.selection",{state:Q}=Z,X=Q.changeByRange((K)=>{let{from:Y,to:U}=K;if(Y==U){let q=$(K);if(q<Y)J="delete.backward",q=r7(Z,q,!1);else if(q>Y)J="delete.forward",q=r7(Z,q,!0);Y=Math.min(Y,q),U=Math.max(U,q)}else Y=r7(Z,Y,!1),U=r7(Z,U,!0);return Y==U?{range:K}:{changes:{from:Y,to:U},range:R.cursor(Y,Y<K.head?-1:1)}});if(X.changes.empty)return!1;return Z.dispatch(Q.update(X,{scrollIntoView:!0,userEvent:J,effects:J=="delete.selection"?E.announce.of(Q.phrase("Selection deleted")):void 0})),!0}function r7(Z,$,J){if(Z instanceof E)for(let Q of Z.state.facet(E.atomicRanges).map((X)=>X(Z)))Q.between($,$,(X,K)=>{if(X<$&&K>$)$=J?K:X});return $}function $Z(Z){let $=[],J=-1;for(let Q of Z.selection.ranges){let X=Z.doc.lineAt(Q.from),K=Z.doc.lineAt(Q.to);if(!Q.empty&&Q.to==K.from)K=Z.doc.lineAt(Q.to-1);if(J>=X.number){let Y=$[$.length-1];Y.to=K.to,Y.ranges.push(Q)}else $.push({from:X.from,to:K.to,ranges:[Q]});J=K.number+1}return $}function N$(Z,$,J){if(Z.readOnly)return!1;let Q=[],X=[];for(let K of $Z(Z)){if(J?K.to==Z.doc.length:K.from==0)continue;let Y=Z.doc.lineAt(J?K.to+1:K.from-1),U=Y.length+1;if(J){Q.push({from:K.to,to:Y.to},{from:K.from,insert:Y.text+Z.lineBreak});for(let q of K.ranges)X.push(R.range(Math.min(Z.doc.length,q.anchor+U),Math.min(Z.doc.length,q.head+U)))}else{Q.push({from:Y.from,to:K.from},{from:K.to,insert:Z.lineBreak+Y.text});for(let q of K.ranges)X.push(R.range(q.anchor-U,q.head-U))}}if(!Q.length)return!1;return $(Z.update({changes:Q,scrollIntoView:!0,selection:R.create(X,Z.selection.mainIndex),userEvent:"move.line"})),!0}function D$(Z,$,J){if(Z.readOnly)return!1;let Q=[];for(let X of $Z(Z))if(J)Q.push({from:X.from,insert:Z.doc.slice(X.from,X.to)+Z.lineBreak});else Q.push({from:X.to,insert:Z.lineBreak+Z.doc.slice(X.from,X.to)});return $(Z.update({changes:Q,scrollIntoView:!0,userEvent:"input.copyline"})),!0}function kK(Z,$){if(/\(\)|\[\]|\{\}/.test(Z.sliceDoc($-1,$+1)))return{from:$,to:$};let J=o(Z).resolveInner($),Q=J.childBefore($),X=J.childAfter($),K;if(Q&&X&&Q.to<=$&&X.from>=$&&(K=Q.type.prop(y.closedBy))&&K.indexOf(X.name)>-1&&Z.doc.lineAt(Q.to).from==Z.doc.lineAt(X.from).from&&!/\S/.test(Z.sliceDoc(Q.to,X.from)))return{from:Q.to,to:X.from};return null}function R$(Z){return({state:$,dispatch:J})=>{if($.readOnly)return!1;let Q=$.changeByRange((X)=>{let{from:K,to:Y}=X,U=$.doc.lineAt(K),q=!Z&&K==Y&&kK($,K);if(Z)K=Y=(Y<=U.to?U:$.doc.lineAt(Y)).to;let W=new z5($,{simulateBreak:K,simulateDoubleBreak:!!q}),G=u4(W,K);if(G==null)G=S9(/^\s*/.exec($.doc.lineAt(K).text)[0],$.tabSize);while(Y<U.to&&/\s/.test(U.text[Y-U.from]))Y++;if(q)({from:K,to:Y}=q);else if(K>U.from&&K<U.from+100&&!/\S/.test(U.text.slice(0,K)))K=U.from;let z=["",n5($,G)];if(q)z.push(n5($,W.lineIndent(U.from,-1)));return{changes:{from:K,to:Y,insert:b.of(z)},range:R.cursor(K+1+z[1].length)}});return J($.update(Q,{scrollIntoView:!0,userEvent:"input"})),!0}}function a4(Z,$){let J=-1;return Z.changeByRange((Q)=>{let X=[];for(let Y=Q.from;Y<=Q.to;){let U=Z.doc.lineAt(Y);if(U.number>J&&(Q.empty||Q.to>U.from))$(U,X,Q),J=U.number;Y=U.to+1}let K=Z.changes(X);return{changes:X,range:R.range(K.mapPos(Q.anchor,1),K.mapPos(Q.head,1))}})}var bX=(Z)=>{let{state:$}=Z,J=$.doc.lineAt($.selection.main.from),Q=n4(Z.state,J.from);return Q.line?kX(Z):Q.block?wX(Z):!1},kX=i4(mX,0);var xX=i4(l1,0);var wX=i4((Z,$)=>l1(Z,$,hX($)),0),a5=50,p4=V3.define(),uX=V3.define(),fX=B.define(),p1=B.define({combine(Z){return y9(Z,{minDepth:100,newGroupDelay:500,joinToEvent:($,J)=>J},{minDepth:Math.max,newGroupDelay:Math.min,joinToEvent:($,J)=>(Q,X)=>$(Q,X)||J(Q,X)})}}),d1=F3.define({create(){return Z9.empty},update(Z,$){let J=$.state.facet(p1),Q=$.annotation(p4);if(Q){let q=D3.fromTransaction($,Q.selection),W=Q.side,G=W==0?Z.undone:Z.done;if(q)G=o7(G,G.length,J.minDepth,q);else G=n1(G,$.startState.selection);return new Z9(W==0?Q.rest:G,W==0?G:Q.rest)}let X=$.annotation(uX);if(X=="full"||X=="before")Z=Z.isolate();if($.annotation(a.addToHistory)===!1)return!$.changes.empty?Z.addMapping($.changes.desc):Z;let K=D3.fromTransaction($),Y=$.annotation(a.time),U=$.annotation(a.userEvent);if(K)Z=Z.addChanges(K,Y,U,J,$);else if($.selection)Z=Z.addSelection($.startState.selection,Y,U,J.newGroupDelay);if(X=="full"||X=="after")Z=Z.isolate();return Z},toJSON(Z){return{done:Z.done.map(($)=>$.toJSON()),undone:Z.undone.map(($)=>$.toJSON())}},fromJSON(Z){return new Z9(Z.done.map(D3.fromJSON),Z.undone.map(D3.fromJSON))}});var s1=t7(0,!1),d4=t7(1,!1),gX=t7(0,!0),lX=t7(1,!0);class D3{constructor(Z,$,J,Q,X){this.changes=Z,this.effects=$,this.mapped=J,this.startSelection=Q,this.selectionsAfter=X}setSelAfter(Z){return new D3(this.changes,this.effects,this.mapped,this.startSelection,Z)}toJSON(){var Z,$,J;return{changes:(Z=this.changes)===null||Z===void 0?void 0:Z.toJSON(),mapped:($=this.mapped)===null||$===void 0?void 0:$.toJSON(),startSelection:(J=this.startSelection)===null||J===void 0?void 0:J.toJSON(),selectionsAfter:this.selectionsAfter.map((Q)=>Q.toJSON())}}static fromJSON(Z){return new D3(Z.changes&&e.fromJSON(Z.changes),[],Z.mapped&&h3.fromJSON(Z.mapped),Z.startSelection&&R.fromJSON(Z.startSelection),Z.selectionsAfter.map(R.fromJSON))}static fromTransaction(Z,$){let J=w3;for(let Q of Z.startState.facet(fX)){let X=Q(Z);if(X.length)J=J.concat(X)}if(!J.length&&Z.changes.empty)return null;return new D3(Z.changes.invert(Z.startState.doc),J,void 0,$||Z.startState.selection,w3)}static selection(Z){return new D3(void 0,w3,void 0,void 0,Z)}}var w3=[],cX=200,nX=/^(input\.type|delete)($|\.)/;class Z9{constructor(Z,$,J=0,Q=void 0){this.done=Z,this.undone=$,this.prevTime=J,this.prevUserEvent=Q}isolate(){return this.prevTime?new Z9(this.done,this.undone):this}addChanges(Z,$,J,Q,X){let K=this.done,Y=K[K.length-1];if(Y&&Y.changes&&!Y.changes.empty&&Z.changes&&(!J||nX.test(J))&&(!Y.selectionsAfter.length&&$-this.prevTime<Q.newGroupDelay&&Q.joinToEvent(X,pX(Y.changes,Z.changes))||J=="input.type.compose"))K=o7(K,K.length-1,Q.minDepth,new D3(Z.changes.compose(Y.changes),i1(v.mapEffects(Z.effects,Y.changes),Y.effects),Y.mapped,Y.startSelection,w3));else K=o7(K,K.length,Q.minDepth,Z);return new Z9(K,w3,$,J)}addSelection(Z,$,J,Q){let X=this.done.length?this.done[this.done.length-1].selectionsAfter:w3;if(X.length>0&&$-this.prevTime<Q&&J==this.prevUserEvent&&J&&/^select($|\.)/.test(J)&&dX(X[X.length-1],Z))return this;return new Z9(n1(this.done,Z),this.undone,$,J)}addMapping(Z){return new Z9(l4(this.done,Z),l4(this.undone,Z),this.prevTime,this.prevUserEvent)}pop(Z,$,J){let Q=Z==0?this.done:this.undone;if(Q.length==0)return null;let X=Q[Q.length-1],K=X.selectionsAfter[0]||$.selection;if(J&&X.selectionsAfter.length)return $.update({selection:X.selectionsAfter[X.selectionsAfter.length-1],annotations:p4.of({side:Z,rest:sX(Q),selection:K}),userEvent:Z==0?"select.undo":"select.redo",scrollIntoView:!0});else if(!X.changes)return null;else{let Y=Q.length==1?w3:Q.slice(0,Q.length-1);if(X.mapped)Y=l4(Y,X.mapped);return $.update({changes:X.changes,selection:X.startSelection,effects:X.effects,annotations:p4.of({side:Z,rest:Y,selection:K}),filter:!1,userEvent:Z==0?"undo":"redo",scrollIntoView:!0})}}}Z9.empty=new Z9(w3,w3);var a1=[{key:"Mod-z",run:s1,preventDefault:!0},{key:"Mod-y",mac:"Mod-Shift-z",run:d4,preventDefault:!0},{linux:"Ctrl-Shift-z",run:d4,preventDefault:!0},{key:"Mod-u",run:gX,preventDefault:!0},{key:"Alt-u",mac:"Mod-Shift-u",run:lX,preventDefault:!0}],o1=(Z)=>r1(Z,!W3(Z)),t1=(Z)=>r1(Z,W3(Z));var aX=(Z)=>e1(Z,!W3(Z)),rX=(Z)=>e1(Z,W3(Z));var zG=typeof Intl!="undefined"&&Intl.Segmenter?new Intl.Segmenter(void 0,{granularity:"word"}):null;var tX=(Z)=>g3(Z,($)=>ZZ(Z.state,$,!W3(Z))),eX=(Z)=>g3(Z,($)=>ZZ(Z.state,$,W3(Z))),$$=(Z)=>Z$(Z,!1),J$=(Z)=>Z$(Z,!0),w1=(Z)=>X$(Z,!1),c4=(Z)=>X$(Z,!0),ZK=(Z)=>g3(Z,($)=>I9(Z,$,!0)),$K=(Z)=>g3(Z,($)=>I9(Z,$,!1)),JK=(Z)=>g3(Z,($)=>I9(Z,$,!W3(Z))),QK=(Z)=>g3(Z,($)=>I9(Z,$,W3(Z))),XK=(Z)=>g3(Z,($)=>R.cursor(Z.lineBlockAt($.head).from,1)),KK=(Z)=>g3(Z,($)=>R.cursor(Z.lineBlockAt($.head).to,-1)),UK=({state:Z,dispatch:$})=>YK(Z,$,!1);var Y$=(Z)=>K$(Z,!W3(Z)),U$=(Z)=>K$(Z,W3(Z));var qK=(Z)=>q$(Z,!W3(Z)),GK=(Z)=>q$(Z,W3(Z));var WK=(Z)=>v3(Z,($)=>ZZ(Z.state,$,!W3(Z))),zK=(Z)=>v3(Z,($)=>ZZ(Z.state,$,W3(Z))),W$=(Z)=>G$(Z,!1),z$=(Z)=>G$(Z,!0),v1=(Z)=>j$(Z,!1),h1=(Z)=>j$(Z,!0),jK=(Z)=>v3(Z,($)=>I9(Z,$,!0)),_K=(Z)=>v3(Z,($)=>I9(Z,$,!1)),OK=(Z)=>v3(Z,($)=>I9(Z,$,!W3(Z))),HK=(Z)=>v3(Z,($)=>I9(Z,$,W3(Z))),FK=(Z)=>v3(Z,($)=>R.cursor(Z.lineBlockAt($.head).from)),NK=(Z)=>v3(Z,($)=>R.cursor(Z.lineBlockAt($.head).to)),m1=({state:Z,dispatch:$})=>{return $($9(Z,{anchor:0})),!0},u1=({state:Z,dispatch:$})=>{return $($9(Z,{anchor:Z.doc.length})),!0},f1=({state:Z,dispatch:$})=>{return $($9(Z,{anchor:Z.selection.main.anchor,head:0})),!0},g1=({state:Z,dispatch:$})=>{return $($9(Z,{anchor:Z.selection.main.anchor,head:Z.doc.length})),!0},DK=({state:Z,dispatch:$})=>{return $(Z.update({selection:{anchor:0,head:Z.doc.length},userEvent:"select"})),!0},RK=({state:Z,dispatch:$})=>{let J=$Z(Z).map(({from:Q,to:X})=>R.range(Q,Math.min(X+1,Z.doc.length)));return $(Z.update({selection:R.create(J),userEvent:"select"})),!0},VK=({state:Z,dispatch:$})=>{let J=H5(Z.selection,(Q)=>{var X;let K=o(Z).resolveStack(Q.from,1);for(let Y=K;Y;Y=Y.next){let{node:U}=Y;if((U.from<Q.from&&U.to>=Q.to||U.to>Q.to&&U.from<=Q.from)&&((X=U.parent)===null||X===void 0?void 0:X.parent))return R.range(U.to,U.from)}return Q});return $($9(Z,J)),!0},IK=({state:Z,dispatch:$})=>{let J=Z.selection,Q=null;if(J.ranges.length>1)Q=R.create([J.main]);else if(!J.main.empty)Q=R.create([R.cursor(J.main.head)]);if(!Q)return!1;return $($9(Z,Q)),!0},_$=(Z,$,J)=>r5(Z,(Q)=>{let X=Q.from,{state:K}=Z,Y=K.doc.lineAt(X),U,q;if(J&&!$&&X>Y.from&&X<Y.from+200&&!/[^ \t]/.test(U=Y.text.slice(0,X-Y.from))){if(U[U.length-1]=="\t")return X-1;let W=S9(U,K.tabSize),G=W%i5(K)||i5(K);for(let z=0;z<G&&U[U.length-1-z]==" ";z++)X--;q=X}else if(q=Q3(Y.text,X-Y.from,$,$)+Y.from,q==X&&Y.number!=($?K.doc.lines:1))q+=$?1:-1;else if(!$&&/[\ufe00-\ufe0f]/.test(Y.text.slice(q-Y.from,X-Y.from)))q=Q3(Y.text,q-Y.from,!1,!1)+Y.from;return q}),s4=(Z)=>_$(Z,!1,!0);var O$=(Z)=>_$(Z,!0,!1),H$=(Z,$)=>r5(Z,(J)=>{let Q=J.head,{state:X}=Z,K=X.doc.lineAt(Q),Y=X.charCategorizer(Q);for(let U=null;;){if(Q==($?K.to:K.from)){if(Q==J.head&&K.number!=($?X.doc.lines:1))Q+=$?1:-1;break}let q=Q3(K.text,Q-K.from,$)+K.from,W=K.text.slice(Math.min(Q,q)-K.from,Math.max(Q,q)-K.from),G=Y(W);if(U!=null&&G!=U)break;if(W!=" "||Q!=J.head)U=G;Q=q}return Q}),F$=(Z)=>H$(Z,!1),MK=(Z)=>H$(Z,!0),AK=(Z)=>r5(Z,($)=>{let J=Z.lineBlockAt($.head).to;return $.head<J?J:Math.min(Z.state.doc.length,$.head+1)});var LK=(Z)=>r5(Z,($)=>{let J=Z.moveToLineBoundary($,!1).head;return $.head>J?J:Math.max(0,$.head-1)}),BK=(Z)=>r5(Z,($)=>{let J=Z.moveToLineBoundary($,!0).head;return $.head<J?J:Math.min(Z.state.doc.length,$.head+1)});var EK=({state:Z,dispatch:$})=>{if(Z.readOnly)return!1;let J=Z.changeByRange((Q)=>{return{changes:{from:Q.from,to:Q.to,insert:b.of(["",""])},range:R.cursor(Q.from)}});return $(Z.update(J,{scrollIntoView:!0,userEvent:"input"})),!0},PK=({state:Z,dispatch:$})=>{if(Z.readOnly)return!1;let J=Z.changeByRange((Q)=>{if(!Q.empty||Q.from==0||Q.from==Z.doc.length)return{range:Q};let X=Q.from,K=Z.doc.lineAt(X),Y=X==K.from?X-1:Q3(K.text,X-K.from,!1)+K.from,U=X==K.to?X+1:Q3(K.text,X-K.from,!0)+K.from;return{changes:{from:Y,to:U,insert:Z.doc.slice(X,U).append(Z.doc.slice(Y,X))},range:R.cursor(U)}});if(J.changes.empty)return!1;return $(Z.update(J,{scrollIntoView:!0,userEvent:"move.character"})),!0},CK=({state:Z,dispatch:$})=>N$(Z,$,!1),TK=({state:Z,dispatch:$})=>N$(Z,$,!0),yK=({state:Z,dispatch:$})=>D$(Z,$,!1),SK=({state:Z,dispatch:$})=>D$(Z,$,!0),bK=(Z)=>{if(Z.state.readOnly)return!1;let{state:$}=Z,J=$.changes($Z($).map(({from:X,to:K})=>{if(X>0)X--;else if(K<$.doc.length)K++;return{from:X,to:K}})),Q=H5($.selection,(X)=>{let K=void 0;if(Z.lineWrapping){let Y=Z.lineBlockAt(X.head),U=Z.coordsAtPos(X.head,X.assoc||1);if(U)K=Y.bottom+Z.documentTop-U.bottom+Z.defaultLineHeight/2}return Z.moveVertically(X,!0,K)}).map(J);return Z.dispatch({changes:J,selection:Q,scrollIntoView:!0,userEvent:"delete.line"}),!0};var xK=R$(!1),wK=R$(!0),vK=({state:Z,dispatch:$})=>{if(Z.readOnly)return!1;let J=Object.create(null),Q=new z5(Z,{overrideIndentation:(K)=>{let Y=J[K];return Y==null?-1:Y}}),X=a4(Z,(K,Y,U)=>{let q=u4(Q,K.from);if(q==null)return;if(!/\S/.test(K.text))q=0;let W=/^\s*/.exec(K.text)[0],G=n5(Z,q);if(W!=G||U.from<K.from+W.length)J[K.from]=q,Y.push({from:K.from,to:K.from+W.length,insert:G})});if(!X.changes.empty)$(Z.update(X,{userEvent:"indent"}));return!0},hK=({state:Z,dispatch:$})=>{if(Z.readOnly)return!1;return $(Z.update(a4(Z,(J,Q)=>{Q.push({from:J.from,insert:Z.facet(W5)})}),{userEvent:"input.indent"})),!0},mK=({state:Z,dispatch:$})=>{if(Z.readOnly)return!1;return $(Z.update(a4(Z,(J,Q)=>{let X=/^\s*/.exec(J.text)[0];if(!X)return;let K=S9(X,Z.tabSize),Y=0,U=n5(Z,Math.max(0,K-i5(Z)));while(Y<X.length&&Y<U.length&&X.charCodeAt(Y)==U.charCodeAt(Y))Y++;Q.push({from:J.from+Y,to:J.from+X.length,insert:U.slice(Y)})}),{userEvent:"delete.dedent"})),!0},uK=(Z)=>{return Z.setTabFocusMode(),!0};var fK=[{key:"Ctrl-b",run:o1,shift:Y$,preventDefault:!0},{key:"Ctrl-f",run:t1,shift:U$},{key:"Ctrl-p",run:$$,shift:W$},{key:"Ctrl-n",run:J$,shift:z$},{key:"Ctrl-a",run:XK,shift:FK},{key:"Ctrl-e",run:KK,shift:NK},{key:"Ctrl-d",run:O$},{key:"Ctrl-h",run:s4},{key:"Ctrl-k",run:AK},{key:"Ctrl-Alt-h",run:F$},{key:"Ctrl-o",run:EK},{key:"Ctrl-t",run:PK},{key:"Ctrl-v",run:c4}],gK=[{key:"ArrowLeft",run:o1,shift:Y$,preventDefault:!0},{key:"Mod-ArrowLeft",mac:"Alt-ArrowLeft",run:aX,shift:qK,preventDefault:!0},{mac:"Cmd-ArrowLeft",run:JK,shift:OK,preventDefault:!0},{key:"ArrowRight",run:t1,shift:U$,preventDefault:!0},{key:"Mod-ArrowRight",mac:"Alt-ArrowRight",run:rX,shift:GK,preventDefault:!0},{mac:"Cmd-ArrowRight",run:QK,shift:HK,preventDefault:!0},{key:"ArrowUp",run:$$,shift:W$,preventDefault:!0},{mac:"Cmd-ArrowUp",run:m1,shift:f1},{mac:"Ctrl-ArrowUp",run:w1,shift:v1},{key:"ArrowDown",run:J$,shift:z$,preventDefault:!0},{mac:"Cmd-ArrowDown",run:u1,shift:g1},{mac:"Ctrl-ArrowDown",run:c4,shift:h1},{key:"PageUp",run:w1,shift:v1},{key:"PageDown",run:c4,shift:h1},{key:"Home",run:$K,shift:_K,preventDefault:!0},{key:"Mod-Home",run:m1,shift:f1},{key:"End",run:ZK,shift:jK,preventDefault:!0},{key:"Mod-End",run:u1,shift:g1},{key:"Enter",run:xK},{key:"Mod-a",run:DK},{key:"Backspace",run:s4,shift:s4},{key:"Delete",run:O$},{key:"Mod-Backspace",mac:"Alt-Backspace",run:F$},{key:"Mod-Delete",mac:"Alt-Delete",run:MK},{mac:"Mod-Backspace",run:LK},{mac:"Mod-Delete",run:BK}].concat(fK.map((Z)=>({mac:Z.key,run:Z.run,shift:Z.shift}))),V$=[{key:"Alt-ArrowLeft",mac:"Ctrl-ArrowLeft",run:tX,shift:WK},{key:"Alt-ArrowRight",mac:"Ctrl-ArrowRight",run:eX,shift:zK},{key:"Alt-ArrowUp",run:CK},{key:"Shift-Alt-ArrowUp",run:yK},{key:"Alt-ArrowDown",run:TK},{key:"Shift-Alt-ArrowDown",run:SK},{key:"Escape",run:IK},{key:"Mod-Enter",run:wK},{key:"Alt-l",mac:"Ctrl-l",run:RK},{key:"Mod-i",run:VK,preventDefault:!0},{key:"Mod-[",run:mK},{key:"Mod-]",run:hK},{key:"Mod-Alt-\\",run:vK},{key:"Shift-Mod-k",run:bK},{key:"Shift-Mod-\\",run:UK},{key:"Mod-/",run:bX},{key:"Alt-A",run:xX},{key:"Ctrl-m",mac:"Shift-Alt-m",run:uK}].concat(gK);function o5(Z,$=Uint16Array){if(typeof Z!="string")return Z;let J=null;for(let Q=0,X=0;Q<Z.length;){let K=0;for(;;){let Y=Z.charCodeAt(Q++),U=!1;if(Y==126){K=65535;break}if(Y>=92)Y--;if(Y>=34)Y--;let q=Y-32;if(q>=46)q-=46,U=!0;if(K+=q,U)break;K*=46}if(J)J[X++]=K;else J=new $(K)}return J}function C$(Z,$,J,Q,X,K){let Y=0,U=1<<Q,{dialect:q}=J.p.parser;Z:for(;;){if((U&Z[Y])==0)break;let W=Z[Y+1];for(let _=Y+3;_<W;_+=2)if((Z[_+1]&U)>0){let H=Z[_];if(q.allows(H)&&($.token.value==-1||$.token.value==H||lK(H,$.token.value,X,K))){$.acceptToken(H);break}}let G=$.next,z=0,j=Z[Y+2];if($.next<0&&j>z&&Z[W+j*3-3]==65535){Y=Z[W+j*3-1];continue Z}for(;z<j;){let _=z+j>>1,H=W+_+(_<<1),F=Z[H],N=Z[H+1]||65536;if(G<F)j=_;else if(G>=N)z=_+1;else{Y=Z[H+2],$.advance();continue Z}}break}}function M$(Z,$,J){for(let Q=$,X;(X=Z[Q])!=65535;Q++)if(X==J)return Q-$;return-1}function lK(Z,$,J,Q){let X=M$(J,Q,$);return X<0||M$(J,Q,Z)<X}function A$(Z,$,J){let Q=Z.cursor(u.IncludeAnonymous);Q.moveTo($);for(;;)if(!(J<0?Q.childBefore($):Q.childAfter($)))for(;;){if((J<0?Q.to<$:Q.from>$)&&!Q.type.isError)return J<0?Math.max(0,Math.min(Q.to-1,$-25)):Math.min(Z.length,Math.max(Q.from+1,$+25));if(J<0?Q.prevSibling():Q.nextSibling())break;if(!Q.parent())return J<0?0:Z.length}}function L$(Z,$){for(let J=0;J<$.length;J++){let Q=$[J];if(Q.pos==Z.pos&&Q.sameState(Z)){if($[J].score<Z.score)$[J]=Z;return}}$.push(Z)}function z9(Z,$){return Z[$]|Z[$+1]<<16}function pK(Z){let $=null;for(let J of Z){let Q=J.p.stoppedAt;if((J.pos==J.p.stream.end||Q!=null&&J.pos>Q)&&J.p.parser.stateFlag(J.state,2)&&(!$||$.score<J.score))$=J}return $}function B$(Z){if(Z.external){let $=Z.extend?1:0;return(J,Q)=>Z.external(J,Q)<<1|$}return Z.get}class JZ{constructor(Z,$,J,Q,X,K,Y,U,q,W=0,G){this.p=Z,this.stack=$,this.state=J,this.reducePos=Q,this.pos=X,this.score=K,this.buffer=Y,this.bufferBase=U,this.curContext=q,this.lookAhead=W,this.parent=G}toString(){return`[${this.stack.filter((Z,$)=>$%3==0).concat(this.state)}]@${this.pos}${this.score?"!"+this.score:""}`}static start(Z,$,J=0){let Q=Z.parser.context;return new JZ(Z,[],$,J,J,0,[],0,Q?new t4(Q,Q.start):null,0,null)}get context(){return this.curContext?this.curContext.context:null}pushState(Z,$){this.stack.push(this.state,$,this.bufferBase+this.buffer.length),this.state=Z}reduce(Z){var $;let J=Z>>19,Q=Z&65535,{parser:X}=this.p,K=this.reducePos<this.pos-25;if(K)this.setLookAhead(this.pos);let Y=X.dynamicPrecedence(Q);if(Y)this.score+=Y;if(J==0){if(this.pushState(X.getGoto(this.state,Q,!0),this.reducePos),Q<X.minRepeatTerm)this.storeNode(Q,this.reducePos,this.reducePos,K?8:4,!0);this.reduceContext(Q,this.reducePos);return}let U=this.stack.length-(J-1)*3-(Z&262144?6:0),q=U?this.stack[U-2]:this.p.ranges[0].from,W=this.reducePos-q;if(W>=2000&&!(($=this.p.parser.nodeSet.types[Q])===null||$===void 0?void 0:$.isAnonymous)){if(q==this.p.lastBigReductionStart)this.p.bigReductionCount++,this.p.lastBigReductionSize=W;else if(this.p.lastBigReductionSize<W)this.p.bigReductionCount=1,this.p.lastBigReductionStart=q,this.p.lastBigReductionSize=W}let G=U?this.stack[U-1]:0,z=this.bufferBase+this.buffer.length-G;if(Q<X.minRepeatTerm||Z&131072){let j=X.stateFlag(this.state,1)?this.pos:this.reducePos;this.storeNode(Q,q,j,z+4,!0)}if(Z&262144)this.state=this.stack[U];else{let j=this.stack[U-3];this.state=X.getGoto(j,Q,!0)}while(this.stack.length>U)this.stack.pop();this.reduceContext(Q,q)}storeNode(Z,$,J,Q=4,X=!1){if(Z==0&&(!this.stack.length||this.stack[this.stack.length-1]<this.buffer.length+this.bufferBase)){let K=this,Y=this.buffer.length;if(Y==0&&K.parent)Y=K.bufferBase-K.parent.bufferBase,K=K.parent;if(Y>0&&K.buffer[Y-4]==0&&K.buffer[Y-1]>-1){if($==J)return;if(K.buffer[Y-2]>=$){K.buffer[Y-2]=J;return}}}if(!X||this.pos==J)this.buffer.push(Z,$,J,Q);else{let K=this.buffer.length;if(K>0&&this.buffer[K-4]!=0){let Y=!1;for(let U=K;U>0&&this.buffer[U-2]>J;U-=4)if(this.buffer[U-1]>=0){Y=!0;break}if(Y){while(K>0&&this.buffer[K-2]>J)if(this.buffer[K]=this.buffer[K-4],this.buffer[K+1]=this.buffer[K-3],this.buffer[K+2]=this.buffer[K-2],this.buffer[K+3]=this.buffer[K-1],K-=4,Q>4)Q-=4}}this.buffer[K]=Z,this.buffer[K+1]=$,this.buffer[K+2]=J,this.buffer[K+3]=Q}}shift(Z,$,J,Q){if(Z&131072)this.pushState(Z&65535,this.pos);else if((Z&262144)==0){let X=Z,{parser:K}=this.p;if(Q>this.pos||$<=K.maxNode){if(this.pos=Q,!K.stateFlag(X,1))this.reducePos=Q}if(this.pushState(X,J),this.shiftContext($,J),$<=K.maxNode)this.buffer.push($,J,Q,4)}else if(this.pos=Q,this.shiftContext($,J),$<=this.p.parser.maxNode)this.buffer.push($,J,Q,4)}apply(Z,$,J,Q){if(Z&65536)this.reduce(Z);else this.shift(Z,$,J,Q)}useNode(Z,$){let J=this.p.reused.length-1;if(J<0||this.p.reused[J]!=Z)this.p.reused.push(Z),J++;let Q=this.pos;if(this.reducePos=this.pos=Q+Z.length,this.pushState($,Q),this.buffer.push(J,Q,this.reducePos,-1),this.curContext)this.updateContext(this.curContext.tracker.reuse(this.curContext.context,Z,this,this.p.stream.reset(this.pos-Z.length)))}split(){let Z=this,$=Z.buffer.length;while($>0&&Z.buffer[$-2]>Z.reducePos)$-=4;let J=Z.buffer.slice($),Q=Z.bufferBase+$;while(Z&&Q==Z.bufferBase)Z=Z.parent;return new JZ(this.p,this.stack.slice(),this.state,this.reducePos,this.pos,this.score,J,Q,this.curContext,this.lookAhead,Z)}recoverByDelete(Z,$){let J=Z<=this.p.parser.maxNode;if(J)this.storeNode(Z,this.pos,$,4);this.storeNode(0,this.pos,$,J?8:4),this.pos=this.reducePos=$,this.score-=190}canShift(Z){for(let $=new E$(this);;){let J=this.p.parser.stateSlot($.state,4)||this.p.parser.hasAction($.state,Z);if(J==0)return!1;if((J&65536)==0)return!0;$.reduce(J)}}recoverByInsert(Z){if(this.stack.length>=300)return[];let $=this.p.parser.nextStates(this.state);if($.length>8||this.stack.length>=120){let Q=[];for(let X=0,K;X<$.length;X+=2)if((K=$[X+1])!=this.state&&this.p.parser.hasAction(K,Z))Q.push($[X],K);if(this.stack.length<120)for(let X=0;Q.length<8&&X<$.length;X+=2){let K=$[X+1];if(!Q.some((Y,U)=>U&1&&Y==K))Q.push($[X],K)}$=Q}let J=[];for(let Q=0;Q<$.length&&J.length<4;Q+=2){let X=$[Q+1];if(X==this.state)continue;let K=this.split();K.pushState(X,this.pos),K.storeNode(0,K.pos,K.pos,4,!0),K.shiftContext($[Q],this.pos),K.reducePos=this.pos,K.score-=200,J.push(K)}return J}forceReduce(){let{parser:Z}=this.p,$=Z.stateSlot(this.state,5);if(($&65536)==0)return!1;if(!Z.validAction(this.state,$)){let J=$>>19,Q=$&65535,X=this.stack.length-J*3;if(X<0||Z.getGoto(this.stack[X],Q,!1)<0){let K=this.findForcedReduction();if(K==null)return!1;$=K}this.storeNode(0,this.pos,this.pos,4,!0),this.score-=100}return this.reducePos=this.pos,this.reduce($),!0}findForcedReduction(){let{parser:Z}=this.p,$=[],J=(Q,X)=>{if($.includes(Q))return;return $.push(Q),Z.allActions(Q,(K)=>{if(K&393216);else if(K&65536){let Y=(K>>19)-X;if(Y>1){let U=K&65535,q=this.stack.length-Y*3;if(q>=0&&Z.getGoto(this.stack[q],U,!1)>=0)return Y<<19|65536|U}}else{let Y=J(K,X+1);if(Y!=null)return Y}})};return J(this.state,0)}forceAll(){while(!this.p.parser.stateFlag(this.state,2))if(!this.forceReduce()){this.storeNode(0,this.pos,this.pos,4,!0);break}return this}get deadEnd(){if(this.stack.length!=3)return!1;let{parser:Z}=this.p;return Z.data[Z.stateSlot(this.state,1)]==65535&&!Z.stateSlot(this.state,4)}restart(){this.storeNode(0,this.pos,this.pos,4,!0),this.state=this.stack[0],this.stack.length=0}sameState(Z){if(this.state!=Z.state||this.stack.length!=Z.stack.length)return!1;for(let $=0;$<this.stack.length;$+=3)if(this.stack[$]!=Z.stack[$])return!1;return!0}get parser(){return this.p.parser}dialectEnabled(Z){return this.p.parser.dialect.flags[Z]}shiftContext(Z,$){if(this.curContext)this.updateContext(this.curContext.tracker.shift(this.curContext.context,Z,this,this.p.stream.reset($)))}reduceContext(Z,$){if(this.curContext)this.updateContext(this.curContext.tracker.reduce(this.curContext.context,Z,this,this.p.stream.reset($)))}emitContext(){let Z=this.buffer.length-1;if(Z<0||this.buffer[Z]!=-3)this.buffer.push(this.curContext.hash,this.pos,this.pos,-3)}emitLookAhead(){let Z=this.buffer.length-1;if(Z<0||this.buffer[Z]!=-4)this.buffer.push(this.lookAhead,this.pos,this.pos,-4)}updateContext(Z){if(Z!=this.curContext.context){let $=new t4(this.curContext.tracker,Z);if($.hash!=this.curContext.hash)this.emitContext();this.curContext=$}}setLookAhead(Z){if(Z>this.lookAhead)this.emitLookAhead(),this.lookAhead=Z}close(){if(this.curContext&&this.curContext.tracker.strict)this.emitContext();if(this.lookAhead>0)this.emitLookAhead()}}class t4{constructor(Z,$){this.tracker=Z,this.context=$,this.hash=Z.strict?Z.hash($):0}}class E${constructor(Z){this.start=Z,this.state=Z.state,this.stack=Z.stack,this.base=this.stack.length}reduce(Z){let $=Z&65535,J=Z>>19;if(J==0){if(this.stack==this.start.stack)this.stack=this.stack.slice();this.stack.push(this.state,0,0),this.base+=3}else this.base-=(J-1)*3;let Q=this.start.p.parser.getGoto(this.stack[this.base-3],$,!0);this.state=Q}}class QZ{constructor(Z,$,J){if(this.stack=Z,this.pos=$,this.index=J,this.buffer=Z.buffer,this.index==0)this.maybeNext()}static create(Z,$=Z.bufferBase+Z.buffer.length){return new QZ(Z,$,$-Z.bufferBase)}maybeNext(){let Z=this.stack.parent;if(Z!=null)this.index=this.stack.bufferBase-Z.bufferBase,this.stack=Z,this.buffer=Z.buffer}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}next(){if(this.index-=4,this.pos-=4,this.index==0)this.maybeNext()}fork(){return new QZ(this.stack,this.pos,this.index)}}class t5{constructor(){this.start=-1,this.value=-1,this.end=-1,this.extended=-1,this.lookAhead=0,this.mask=0,this.context=0}}var I$=new t5;class P${constructor(Z,$){this.input=Z,this.ranges=$,this.chunk="",this.chunkOff=0,this.chunk2="",this.chunk2Pos=0,this.next=-1,this.token=I$,this.rangeIndex=0,this.pos=this.chunkPos=$[0].from,this.range=$[0],this.end=$[$.length-1].to,this.readNext()}resolveOffset(Z,$){let J=this.range,Q=this.rangeIndex,X=this.pos+Z;while(X<J.from){if(!Q)return null;let K=this.ranges[--Q];X-=J.from-K.to,J=K}while($<0?X>J.to:X>=J.to){if(Q==this.ranges.length-1)return null;let K=this.ranges[++Q];X+=K.from-J.to,J=K}return X}clipPos(Z){if(Z>=this.range.from&&Z<this.range.to)return Z;for(let $ of this.ranges)if($.to>Z)return Math.max(Z,$.from);return this.end}peek(Z){let $=this.chunkOff+Z,J,Q;if($>=0&&$<this.chunk.length)J=this.pos+Z,Q=this.chunk.charCodeAt($);else{let X=this.resolveOffset(Z,1);if(X==null)return-1;if(J=X,J>=this.chunk2Pos&&J<this.chunk2Pos+this.chunk2.length)Q=this.chunk2.charCodeAt(J-this.chunk2Pos);else{let K=this.rangeIndex,Y=this.range;while(Y.to<=J)Y=this.ranges[++K];if(this.chunk2=this.input.chunk(this.chunk2Pos=J),J+this.chunk2.length>Y.to)this.chunk2=this.chunk2.slice(0,Y.to-J);Q=this.chunk2.charCodeAt(0)}}if(J>=this.token.lookAhead)this.token.lookAhead=J+1;return Q}acceptToken(Z,$=0){let J=$?this.resolveOffset($,-1):this.pos;if(J==null||J<this.token.start)throw new RangeError("Token end out of bounds");this.token.value=Z,this.token.end=J}acceptTokenTo(Z,$){this.token.value=Z,this.token.end=$}getChunk(){if(this.pos>=this.chunk2Pos&&this.pos<this.chunk2Pos+this.chunk2.length){let{chunk:Z,chunkPos:$}=this;this.chunk=this.chunk2,this.chunkPos=this.chunk2Pos,this.chunk2=Z,this.chunk2Pos=$,this.chunkOff=this.pos-this.chunkPos}else{this.chunk2=this.chunk,this.chunk2Pos=this.chunkPos;let Z=this.input.chunk(this.pos),$=this.pos+Z.length;this.chunk=$>this.range.to?Z.slice(0,this.range.to-this.pos):Z,this.chunkPos=this.pos,this.chunkOff=0}}readNext(){if(this.chunkOff>=this.chunk.length){if(this.getChunk(),this.chunkOff==this.chunk.length)return this.next=-1}return this.next=this.chunk.charCodeAt(this.chunkOff)}advance(Z=1){this.chunkOff+=Z;while(this.pos+Z>=this.range.to){if(this.rangeIndex==this.ranges.length-1)return this.setDone();Z-=this.range.to-this.pos,this.range=this.ranges[++this.rangeIndex],this.pos=this.range.from}if(this.pos+=Z,this.pos>=this.token.lookAhead)this.token.lookAhead=this.pos+1;return this.readNext()}setDone(){return this.pos=this.chunkPos=this.end,this.range=this.ranges[this.rangeIndex=this.ranges.length-1],this.chunk="",this.next=-1}reset(Z,$){if($)this.token=$,$.start=Z,$.lookAhead=Z+1,$.value=$.extended=-1;else this.token=I$;if(this.pos!=Z){if(this.pos=Z,Z==this.end)return this.setDone(),this;while(Z<this.range.from)this.range=this.ranges[--this.rangeIndex];while(Z>=this.range.to)this.range=this.ranges[++this.rangeIndex];if(Z>=this.chunkPos&&Z<this.chunkPos+this.chunk.length)this.chunkOff=Z-this.chunkPos;else this.chunk="",this.chunkOff=0;this.readNext()}return this}read(Z,$){if(Z>=this.chunkPos&&$<=this.chunkPos+this.chunk.length)return this.chunk.slice(Z-this.chunkPos,$-this.chunkPos);if(Z>=this.chunk2Pos&&$<=this.chunk2Pos+this.chunk2.length)return this.chunk2.slice(Z-this.chunk2Pos,$-this.chunk2Pos);if(Z>=this.range.from&&$<=this.range.to)return this.input.read(Z,$);let J="";for(let Q of this.ranges){if(Q.from>=$)break;if(Q.to>Z)J+=this.input.read(Math.max(Q.from,Z),Math.min(Q.to,$))}return J}}class l9{constructor(Z,$){this.data=Z,this.id=$}token(Z,$){let{parser:J}=$.p;C$(this.data,Z,$,this.id,J.data,J.tokenPrecTable)}}l9.prototype.contextual=l9.prototype.fallback=l9.prototype.extend=!1;class p9{constructor(Z,$,J){this.precTable=$,this.elseToken=J,this.data=typeof Z=="string"?o5(Z):Z}token(Z,$){let J=Z.pos,Q=0;for(;;){let X=Z.next<0,K=Z.resolveOffset(1,1);if(C$(this.data,Z,$,0,this.data,this.precTable),Z.token.value>-1)break;if(this.elseToken==null)return;if(!X)Q++;if(K==null)break;Z.reset(K,Z.token)}if(Q)Z.reset(J,Z.token),Z.acceptToken(this.elseToken,Q)}}p9.prototype.contextual=l9.prototype.fallback=l9.prototype.extend=!1;class _3{constructor(Z,$={}){this.token=Z,this.contextual=!!$.contextual,this.fallback=!!$.fallback,this.extend=!!$.extend}}var A3=typeof process!="undefined"&&process.env&&/\bparse\b/.test(process.env.LOG),r4=null;class T${constructor(Z,$){this.fragments=Z,this.nodeSet=$,this.i=0,this.fragment=null,this.safeFrom=-1,this.safeTo=-1,this.trees=[],this.start=[],this.index=[],this.nextFragment()}nextFragment(){let Z=this.fragment=this.i==this.fragments.length?null:this.fragments[this.i++];if(Z){this.safeFrom=Z.openStart?A$(Z.tree,Z.from+Z.offset,1)-Z.offset:Z.from,this.safeTo=Z.openEnd?A$(Z.tree,Z.to+Z.offset,-1)-Z.offset:Z.to;while(this.trees.length)this.trees.pop(),this.start.pop(),this.index.pop();this.trees.push(Z.tree),this.start.push(-Z.offset),this.index.push(0),this.nextStart=this.safeFrom}else this.nextStart=1e9}nodeAt(Z){if(Z<this.nextStart)return null;while(this.fragment&&this.safeTo<=Z)this.nextFragment();if(!this.fragment)return null;for(;;){let $=this.trees.length-1;if($<0)return this.nextFragment(),null;let J=this.trees[$],Q=this.index[$];if(Q==J.children.length){this.trees.pop(),this.start.pop(),this.index.pop();continue}let X=J.children[Q],K=this.start[$]+J.positions[Q];if(K>Z)return this.nextStart=K,null;if(X instanceof s){if(K==Z){if(K<this.safeFrom)return null;let Y=K+X.length;if(Y<=this.safeTo){let U=X.prop(y.lookAhead);if(!U||Y+U<this.fragment.to)return X}}if(this.index[$]++,K+X.length>=Math.max(this.safeFrom,Z))this.trees.push(X),this.start.push(K),this.index.push(0)}else this.index[$]++,this.nextStart=K+X.length}}}class y${constructor(Z,$){this.stream=$,this.tokens=[],this.mainToken=null,this.actions=[],this.tokens=Z.tokenizers.map((J)=>new t5)}getActions(Z){let $=0,J=null,{parser:Q}=Z.p,{tokenizers:X}=Q,K=Q.stateSlot(Z.state,3),Y=Z.curContext?Z.curContext.hash:0,U=0;for(let q=0;q<X.length;q++){if((1<<q&K)==0)continue;let W=X[q],G=this.tokens[q];if(J&&!W.fallback)continue;if(W.contextual||G.start!=Z.pos||G.mask!=K||G.context!=Y)this.updateCachedToken(G,W,Z),G.mask=K,G.context=Y;if(G.lookAhead>G.end+25)U=Math.max(G.lookAhead,U);if(G.value!=0){let z=$;if(G.extended>-1)$=this.addActions(Z,G.extended,G.end,$);if($=this.addActions(Z,G.value,G.end,$),!W.extend){if(J=G,$>z)break}}}while(this.actions.length>$)this.actions.pop();if(U)Z.setLookAhead(U);if(!J&&Z.pos==this.stream.end)J=new t5,J.value=Z.p.parser.eofTerm,J.start=J.end=Z.pos,$=this.addActions(Z,J.value,J.end,$);return this.mainToken=J,this.actions}getMainToken(Z){if(this.mainToken)return this.mainToken;let $=new t5,{pos:J,p:Q}=Z;return $.start=J,$.end=Math.min(J+1,Q.stream.end),$.value=J==Q.stream.end?Q.parser.eofTerm:0,$}updateCachedToken(Z,$,J){let Q=this.stream.clipPos(J.pos);if($.token(this.stream.reset(Q,Z),J),Z.value>-1){let{parser:X}=J.p;for(let K=0;K<X.specialized.length;K++)if(X.specialized[K]==Z.value){let Y=X.specializers[K](this.stream.read(Z.start,Z.end),J);if(Y>=0&&J.p.parser.dialect.allows(Y>>1)){if((Y&1)==0)Z.value=Y>>1;else Z.extended=Y>>1;break}}}else Z.value=0,Z.end=this.stream.clipPos(Q+1)}putAction(Z,$,J,Q){for(let X=0;X<Q;X+=3)if(this.actions[X]==Z)return Q;return this.actions[Q++]=Z,this.actions[Q++]=$,this.actions[Q++]=J,Q}addActions(Z,$,J,Q){let{state:X}=Z,{parser:K}=Z.p,{data:Y}=K;for(let U=0;U<2;U++)for(let q=K.stateSlot(X,U?2:1);;q+=3){if(Y[q]==65535)if(Y[q+1]==1)q=z9(Y,q+2);else{if(Q==0&&Y[q+1]==2)Q=this.putAction(z9(Y,q+2),$,J,Q);break}if(Y[q]==$)Q=this.putAction(z9(Y,q+1),$,J,Q)}return Q}}class S${constructor(Z,$,J,Q){this.parser=Z,this.input=$,this.ranges=Q,this.recovering=0,this.nextStackID=9812,this.minStackPos=0,this.reused=[],this.stoppedAt=null,this.lastBigReductionStart=-1,this.lastBigReductionSize=0,this.bigReductionCount=0,this.stream=new P$($,Q),this.tokens=new y$(Z,this.stream),this.topTerm=Z.top[1];let{from:X}=Q[0];this.stacks=[JZ.start(this,Z.top[0],X)],this.fragments=J.length&&this.stream.end-X>Z.bufferLength*4?new T$(J,Z.nodeSet):null}get parsedPos(){return this.minStackPos}advance(){let Z=this.stacks,$=this.minStackPos,J=this.stacks=[],Q,X;if(this.bigReductionCount>300&&Z.length==1){let[K]=Z;while(K.forceReduce()&&K.stack.length&&K.stack[K.stack.length-2]>=this.lastBigReductionStart);this.bigReductionCount=this.lastBigReductionSize=0}for(let K=0;K<Z.length;K++){let Y=Z[K];for(;;){if(this.tokens.mainToken=null,Y.pos>$)J.push(Y);else if(this.advanceStack(Y,J,Z))continue;else{if(!Q)Q=[],X=[];Q.push(Y);let U=this.tokens.getMainToken(Y);X.push(U.value,U.end)}break}}if(!J.length){let K=Q&&pK(Q);if(K){if(A3)console.log("Finish with "+this.stackID(K));return this.stackToTree(K)}if(this.parser.strict){if(A3&&Q)console.log("Stuck with token "+(this.tokens.mainToken?this.parser.getName(this.tokens.mainToken.value):"none"));throw new SyntaxError("No parse at "+$)}if(!this.recovering)this.recovering=5}if(this.recovering&&Q){let K=this.stoppedAt!=null&&Q[0].pos>this.stoppedAt?Q[0]:this.runRecovery(Q,X,J);if(K){if(A3)console.log("Force-finish "+this.stackID(K));return this.stackToTree(K.forceAll())}}if(this.recovering){let K=this.recovering==1?1:this.recovering*3;if(J.length>K){J.sort((Y,U)=>U.score-Y.score);while(J.length>K)J.pop()}if(J.some((Y)=>Y.reducePos>$))this.recovering--}else if(J.length>1){Z:for(let K=0;K<J.length-1;K++){let Y=J[K];for(let U=K+1;U<J.length;U++){let q=J[U];if(Y.sameState(q)||Y.buffer.length>500&&q.buffer.length>500)if((Y.score-q.score||Y.buffer.length-q.buffer.length)>0)J.splice(U--,1);else{J.splice(K--,1);continue Z}}}if(J.length>12)J.splice(12,J.length-12)}this.minStackPos=J[0].pos;for(let K=1;K<J.length;K++)if(J[K].pos<this.minStackPos)this.minStackPos=J[K].pos;return null}stopAt(Z){if(this.stoppedAt!=null&&this.stoppedAt<Z)throw new RangeError("Can't move stoppedAt forward");this.stoppedAt=Z}advanceStack(Z,$,J){let Q=Z.pos,{parser:X}=this,K=A3?this.stackID(Z)+" -> ":"";if(this.stoppedAt!=null&&Q>this.stoppedAt)return Z.forceReduce()?Z:null;if(this.fragments){let q=Z.curContext&&Z.curContext.tracker.strict,W=q?Z.curContext.hash:0;for(let G=this.fragments.nodeAt(Q);G;){let z=this.parser.nodeSet.types[G.type.id]==G.type?X.getGoto(Z.state,G.type.id):-1;if(z>-1&&G.length&&(!q||(G.prop(y.contextHash)||0)==W)){if(Z.useNode(G,z),A3)console.log(K+this.stackID(Z)+` (via reuse of ${X.getName(G.type.id)})`);return!0}if(!(G instanceof s)||G.children.length==0||G.positions[0]>0)break;let j=G.children[0];if(j instanceof s&&G.positions[0]==0)G=j;else break}}let Y=X.stateSlot(Z.state,4);if(Y>0){if(Z.reduce(Y),A3)console.log(K+this.stackID(Z)+` (via always-reduce ${X.getName(Y&65535)})`);return!0}if(Z.stack.length>=8400)while(Z.stack.length>6000&&Z.forceReduce());let U=this.tokens.getActions(Z);for(let q=0;q<U.length;){let W=U[q++],G=U[q++],z=U[q++],j=q==U.length||!J,_=j?Z:Z.split(),H=this.tokens.mainToken;if(_.apply(W,G,H?H.start:_.pos,z),A3)console.log(K+this.stackID(_)+` (via ${(W&65536)==0?"shift":`reduce of ${X.getName(W&65535)}`} for ${X.getName(G)} @ ${Q}${_==Z?"":", split"})`);if(j)return!0;else if(_.pos>Q)$.push(_);else J.push(_)}return!1}advanceFully(Z,$){let J=Z.pos;for(;;){if(!this.advanceStack(Z,null,null))return!1;if(Z.pos>J)return L$(Z,$),!0}}runRecovery(Z,$,J){let Q=null,X=!1;for(let K=0;K<Z.length;K++){let Y=Z[K],U=$[K<<1],q=$[(K<<1)+1],W=A3?this.stackID(Y)+" -> ":"";if(Y.deadEnd){if(X)continue;if(X=!0,Y.restart(),A3)console.log(W+this.stackID(Y)+" (restarted)");if(this.advanceFully(Y,J))continue}let G=Y.split(),z=W;for(let j=0;G.forceReduce()&&j<10;j++){if(A3)console.log(z+this.stackID(G)+" (via force-reduce)");if(this.advanceFully(G,J))break;if(A3)z=this.stackID(G)+" -> "}for(let j of Y.recoverByInsert(U)){if(A3)console.log(W+this.stackID(j)+" (via recover-insert)");this.advanceFully(j,J)}if(this.stream.end>Y.pos){if(q==Y.pos)q++,U=0;if(Y.recoverByDelete(U,q),A3)console.log(W+this.stackID(Y)+` (via recover-delete ${this.parser.getName(U)})`);L$(Y,J)}else if(!Q||Q.score<Y.score)Q=Y}return Q}stackToTree(Z){return Z.close(),s.build({buffer:QZ.create(Z),nodeSet:this.parser.nodeSet,topID:this.topTerm,maxBufferLength:this.parser.bufferLength,reused:this.reused,start:this.ranges[0].from,length:Z.pos-this.ranges[0].from,minRepeatType:this.parser.minRepeatTerm})}stackID(Z){let $=(r4||(r4=new WeakMap)).get(Z);if(!$)r4.set(Z,$=String.fromCodePoint(this.nextStackID++));return $+Z}}class b${constructor(Z,$,J){this.source=Z,this.flags=$,this.disabled=J}allows(Z){return!this.disabled||this.disabled[Z]==0}}var o4=(Z)=>Z;class e5{constructor(Z){this.start=Z.start,this.shift=Z.shift||o4,this.reduce=Z.reduce||o4,this.reuse=Z.reuse||o4,this.hash=Z.hash||(()=>0),this.strict=Z.strict!==!1}}class j9 extends p5{constructor(Z){super();if(this.wrappers=[],Z.version!=14)throw new RangeError(`Parser version (${Z.version}) doesn't match runtime version (14)`);let $=Z.nodeNames.split(" ");this.minRepeatTerm=$.length;for(let Y=0;Y<Z.repeatNodeCount;Y++)$.push("");let J=Object.keys(Z.topRules).map((Y)=>Z.topRules[Y][1]),Q=[];for(let Y=0;Y<$.length;Y++)Q.push([]);function X(Y,U,q){Q[Y].push([U,U.deserialize(String(q))])}if(Z.nodeProps)for(let Y of Z.nodeProps){let U=Y[0];if(typeof U=="string")U=y[U];for(let q=1;q<Y.length;){let W=Y[q++];if(W>=0)X(W,U,Y[q++]);else{let G=Y[q+-W];for(let z=-W;z>0;z--)X(Y[q++],U,G);q++}}}if(this.nodeSet=new g5($.map((Y,U)=>K3.define({name:U>=this.minRepeatTerm?void 0:Y,id:U,props:Q[U],top:J.indexOf(U)>-1,error:U==0,skipped:Z.skippedNodes&&Z.skippedNodes.indexOf(U)>-1}))),Z.propSources)this.nodeSet=this.nodeSet.extend(...Z.propSources);this.strict=!1,this.bufferLength=Y1;let K=o5(Z.tokenData);this.context=Z.context,this.specializerSpecs=Z.specialized||[],this.specialized=new Uint16Array(this.specializerSpecs.length);for(let Y=0;Y<this.specializerSpecs.length;Y++)this.specialized[Y]=this.specializerSpecs[Y].term;this.specializers=this.specializerSpecs.map(B$),this.states=o5(Z.states,Uint32Array),this.data=o5(Z.stateData),this.goto=o5(Z.goto),this.maxTerm=Z.maxTerm,this.tokenizers=Z.tokenizers.map((Y)=>typeof Y=="number"?new l9(K,Y):Y),this.topRules=Z.topRules,this.dialects=Z.dialects||{},this.dynamicPrecedences=Z.dynamicPrecedences||null,this.tokenPrecTable=Z.tokenPrec,this.termNames=Z.termNames||null,this.maxNode=this.nodeSet.types.length-1,this.dialect=this.parseDialect(),this.top=this.topRules[Object.keys(this.topRules)[0]]}createParse(Z,$,J){let Q=new S$(this,Z,$,J);for(let X of this.wrappers)Q=X(Q,Z,$,J);return Q}getGoto(Z,$,J=!1){let Q=this.goto;if($>=Q[0])return-1;for(let X=Q[$+1];;){let K=Q[X++],Y=K&1,U=Q[X++];if(Y&&J)return U;for(let q=X+(K>>1);X<q;X++)if(Q[X]==Z)return U;if(Y)return-1}}hasAction(Z,$){let J=this.data;for(let Q=0;Q<2;Q++)for(let X=this.stateSlot(Z,Q?2:1),K;;X+=3){if((K=J[X])==65535)if(J[X+1]==1)K=J[X=z9(J,X+2)];else if(J[X+1]==2)return z9(J,X+2);else break;if(K==$||K==0)return z9(J,X+1)}return 0}stateSlot(Z,$){return this.states[Z*6+$]}stateFlag(Z,$){return(this.stateSlot(Z,0)&$)>0}validAction(Z,$){return!!this.allActions(Z,(J)=>J==$?!0:null)}allActions(Z,$){let J=this.stateSlot(Z,4),Q=J?$(J):void 0;for(let X=this.stateSlot(Z,1);Q==null;X+=3){if(this.data[X]==65535)if(this.data[X+1]==1)X=z9(this.data,X+2);else break;Q=$(z9(this.data,X+1))}return Q}nextStates(Z){let $=[];for(let J=this.stateSlot(Z,1);;J+=3){if(this.data[J]==65535)if(this.data[J+1]==1)J=z9(this.data,J+2);else break;if((this.data[J+2]&1)==0){let Q=this.data[J+1];if(!$.some((X,K)=>K&1&&X==Q))$.push(this.data[J],Q)}}return $}configure(Z){let $=Object.assign(Object.create(j9.prototype),this);if(Z.props)$.nodeSet=this.nodeSet.extend(...Z.props);if(Z.top){let J=this.topRules[Z.top];if(!J)throw new RangeError(`Invalid top rule name ${Z.top}`);$.top=J}if(Z.tokenizers)$.tokenizers=this.tokenizers.map((J)=>{let Q=Z.tokenizers.find((X)=>X.from==J);return Q?Q.to:J});if(Z.specializers)$.specializers=this.specializers.slice(),$.specializerSpecs=this.specializerSpecs.map((J,Q)=>{let X=Z.specializers.find((Y)=>Y.from==J.external);if(!X)return J;let K=Object.assign(Object.assign({},J),{external:X.to});return $.specializers[Q]=B$(K),K});if(Z.contextTracker)$.context=Z.contextTracker;if(Z.dialect)$.dialect=this.parseDialect(Z.dialect);if(Z.strict!=null)$.strict=Z.strict;if(Z.wrap)$.wrappers=$.wrappers.concat(Z.wrap);if(Z.bufferLength!=null)$.bufferLength=Z.bufferLength;return $}hasWrappers(){return this.wrappers.length>0}getName(Z){return this.termNames?this.termNames[Z]:String(Z<=this.maxNode&&this.nodeSet.types[Z].name||Z)}get eofTerm(){return this.maxNode+1}get topNode(){return this.nodeSet.types[this.top[1]]}dynamicPrecedence(Z){let $=this.dynamicPrecedences;return $==null?0:$[Z]||0}parseDialect(Z){let $=Object.keys(this.dialects),J=$.map(()=>!1);if(Z)for(let X of Z.split(" ")){let K=$.indexOf(X);if(K>=0)J[K]=!0}let Q=null;for(let X=0;X<$.length;X++)if(!J[X])for(let K=this.dialects[$[X]],Y;(Y=this.data[K++])!=65535;)(Q||(Q=new Uint8Array(this.maxTerm+1)))[Y]=1;return new b$(Z,J,Q)}static deserialize(Z){return new j9(Z)}}function jY(Z){return Z==45||Z==46||Z==58||Z>=65&&Z<=90||Z==95||Z>=97&&Z<=122||Z>=161}function n$(Z){return Z==9||Z==10||Z==13||Z==32}function J8(Z,$){let J=Z.pos+$;if(m$==J&&h$==Z)return v$;let Q=Z.peek($);while(n$(Q))Q=Z.peek(++$);let X="";for(;;){if(!jY(Q))break;X+=String.fromCharCode(Q),Q=Z.peek(++$)}return h$=Z,m$=J,v$=X?X.toLowerCase():Q==_Y||Q==OY?void 0:null}function u$(Z,$){this.name=Z,this.parent=$}function VY(Z){for(;Z;Z=Z.parent)if(Z.name=="svg"||Z.name=="math")return!0;return!1}function X8(Z,$,J){let Q=2+Z.length;return new _3((X)=>{for(let K=0,Y=0,U=0;;U++){if(X.next<0){if(U)X.acceptToken($);break}if(K==0&&X.next==a$||K==1&&X.next==Q8||K>=2&&K<Q&&X.next==Z.charCodeAt(K-2))K++,Y++;else if((K==2||K==Q)&&n$(X.next))Y++;else if(K==Q&&X.next==KZ){if(U>Y)X.acceptToken($,-Y);else X.acceptToken(J,-(Y-2));break}else if((X.next==10||X.next==13)&&U){X.acceptToken($,1);break}else K=Y=0;X.advance()}})}function o$(Z,$){let J=Object.create(null);for(let Q of Z.getChildren(s$)){let X=Q.getChild(JY),K=Q.getChild($8)||Q.getChild(i$);if(X)J[$.read(X.from,X.to)]=!K?"":K.type.id==$8?$.read(K.from+1,K.to-1):$.read(K.from,K.to)}return J}function f$(Z,$){let J=Z.getChild($Y);return J?$.read(J.from,J.to):" "}function Z8(Z,$,J){let Q;for(let X of J)if(!X.attrs||X.attrs(Q||(Q=o$(Z.node.parent.firstChild,$))))return{parser:X.parser};return null}function K8(Z=[],$=[]){let J=[],Q=[],X=[],K=[];for(let U of Z)(U.tag=="script"?J:U.tag=="style"?Q:U.tag=="textarea"?X:K).push(U);let Y=$.length?Object.create(null):null;for(let U of $)(Y[U.name]||(Y[U.name]=[])).push(U);return j1((U,q)=>{let W=U.type.id;if(W==QY)return Z8(U,q,J);if(W==XY)return Z8(U,q,Q);if(W==KY)return Z8(U,q,X);if(W==c$&&K.length){let G=U.node,z=G.firstChild,j=z&&f$(z,q),_;if(j){for(let H of K)if(H.tag==j&&(!H.attrs||H.attrs(_||(_=o$(z,q))))){let F=G.lastChild,N=F.type.id==UY?F.from:G.to;if(N>z.to)return{parser:H.parser,overlay:[{from:z.to,to:N}]}}}}if(Y&&W==s$){let G=U.node,z;if(z=G.firstChild){let j=Y[q.read(z.from,z.to)];if(j)for(let _ of j){if(_.tagName&&_.tagName!=f$(G.parent,q))continue;let H=G.lastChild;if(H.type.id==$8){let F=H.from+1,N=H.lastChild,D=H.to-(N&&N.isError?0:1);if(D>F)return{parser:_.parser,overlay:[{from:F,to:D}]}}else if(H.type.id==i$)return{parser:_.parser,overlay:[{from:H.from,to:H.to}]}}}}return null})}var dK=54,cK=1,sK=55,iK=2,nK=56,aK=3,k$=4,rK=5,XZ=6,g$=7,l$=8,p$=9,d$=10,oK=11,tK=12,eK=13,e4=57,ZY=14,x$=58,c$=20,$Y=22,s$=23,JY=24,$8=26,i$=27,QY=28,XY=31,KY=34,YY=36,UY=37,qY=0,GY=1,WY={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0,menuitem:!0},zY={dd:!0,li:!0,optgroup:!0,option:!0,p:!0,rp:!0,rt:!0,tbody:!0,td:!0,tfoot:!0,th:!0,tr:!0},w$={dd:{dd:!0,dt:!0},dt:{dd:!0,dt:!0},li:{li:!0},option:{option:!0,optgroup:!0},optgroup:{optgroup:!0},p:{address:!0,article:!0,aside:!0,blockquote:!0,dir:!0,div:!0,dl:!0,fieldset:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,menu:!0,nav:!0,ol:!0,p:!0,pre:!0,section:!0,table:!0,ul:!0},rp:{rp:!0,rt:!0},rt:{rp:!0,rt:!0},tbody:{tbody:!0,tfoot:!0},td:{td:!0,th:!0},tfoot:{tbody:!0},th:{td:!0,th:!0},thead:{tbody:!0,tfoot:!0},tr:{tr:!0}},v$=null,h$=null,m$=0,a$=60,KZ=62,Q8=47,_Y=63,OY=33,HY=45,FY=[XZ,d$,g$,l$,p$],NY=new e5({start:null,shift(Z,$,J,Q){return FY.indexOf($)>-1?new u$(J8(Q,1)||"",Z):Z},reduce(Z,$){return $==c$&&Z?Z.parent:Z},reuse(Z,$,J,Q){let X=$.type.id;return X==XZ||X==YY?new u$(J8(Q,1)||"",Z):Z},strict:!1}),DY=new _3((Z,$)=>{if(Z.next!=a$){if(Z.next<0&&$.context)Z.acceptToken(e4);return}Z.advance();let J=Z.next==Q8;if(J)Z.advance();let Q=J8(Z,0);if(Q===void 0)return;if(!Q)return Z.acceptToken(J?ZY:XZ);let X=$.context?$.context.name:null;if(J){if(Q==X)return Z.acceptToken(oK);if(X&&zY[X])return Z.acceptToken(e4,-2);if($.dialectEnabled(qY))return Z.acceptToken(tK);for(let K=$.context;K;K=K.parent)if(K.name==Q)return;Z.acceptToken(eK)}else{if(Q=="script")return Z.acceptToken(g$);if(Q=="style")return Z.acceptToken(l$);if(Q=="textarea")return Z.acceptToken(p$);if(WY.hasOwnProperty(Q))return Z.acceptToken(d$);if(X&&w$[X]&&w$[X][Q])Z.acceptToken(e4,-1);else Z.acceptToken(XZ)}},{contextual:!0}),RY=new _3((Z)=>{for(let $=0,J=0;;J++){if(Z.next<0){if(J)Z.acceptToken(x$);break}if(Z.next==HY)$++;else if(Z.next==KZ&&$>=2){if(J>=3)Z.acceptToken(x$,-2);break}else $=0;Z.advance()}}),IY=new _3((Z,$)=>{if(Z.next==Q8&&Z.peek(1)==KZ){let J=$.dialectEnabled(GY)||VY($.context);Z.acceptToken(J?rK:k$,2)}else if(Z.next==KZ)Z.acceptToken(k$,1)}),MY=X8("script",dK,cK),AY=X8("style",sK,iK),LY=X8("textarea",nK,aK),BY=V9({"Text RawText":O.content,"StartTag StartCloseTag SelfClosingEndTag EndTag":O.angleBracket,TagName:O.tagName,"MismatchedCloseTag/TagName":[O.tagName,O.invalid],AttributeName:O.attributeName,"AttributeValue UnquotedAttributeValue":O.attributeValue,Is:O.definitionOperator,"EntityReference CharacterReference":O.character,Comment:O.blockComment,ProcessingInst:O.processingInstruction,DoctypeDecl:O.documentMeta}),r$=j9.deserialize({version:14,states:",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",stateData:",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",goto:"%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",nodeNames:"\u26A0 StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",maxTerm:67,context:NY,nodeProps:[["closedBy",-10,1,2,3,7,8,9,10,11,12,13,"EndTag",6,"EndTag SelfClosingEndTag",-4,21,30,33,36,"CloseTag"],["openedBy",4,"StartTag StartCloseTag",5,"StartTag",-4,29,32,35,37,"OpenTag"],["group",-9,14,17,18,19,20,39,40,41,42,"Entity",16,"Entity TextContent",-3,28,31,34,"TextContent Entity"],["isolate",-11,21,29,30,32,33,35,36,37,38,41,42,"ltr",-3,26,27,39,""]],propSources:[BY],skippedNodes:[0],repeatNodeCount:9,tokenData:"!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",tokenizers:[MY,AY,LY,IY,DY,RY,0,1,2,3,4,5],topRules:{Document:[0,15]},dialects:{noMatch:0,selfClosing:509},tokenPrec:511});function Z7(Z){return Z>=65&&Z<=90||Z>=97&&Z<=122||Z>=161}function JJ(Z){return Z>=48&&Z<=57}var EY=99,t$=1,PY=100,CY=101,e$=2,ZJ=[9,10,11,12,13,32,133,160,5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288],TY=58,yY=40,$J=95,SY=91,YZ=45,bY=46,kY=35,xY=37,wY=38,vY=92,hY=10,mY=new _3((Z,$)=>{for(let J=!1,Q=0,X=0;;X++){let{next:K}=Z;if(Z7(K)||K==YZ||K==$J||J&&JJ(K)){if(!J&&(K!=YZ||X>0))J=!0;if(Q===X&&K==YZ)Q++;Z.advance()}else if(K==vY&&Z.peek(1)!=hY){if(Z.advance(),Z.next>-1)Z.advance();J=!0}else{if(J)Z.acceptToken(K==yY?PY:Q==2&&$.canShift(e$)?e$:CY);break}}}),uY=new _3((Z)=>{if(ZJ.includes(Z.peek(-1))){let{next:$}=Z;if(Z7($)||$==$J||$==kY||$==bY||$==SY||$==TY&&Z7(Z.peek(1))||$==YZ||$==wY)Z.acceptToken(EY)}}),fY=new _3((Z)=>{if(!ZJ.includes(Z.peek(-1))){let{next:$}=Z;if($==xY)Z.advance(),Z.acceptToken(t$);if(Z7($)){do Z.advance();while(Z7(Z.next)||JJ(Z.next));Z.acceptToken(t$)}}}),gY=V9({"AtKeyword import charset namespace keyframes media supports":O.definitionKeyword,"from to selector":O.keyword,NamespaceName:O.namespace,KeyframeName:O.labelName,KeyframeRangeName:O.operatorKeyword,TagName:O.tagName,ClassName:O.className,PseudoClassName:O.constant(O.className),IdName:O.labelName,"FeatureName PropertyName":O.propertyName,AttributeName:O.attributeName,NumberLiteral:O.number,KeywordQuery:O.keyword,UnaryQueryOp:O.operatorKeyword,"CallTag ValueName":O.atom,VariableName:O.variableName,Callee:O.operatorKeyword,Unit:O.unit,"UniversalSelector NestingSelector":O.definitionOperator,MatchOp:O.compareOperator,"ChildOp SiblingOp, LogicOp":O.logicOperator,BinOp:O.arithmeticOperator,Important:O.modifier,Comment:O.blockComment,ColorLiteral:O.color,"ParenthesizedContent StringLiteral":O.string,":":O.punctuation,"PseudoOp #":O.derefOperator,"; ,":O.separator,"( )":O.paren,"[ ]":O.squareBracket,"{ }":O.brace}),lY={__proto__:null,lang:32,"nth-child":32,"nth-last-child":32,"nth-of-type":32,"nth-last-of-type":32,dir:32,"host-context":32,url:60,"url-prefix":60,domain:60,regexp:60,selector:138},pY={__proto__:null,"@import":118,"@media":142,"@charset":146,"@namespace":150,"@keyframes":156,"@supports":168},dY={__proto__:null,not:132,only:132},QJ=j9.deserialize({version:14,states:":^QYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DTO$vQ[O'#DWOOQP'#Em'#EmO${QdO'#DgO%jQ[O'#DtO${QdO'#DvO%{Q[O'#DxO&WQ[O'#D{O&`Q[O'#ERO&nQ[O'#ETOOQS'#El'#ElOOQS'#EW'#EWQYQ[OOO&uQXO'#CdO'jQWO'#DcO'oQWO'#EsO'zQ[O'#EsQOQWOOP(UO#tO'#C_POOO)C@[)C@[OOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(aQ[O'#E[O({QWO,58{O)TQ[O,59SO$qQ[O,59oO$vQ[O,59rO(aQ[O,59uO(aQ[O,59wO(aQ[O,59xO)`Q[O'#DbOOQS,58{,58{OOQP'#Ck'#CkOOQO'#DR'#DROOQP,59S,59SO)gQWO,59SO)lQWO,59SOOQP'#DV'#DVOOQP,59o,59oOOQO'#DX'#DXO)qQ`O,59rOOQS'#Cp'#CpO${QdO'#CqO)yQvO'#CsO+ZQtO,5:ROOQO'#Cx'#CxO)lQWO'#CwO+oQWO'#CyO+tQ[O'#DOOOQS'#Ep'#EpOOQO'#Dj'#DjO+|Q[O'#DqO,[QWO'#EtO&`Q[O'#DoO,jQWO'#DrOOQO'#Eu'#EuO)OQWO,5:`O,oQpO,5:bOOQS'#Dz'#DzO,wQWO,5:dO,|Q[O,5:dOOQO'#D}'#D}O-UQWO,5:gO-ZQWO,5:mO-cQWO,5:oOOQS-E8U-E8UO${QdO,59}O-kQ[O'#E^O-xQWO,5;_O-xQWO,5;_POOO'#EV'#EVP.TO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO.zQXO,5:vOOQO-E8Y-E8YOOQS1G.g1G.gOOQP1G.n1G.nO)gQWO1G.nO)lQWO1G.nOOQP1G/Z1G/ZO/XQ`O1G/^O/rQXO1G/aO0YQXO1G/cO0pQXO1G/dO1WQWO,59|O1]Q[O'#DSO1dQdO'#CoOOQP1G/^1G/^O${QdO1G/^O1kQpO,59]OOQS,59_,59_O${QdO,59aO1sQWO1G/mOOQS,59c,59cO1xQ!bO,59eOOQS'#DP'#DPOOQS'#EY'#EYO2QQ[O,59jOOQS,59j,59jO2YQWO'#DjO2eQWO,5:VO2jQWO,5:]O&`Q[O,5:XO&`Q[O'#E_O2rQWO,5;`O2}QWO,5:ZO(aQ[O,5:^OOQS1G/z1G/zOOQS1G/|1G/|OOQS1G0O1G0OO3`QWO1G0OO3eQdO'#EOOOQS1G0R1G0ROOQS1G0X1G0XOOQS1G0Z1G0ZO3pQtO1G/iOOQO,5:x,5:xO4WQ[O,5:xOOQO-E8[-E8[O4eQWO1G0yPOOO-E8T-E8TPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$x7+$xO${QdO7+$xOOQS1G/h1G/hO4pQXO'#ErO4wQWO,59nO4|QtO'#EXO5tQdO'#EoO6OQWO,59ZO6TQpO7+$xOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%X7+%XO6]QWO1G/POOQS-E8W-E8WOOQS1G/U1G/UO${QdO1G/qOOQO1G/w1G/wOOQO1G/s1G/sO6bQWO,5:yOOQO-E8]-E8]O6pQXO1G/xOOQS7+%j7+%jO6wQYO'#CsOOQO'#EQ'#EQO7SQ`O'#EPOOQO'#EP'#EPO7_QWO'#E`O7gQdO,5:jOOQS,5:j,5:jO7rQtO'#E]O${QdO'#E]O8sQdO7+%TOOQO7+%T7+%TOOQO1G0d1G0dO9WQpO<<HdO9`QWO,5;^OOQP1G/Y1G/YOOQS-E8V-E8VO${QdO'#EZO9hQWO,5;ZOOQT1G.u1G.uOOQP<<Hd<<HdOOQS7+$k7+$kO9pQdO7+%]OOQO7+%d7+%dOOQO,5:k,5:kO3hQdO'#EaO7_QWO,5:zOOQS,5:z,5:zOOQS-E8^-E8^OOQS1G0U1G0UO9wQtO,5:wOOQS-E8Z-E8ZOOQO<<Ho<<HoOOQPAN>OAN>OO:xQdO,5:uOOQO-E8X-E8XOOQO<<Hw<<HwOOQO,5:{,5:{OOQO-E8_-E8_OOQS1G0f1G0f",stateData:";[~O#ZOS#[QQ~OUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XRO#bTO~OQfOUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XeO#bTO~O#U#gP~P!ZO#[jO~O#XlO~O]qO^qOqsOtoOxrO!OtO!RvO#VuO#bnO~O!TwO~P#pO`}O#WzO#XyO~O#X!OO~O#X!QO~OQ![Ob!TOf![Oh![On!YOq!ZO#W!WO#X!SO#e!UO~Ob!^O!d!`O!g!aO#X!]O!T#hP~Oh!fOn!YO#X!eO~Oh!hO#X!hO~Ob!^O!d!`O!g!aO#X!]O~O!Y#hP~P%jO]WX]!WX^WXqWXtWXxWX!OWX!RWX!TWX#VWX#bWX~O]!mO~O!Y!nO#U#gX!S#gX~O#U#gX!S#gX~P!ZO#]!qO#^!qO#_!sO~OUYOXYO]VO^VOqXOxWO#XRO#bTO~OtoO!TwO~O`!zO#WzO#XyO~O!S#gP~P!ZOb#RO~Ob#SO~Op#TO|#UO~OP#WObgXjgX!YgX!dgX!ggX#XgXagXQgXfgXhgXngXqgXtgX!XgX#UgX#WgX#egXpgX!SgX~Ob!^Oj#XO!d!`O!g!aO#X!]O!Y#hP~Ob#[O~Op#`O#X#]O~Ob!^O!d!`O!g!aO#X#aO~Ot#eO!b#dO!T#hX!Y#hX~Ob#hO~Oj#XO!Y#jO~O!Y#kO~Oh#lOn!YO~O!T#mO~O!TwO!b#dO~O!TwO!Y#pO~O!Y#QX#U#QX!S#QX~P!ZO!Y!nO#U#ga!S#ga~O#]!qO#^!qO#_#wO~O]qO^qOqsOxrO!OtO!RvO#VuO#bnO~Ot#Oa!T#Oaa#Oa~P.`Op#yO|#zO~O]qO^qOqsOxrO#bnO~Ot}i!O}i!R}i!T}i#V}ia}i~P/aOt!Pi!O!Pi!R!Pi!T!Pi#V!Pia!Pi~P/aOt!Qi!O!Qi!R!Qi!T!Qi#V!Qia!Qi~P/aO!S#{O~Oa#fP~P(aOa#cP~P${Oa$SOj#XO~O!Y$UO~Oh$VOo$VO~Op$XO#X#]O~O]!`Xa!^X!b!^X~O]$YO~Oa$ZO!b#dO~Ot#eO!T#ha!Y#ha~O!b#dOt!ca!T!ca!Y!caa!ca~O!Y$`O~O!S$gO#X$bO#e$aO~Oj#XOt$iO!X$kO!Y!Vi#U!Vi!S!Vi~P${O!Y#Qa#U#Qa!S#Qa~P!ZO!Y!nO#U#gi!S#gi~Oa#fX~P#pOa$oO~Oj#XOQ!{Xa!{Xb!{Xf!{Xh!{Xn!{Xq!{Xt!{X#W!{X#X!{X#e!{X~Ot$qOa#cX~P${Oa$sO~Oj#XOp$tO~Oa$uO~O!b#dOt#Ra!T#Ra!Y#Ra~Oa$wO~P.`OP#WOtgX!TgX~O#e$aOt!sX!T!sX~Ot$yO!TwO~O!S$}O#X$bO#e$aO~Oj#XOQ#PXb#PXf#PXh#PXn#PXq#PXt#PX!X#PX!Y#PX#U#PX#W#PX#X#PX#e#PX!S#PX~Ot$iO!X%QO!Y!Vq#U!Vq!S!Vq~P${Oj#XOp%RO~OtoOa#fa~Ot$qOa#ca~Oa%UO~P${Oj#XOQ#Pab#Paf#Pah#Pan#Paq#Pat#Pa!X#Pa!Y#Pa#U#Pa#W#Pa#X#Pa#e#Pa!S#Pa~Oa!}at!}a~P${O#Zo#[#ej!R#e~",goto:"-g#jPPP#kP#nP#w$WP#w$g#wPP$mPPP$s$|$|P%`P$|P$|%z&^PPPP$|&vP&z'Q#wP'W#w'^P#wP#w#wPPP'd'y(WPP#nPP(_(_(i(_P(_P(_(_P#nP#nP#nP(l#nP(o(r(u(|#nP#nP)R)X)h)v)|*S*^*d*n*t*zPPPPPPPPPP+Q+ZP+v+yP,o,r,x-RRkQ_bOPdhw!n#skYOPdhotuvw!n#R#h#skSOPdhotuvw!n#R#h#sQmTR!tnQ{VR!xqQ!x}Q#Z!XR#x!zq![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SU$d#m$f$yR$x$cq!XZ]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SQ!f^R#l!gT#^!Z#_Q|VR!yqQ!x|R#x!yQ!PWR!{rQ!RXR!|sQxUQ!wpQ#i!cQ#o!jQ#p!kQ${$eR%X$zSgPwQ!phQ#r!nR$l#sZfPhw!n#sa!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$e#m$fR%V$yV$c#m$f$yQ!rjR#v!rQdOShPwU!ldh#sR#s!nQ$P#SU$p$P$v%SQ$v$YR%S$qQ#_!ZR$W#_Q$r$PR%T$rQpUS!vp$nR$n#|Q$j#qR%P$jQ!ogS#t!o#uR#u!pQ#f!_R$^#fQ$f#mR$|$fQ$z$eR%W$z_cOPdhw!n#s^UOPdhw!n#sQ!uoQ!}tQ#OuQ#PvQ#|#RR$_#hR$Q#SQ!VZQ!d]Q#V!TQ#q!m[$O#S$P$Y$q$v%SQ$R#UQ$T#XS$h#q$jQ$m#zR%O$iR#}#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$[#dR$]#e",nodeNames:"\u26A0 Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",maxTerm:117,nodeProps:[["isolate",-2,3,24,""],["openedBy",17,"(",32,"[",50,"{"],["closedBy",18,")",33,"]",51,"}"]],propSources:[gY],skippedNodes:[0,3,87],repeatNodeCount:11,tokenData:"J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#Z~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#Z~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!X[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYxQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS|So`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!RQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#e[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#e[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSt^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#bQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#[~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Y^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS|SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!OQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!OQo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[![Qo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSq^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSp^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!bQo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!TUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!S^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!RQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",tokenizers:[uY,fY,mY,1,2,3,4,new p9("m~RRYZ[z{a~~g~aO#^~~dP!P!Qg~lO#_~~",28,105)],topRules:{StyleSheet:[0,4],Styles:[1,86]},specialized:[{term:100,get:(Z)=>lY[Z]||-1},{term:58,get:(Z)=>pY[Z]||-1},{term:101,get:(Z)=>dY[Z]||-1}],tokenPrec:1200});function U8(){if(!Y8&&typeof document=="object"&&document.body){let{style:Z}=document.body,$=[],J=new Set;for(let Q in Z)if(Q!="cssText"&&Q!="cssFloat"){if(typeof Z[Q]=="string"){if(/[A-Z]/.test(Q))Q=Q.replace(/[A-Z]/g,(X)=>"-"+X.toLowerCase());if(!J.has(Q))$.push(Q),J.add(Q)}}Y8=$.sort().map((Q)=>({type:"property",label:Q}))}return Y8||[]}function iY(Z,$){var J;if(Z.name=="("||Z.type.isError)Z=Z.parent||Z;if(Z.name!="ArgList")return!1;let Q=(J=Z.parent)===null||J===void 0?void 0:J.firstChild;if((Q===null||Q===void 0?void 0:Q.name)!="Callee")return!1;return $.sliceString(Q.from,Q.to)=="var"}function aY(Z){for(let $=Z;;){if($.type.isTop)return $;if(!($=$.parent))return Z}}function UJ(Z,$,J){if($.to-$.from>4096){let Q=YJ.get($);if(Q)return Q;let X=[],K=new Set,Y=$.cursor(u.IncludeAnonymous);if(Y.firstChild())do for(let U of UJ(Z,Y.node,J))if(!K.has(U.label))K.add(U.label),X.push(U);while(Y.nextSibling());return YJ.set($,X),X}else{let Q=[],X=new Set;return $.cursor().iterate((K)=>{var Y;if(J(K)&&K.matchContext(nY)&&((Y=K.node.nextSibling)===null||Y===void 0?void 0:Y.name)==":"){let U=Z.sliceString(K.from,K.to);if(!X.has(U))X.add(U),Q.push({label:U,type:"variable"})}}),Q}}function qJ(){return new u9($7,$7.data.of({autocomplete:oY}))}var Y8=null,XJ=["active","after","any-link","autofill","backdrop","before","checked","cue","default","defined","disabled","empty","enabled","file-selector-button","first","first-child","first-letter","first-line","first-of-type","focus","focus-visible","focus-within","fullscreen","has","host","host-context","hover","in-range","indeterminate","invalid","is","lang","last-child","last-of-type","left","link","marker","modal","not","nth-child","nth-last-child","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","part","placeholder","placeholder-shown","read-only","read-write","required","right","root","scope","selection","slotted","target","target-text","valid","visited","where"].map((Z)=>({type:"class",label:Z})),KJ=["above","absolute","activeborder","additive","activecaption","after-white-space","ahead","alias","all","all-scroll","alphabetic","alternate","always","antialiased","appworkspace","asterisks","attr","auto","auto-flow","avoid","avoid-column","avoid-page","avoid-region","axis-pan","background","backwards","baseline","below","bidi-override","blink","block","block-axis","bold","bolder","border","border-box","both","bottom","break","break-all","break-word","bullets","button","button-bevel","buttonface","buttonhighlight","buttonshadow","buttontext","calc","capitalize","caps-lock-indicator","caption","captiontext","caret","cell","center","checkbox","circle","cjk-decimal","clear","clip","close-quote","col-resize","collapse","color","color-burn","color-dodge","column","column-reverse","compact","condensed","contain","content","contents","content-box","context-menu","continuous","copy","counter","counters","cover","crop","cross","crosshair","currentcolor","cursive","cyclic","darken","dashed","decimal","decimal-leading-zero","default","default-button","dense","destination-atop","destination-in","destination-out","destination-over","difference","disc","discard","disclosure-closed","disclosure-open","document","dot-dash","dot-dot-dash","dotted","double","down","e-resize","ease","ease-in","ease-in-out","ease-out","element","ellipse","ellipsis","embed","end","ethiopic-abegede-gez","ethiopic-halehame-aa-er","ethiopic-halehame-gez","ew-resize","exclusion","expanded","extends","extra-condensed","extra-expanded","fantasy","fast","fill","fill-box","fixed","flat","flex","flex-end","flex-start","footnotes","forwards","from","geometricPrecision","graytext","grid","groove","hand","hard-light","help","hidden","hide","higher","highlight","highlighttext","horizontal","hsl","hsla","hue","icon","ignore","inactiveborder","inactivecaption","inactivecaptiontext","infinite","infobackground","infotext","inherit","initial","inline","inline-axis","inline-block","inline-flex","inline-grid","inline-table","inset","inside","intrinsic","invert","italic","justify","keep-all","landscape","large","larger","left","level","lighter","lighten","line-through","linear","linear-gradient","lines","list-item","listbox","listitem","local","logical","loud","lower","lower-hexadecimal","lower-latin","lower-norwegian","lowercase","ltr","luminosity","manipulation","match","matrix","matrix3d","medium","menu","menutext","message-box","middle","min-intrinsic","mix","monospace","move","multiple","multiple_mask_images","multiply","n-resize","narrower","ne-resize","nesw-resize","no-close-quote","no-drop","no-open-quote","no-repeat","none","normal","not-allowed","nowrap","ns-resize","numbers","numeric","nw-resize","nwse-resize","oblique","opacity","open-quote","optimizeLegibility","optimizeSpeed","outset","outside","outside-shape","overlay","overline","padding","padding-box","painted","page","paused","perspective","pinch-zoom","plus-darker","plus-lighter","pointer","polygon","portrait","pre","pre-line","pre-wrap","preserve-3d","progress","push-button","radial-gradient","radio","read-only","read-write","read-write-plaintext-only","rectangle","region","relative","repeat","repeating-linear-gradient","repeating-radial-gradient","repeat-x","repeat-y","reset","reverse","rgb","rgba","ridge","right","rotate","rotate3d","rotateX","rotateY","rotateZ","round","row","row-resize","row-reverse","rtl","run-in","running","s-resize","sans-serif","saturation","scale","scale3d","scaleX","scaleY","scaleZ","screen","scroll","scrollbar","scroll-position","se-resize","self-start","self-end","semi-condensed","semi-expanded","separate","serif","show","single","skew","skewX","skewY","skip-white-space","slide","slider-horizontal","slider-vertical","sliderthumb-horizontal","sliderthumb-vertical","slow","small","small-caps","small-caption","smaller","soft-light","solid","source-atop","source-in","source-out","source-over","space","space-around","space-between","space-evenly","spell-out","square","start","static","status-bar","stretch","stroke","stroke-box","sub","subpixel-antialiased","svg_masks","super","sw-resize","symbolic","symbols","system-ui","table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row","table-row-group","text","text-bottom","text-top","textarea","textfield","thick","thin","threeddarkshadow","threedface","threedhighlight","threedlightshadow","threedshadow","to","top","transform","translate","translate3d","translateX","translateY","translateZ","transparent","ultra-condensed","ultra-expanded","underline","unidirectional-pan","unset","up","upper-latin","uppercase","url","var","vertical","vertical-text","view-box","visible","visibleFill","visiblePainted","visibleStroke","visual","w-resize","wait","wave","wider","window","windowframe","windowtext","words","wrap","wrap-reverse","x-large","x-small","xor","xx-large","xx-small"].map((Z)=>({type:"keyword",label:Z})).concat(["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"].map((Z)=>({type:"constant",label:Z}))),cY=["a","abbr","address","article","aside","b","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","dd","del","details","dfn","dialog","div","dl","dt","em","figcaption","figure","footer","form","header","hgroup","h1","h2","h3","h4","h5","h6","hr","html","i","iframe","img","input","ins","kbd","label","legend","li","main","meter","nav","ol","output","p","pre","ruby","section","select","small","source","span","strong","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","tr","u","ul"].map((Z)=>({type:"type",label:Z})),M9=/^(\w[\w-]*|-\w[\w-]*|)$/,sY=/^-(-[\w-]*)?$/,YJ=new l5,nY=["Declaration"],rY=(Z)=>($)=>{let{state:J,pos:Q}=$,X=o(J).resolveInner(Q,-1),K=X.type.isError&&X.from==X.to-1&&J.doc.sliceString(X.from,X.to)=="-";if(X.name=="PropertyName"||(K||X.name=="TagName")&&/^(Block|Styles)$/.test(X.resolve(X.to).name))return{from:X.from,options:U8(),validFor:M9};if(X.name=="ValueName")return{from:X.from,options:KJ,validFor:M9};if(X.name=="PseudoClassName")return{from:X.from,options:XJ,validFor:M9};if(Z(X)||($.explicit||K)&&iY(X,J.doc))return{from:Z(X)||K?X.from:Q,options:UJ(J.doc,aY(X),Z),validFor:sY};if(X.name=="TagName"){for(let{parent:q}=X;q;q=q.parent)if(q.name=="Block")return{from:X.from,options:U8(),validFor:M9};return{from:X.from,options:cY,validFor:M9}}if(!$.explicit)return null;let Y=X.resolve(Q),U=Y.childBefore(Q);if(U&&U.name==":"&&Y.name=="PseudoClassSelector")return{from:Q,options:XJ,validFor:M9};if(U&&U.name==":"&&Y.name=="Declaration"||Y.name=="ArgList")return{from:Q,options:KJ,validFor:M9};if(Y.name=="Block"||Y.name=="Styles")return{from:Q,options:U8(),validFor:M9};return null},oY=rY((Z)=>Z.name=="VariableName"),$7=W9.define({name:"css",parser:QJ.configure({props:[f9.add({Declaration:j5()}),_5.add({"Block KeyframeList":a7})]}),languageData:{commentTokens:{block:{open:"/*",close:"*/"}},indentOnInput:/^\s*\}$/,wordChars:"-"}});function q8(Z,$){return Z>=65&&Z<=90||Z>=97&&Z<=122||Z==95||Z>=192||!$&&Z>=48&&Z<=57}var tY=312,GJ=1,eY=2,ZU=3,$U=4,JU=313,QU=315,XU=316,KU=5,YU=6,UU=0,G8=[9,10,11,12,13,32,133,160,5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288],WJ=125,qU=59,W8=47,GU=42,WU=43,zU=45,jU=60,_U=44,OU=63,HU=46,FU=new e5({start:!1,shift(Z,$){return $==KU||$==YU||$==QU?Z:$==XU},strict:!1}),NU=new _3((Z,$)=>{let{next:J}=Z;if(J==WJ||J==-1||$.context)Z.acceptToken(JU)},{contextual:!0,fallback:!0}),DU=new _3((Z,$)=>{let{next:J}=Z,Q;if(G8.indexOf(J)>-1)return;if(J==W8&&((Q=Z.peek(1))==W8||Q==GU))return;if(J!=WJ&&J!=qU&&J!=-1&&!$.context)Z.acceptToken(tY)},{contextual:!0}),RU=new _3((Z,$)=>{let{next:J}=Z;if(J==WU||J==zU){if(Z.advance(),J==Z.next){Z.advance();let Q=!$.context&&$.canShift(GJ);Z.acceptToken(Q?GJ:eY)}}else if(J==OU&&Z.peek(1)==HU){if(Z.advance(),Z.advance(),Z.next<48||Z.next>57)Z.acceptToken(ZU)}},{contextual:!0}),VU=new _3((Z,$)=>{if(Z.next!=jU||!$.dialectEnabled(UU))return;if(Z.advance(),Z.next==W8)return;let J=0;while(G8.indexOf(Z.next)>-1)Z.advance(),J++;if(q8(Z.next,!0)){Z.advance(),J++;while(q8(Z.next,!1))Z.advance(),J++;while(G8.indexOf(Z.next)>-1)Z.advance(),J++;if(Z.next==_U)return;for(let Q=0;;Q++){if(Q==7){if(!q8(Z.next,!0))return;break}if(Z.next!="extends".charCodeAt(Q))break;Z.advance(),J++}}Z.acceptToken($U,-J)}),IU=V9({"get set async static":O.modifier,"for while do if else switch try catch finally return throw break continue default case":O.controlKeyword,"in of await yield void typeof delete instanceof":O.operatorKeyword,"let var const using function class extends":O.definitionKeyword,"import export from":O.moduleKeyword,"with debugger as new":O.keyword,TemplateString:O.special(O.string),super:O.atom,BooleanLiteral:O.bool,this:O.self,null:O.null,Star:O.modifier,VariableName:O.variableName,"CallExpression/VariableName TaggedTemplateExpression/VariableName":O.function(O.variableName),VariableDefinition:O.definition(O.variableName),Label:O.labelName,PropertyName:O.propertyName,PrivatePropertyName:O.special(O.propertyName),"CallExpression/MemberExpression/PropertyName":O.function(O.propertyName),"FunctionDeclaration/VariableDefinition":O.function(O.definition(O.variableName)),"ClassDeclaration/VariableDefinition":O.definition(O.className),PropertyDefinition:O.definition(O.propertyName),PrivatePropertyDefinition:O.definition(O.special(O.propertyName)),UpdateOp:O.updateOperator,"LineComment Hashbang":O.lineComment,BlockComment:O.blockComment,Number:O.number,String:O.string,Escape:O.escape,ArithOp:O.arithmeticOperator,LogicOp:O.logicOperator,BitOp:O.bitwiseOperator,CompareOp:O.compareOperator,RegExp:O.regexp,Equals:O.definitionOperator,Arrow:O.function(O.punctuation),": Spread":O.punctuation,"( )":O.paren,"[ ]":O.squareBracket,"{ }":O.brace,"InterpolationStart InterpolationEnd":O.special(O.brace),".":O.derefOperator,", ;":O.separator,"@":O.meta,TypeName:O.typeName,TypeDefinition:O.definition(O.typeName),"type enum interface implements namespace module declare":O.definitionKeyword,"abstract global Privacy readonly override":O.modifier,"is keyof unique infer":O.operatorKeyword,JSXAttributeValue:O.attributeValue,JSXText:O.content,"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag":O.angleBracket,"JSXIdentifier JSXNameSpacedName":O.tagName,"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName":O.attributeName,"JSXBuiltin/JSXIdentifier":O.standard(O.tagName)}),MU={__proto__:null,export:20,as:25,from:33,default:36,async:41,function:42,extends:54,this:58,true:66,false:66,null:78,void:82,typeof:86,super:102,new:136,delete:148,yield:157,await:161,class:166,public:229,private:229,protected:229,readonly:231,instanceof:250,satisfies:253,in:254,const:256,import:290,keyof:345,unique:349,infer:355,is:391,abstract:411,implements:413,type:415,let:418,var:420,using:423,interface:429,enum:433,namespace:439,module:441,declare:445,global:449,for:468,of:477,while:480,with:484,do:488,if:492,else:494,switch:498,case:504,try:510,catch:514,finally:518,return:522,throw:526,break:530,continue:534,debugger:538},AU={__proto__:null,async:123,get:125,set:127,declare:189,public:191,private:191,protected:191,static:193,abstract:195,override:197,readonly:203,accessor:205,new:395},LU={__proto__:null,"<":187},zJ=j9.deserialize({version:14,states:"$@QO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ?NdO'#CiO+RO!bO'#CjO+aO#tO'#CjO+oO!0LbO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DwO0fQ^O'#EPOOQ?Mr'#EX'#EXO1PQWO'#EUOOQO'#Em'#EmOOQO'#Ih'#IhO1XQWO'#GpO1dQWO'#ElO1iQWO'#ElO3hQ?NdO'#JmO6[Q?NdO'#JnO6uQWO'#F[O6zQ&jO'#FsOOQ?Mr'#Fe'#FeO7VO,YO'#FeO7eQ7[O'#FzO9RQWO'#FyOOQ?Mr'#Jn'#JnOOQ?Mp'#Jm'#JmO9WQWO'#GtOOQU'#KZ'#KZO9cQWO'#IUO9hQ?MxO'#IVOOQU'#JZ'#JZOOQU'#IZ'#IZQ`Q^OOO`Q^OOO9pQMnO'#DsO9wQ^O'#D{O:OQ^O'#D}O9^QWO'#GpO:VQ7[O'#CoO:eQWO'#EkO:pQWO'#EvO:uQ7[O'#FdO;dQWO'#GpOOQO'#K['#K[O;iQWO'#K[O;wQWO'#GxO;wQWO'#GyO;wQWO'#G{O9^QWO'#HOO<nQWO'#HRO>VQWO'#CeO>gQWO'#H_O>oQWO'#HeO>oQWO'#HgO`Q^O'#HiO>oQWO'#HkO>oQWO'#HnO>tQWO'#HtO>yQ?MyO'#HzO%[Q^O'#H|O?UQ?MyO'#IOO?aQ?MyO'#IQO9hQ?MxO'#ISO?lQ?NdO'#CiO@nQ`O'#DiQOQWOOO%[Q^O'#D}OAUQWO'#EQO:VQ7[O'#EkOAaQWO'#EkOAlQpO'#FdOOQU'#Cg'#CgOOQ?Mp'#Dn'#DnOOQ?Mp'#Jq'#JqO%[Q^O'#JqOOQO'#Jt'#JtOOQO'#Id'#IdOBlQ`O'#EdOOQ?Mp'#Ec'#EcOOQ?Mp'#Jx'#JxOChQ?NQO'#EdOCrQ`O'#ETOOQO'#Js'#JsODWQ`O'#JtOEeQ`O'#ETOCrQ`O'#EdPErO#@ItO'#CbPOOO)CDx)CDxOOOO'#I['#I[OE}O!bO,59UOOQ?Mr,59U,59UOOOO'#I]'#I]OF]O#tO,59UO%[Q^O'#D`OOOO'#I_'#I_OFkO!0LbO,59xOOQ?Mr,59x,59xOFyQ^O'#I`OG^QWO'#JoOI]QrO'#JoO+}Q^O'#JoOIdQWO,5:OOIzQWO'#EmOJXQWO'#KOOJdQWO'#J}OJdQWO'#J}OJlQWO,5;ZOJqQWO'#J|OOQ?Mv,5:Z,5:ZOJxQ^O,5:ZOLvQ?NdO,5:cOMgQWO,5:kONQQ?MxO'#J{ONXQWO'#JzO9WQWO'#JzONmQWO'#JzONuQWO,5;YONzQWO'#JzO!#PQrO'#JnOOQ?Mr'#Ci'#CiO%[Q^O'#EPO!#oQrO,5:pOOQQ'#Ju'#JuOOQO-E<f-E<fO9^QWO,5=[O!$VQWO,5=[O!$[Q^O,5;WO!&_Q7[O'#EhO!'xQWO,5;WO!'}Q^O'#DvO!(XQ`O,5;aO!(aQ`O,5;aO%[Q^O,5;aOOQU'#FS'#FSOOQU'#FU'#FUO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bOOQU'#FY'#FYO!(oQ^O,5;sOOQ?Mr,5;x,5;xOOQ?Mr,5;y,5;yOOQ?Mr,5;{,5;{O%[Q^O'#IlO!*rQ?MxO,5<gO%[Q^O,5;bO!&_Q7[O,5;bO!+aQ7[O,5;bO!-RQ7[O'#EZO%[Q^O,5;vOOQ?Mr,5;z,5;zO!-YQ&jO'#FiO!.VQ&jO'#KSO!-qQ&jO'#KSO!.^Q&jO'#KSOOQO'#KS'#KSO!.rQ&jO,5<ROOOS,5<_,5<_O!/TQ^O'#FuOOOS'#Ik'#IkO7VO,YO,5<PO!/[Q&jO'#FwOOQ?Mr,5<P,5<PO!/{Q!LQO'#CvOOQ?Mr'#Cz'#CzO!0`O!0LbO'#DOO!0|Q7[O,5<dO!1TQWO,5<fO!2pQ$ISO'#GVO!2}QWO'#GWO!3SQWO'#GWO!4rQ$ISO'#G[O!5nQ`O'#G`OOQO'#Gk'#GkO!+hQ7[O'#GjOOQO'#Gm'#GmO!+hQ7[O'#GlO!6aQ!LQO'#JgOOQ?Mr'#Jg'#JgO!6kQWO'#JfO!6yQWO'#JeO!7RQWO'#CuOOQ?Mr'#Cx'#CxO!7ZQWO'#CzOOQ?Mr'#DS'#DSOOQ?Mr'#DU'#DUO1SQWO'#DWO!+hQ7[O'#F}O!+hQ7[O'#GPO!7`QWO'#GRO!7eQWO'#GSO!3SQWO'#GYO!+hQ7[O'#G_O!7jQWO'#EnO!8XQWO,5<eOOQ?Mp'#Cr'#CrO!8aQWO'#EoO!9ZQ`O'#EpOOQ?Mp'#J|'#J|O!9bQ?MxO'#K]O9hQ?MxO,5=`O`Q^O,5>pOOQU'#Jc'#JcOOQU,5>q,5>qOOQU-E<X-E<XO!;aQ?NdO,5:_O!9UQ`O,5:]O!=zQ?NdO,5:gO%[Q^O,5:gO!@bQ?NdO,5:iOOQO,5@v,5@vO!ARQ7[O,5=[O!AaQ?MxO'#JdO9RQWO'#JdO!ArQ?MxO,59ZO!A}Q`O,59ZO!BVQ7[O,59ZO:VQ7[O,59ZO!BbQWO,5;WO!BjQWO'#H^O!COQWO'#K`O%[Q^O,5;|O!9UQ`O,5<OO!CWQWO,5=wO!C]QWO,5=wO!CbQWO,5=wO9hQ?MxO,5=wO;wQWO,5=gOOQO'#Cv'#CvO!CpQ`O,5=dO!CxQ7[O,5=eO!DTQWO,5=gO!DYQpO,5=jO!DbQWO'#K[O>tQWO'#HTO9^QWO'#HVO!DgQWO'#HVO:VQ7[O'#HXO!DlQWO'#HXOOQU,5=m,5=mO!DqQWO'#HYO!ESQWO'#CoO!EXQWO,59PO!EcQWO,59PO!GhQ^O,59POOQU,59P,59PO!GxQ?MxO,59PO%[Q^O,59PO!JTQ^O'#HaOOQU'#Hb'#HbOOQU'#Hc'#HcO`Q^O,5=yO!JkQWO,5=yO`Q^O,5>PO`Q^O,5>RO!JpQWO,5>TO`Q^O,5>VO!JuQWO,5>YO!JzQ^O,5>`OOQU,5>f,5>fO%[Q^O,5>fO9hQ?MxO,5>hOOQU,5>j,5>jO# UQWO,5>jOOQU,5>l,5>lO# UQWO,5>lOOQU,5>n,5>nO# rQ`O'#D[O%[Q^O'#JqO# |Q`O'#JqO#!kQ`O'#DjO#!|Q`O'#DjO#%_Q^O'#DjO#%fQWO'#JpO#%nQWO,5:TO#%sQWO'#EqO#&RQWO'#KPO#&ZQWO,5;[O#&`Q`O'#DjO#&mQ`O'#ESOOQ?Mr,5:l,5:lO%[Q^O,5:lO#&tQWO,5:lO>tQWO,5;VO!A}Q`O,5;VO!BVQ7[O,5;VO:VQ7[O,5;VO#&|QWO,5@]O#'RQ(CYO,5:pOOQO-E<b-E<bO#(XQ?NQO,5;OOCrQ`O,5:oO#(cQ`O,5:oOCrQ`O,5;OO!ArQ?MxO,5:oOOQ?Mp'#Eg'#EgOOQO,5;O,5;OO%[Q^O,5;OO#(pQ?MxO,5;OO#({Q?MxO,5;OO!A}Q`O,5:oOOQO,5;U,5;UO#)ZQ?MxO,5;OPOOO'#IY'#IYP#)oO#@ItO,58|POOO,58|,58|OOOO-E<Y-E<YOOQ?Mr1G.p1G.pOOOO-E<Z-E<ZO#)zQpO,59zOOOO-E<]-E<]OOQ?Mr1G/d1G/dO#*PQrO,5>zO+}Q^O,5>zOOQO,5?Q,5?QO#*ZQ^O'#I`OOQO-E<^-E<^O#*hQWO,5@ZO#*pQrO,5@ZO#*wQWO,5@iOOQ?Mr1G/j1G/jO%[Q^O,5@jO#+PQWO'#IfOOQO-E<d-E<dO#*wQWO,5@iOOQ?Mp1G0u1G0uOOQ?Mv1G/u1G/uOOQ?Mv1G0V1G0VO%[Q^O,5@gO#+eQ?MxO,5@gO#+vQ?MxO,5@gO#+}QWO,5@fO9WQWO,5@fO#,VQWO,5@fO#,eQWO'#IiO#+}QWO,5@fOOQ?Mp1G0t1G0tO!(XQ`O,5:rO!(dQ`O,5:rOOQQ,5:t,5:tO#-VQYO,5:tO#-_Q7[O1G2vO9^QWO1G2vOOQ?Mr1G0r1G0rO#-mQ?NdO1G0rO#.rQ?NbO,5;SOOQ?Mr'#GU'#GUO#/`Q?NdO'#JgO!$[Q^O1G0rO#1hQrO'#JrO%[Q^O'#JrO#1rQWO,5:bOOQ?Mr'#D['#D[OOQ?Mr1G0{1G0{O%[Q^O1G0{OOQ?Mr1G1e1G1eO#1wQWO1G0{O#4]Q?NdO1G0|O#4dQ?NdO1G0|O#6zQ?NdO1G0|O#7RQ?NdO1G0|O#9iQ?NdO1G0|O#<PQ?NdO1G0|O#<WQ?NdO1G0|O#<_Q?NdO1G0|O#>uQ?NdO1G0|O#>|Q?NdO1G0|O#AZQ07bO'#CiO#CUQ07bO1G1_O#C]Q07bO'#JnO#CpQ?NdO,5?WOOQ?Mp-E<j-E<jO#E}Q?NdO1G0|O#FzQ?NdO1G0|OOQ?Mr1G0|1G0|O#GzQ7[O'#JwO#HUQWO,5:uO#HZQ?NdO1G1bO#H}Q&jO,5<VO#IVQ&jO,5<WO#I_Q&jO'#FnO#IvQWO'#FmOOQO'#KT'#KTOOQO'#Ij'#IjO#I{Q&jO1G1mOOQ?Mr1G1m1G1mOOOS1G1x1G1xO#J^Q07bO'#JmO#JhQWO,5<aO!(oQ^O,5<aOOOS-E<i-E<iOOQ?Mr1G1k1G1kO#JmQ`O'#KSOOQ?Mr,5<c,5<cO#JuQ`O,5<cO!&_Q7[O'#DQOOOO'#I^'#I^O#JzO!0LbO,59jOOQ?Mr,59j,59jO%[Q^O1G2OO!7eQWO'#InO#KVQ7[O,5<xOOQ?Mr,5<u,5<uO!+hQ7[O'#IqO#KuQ7[O,5=UO!+hQ7[O'#IsO#LhQ7[O,5=WO!&_Q7[O,5=YOOQO1G2Q1G2QO#LrQpO'#CrO#MVQ$ISO'#EoO#NUQ`O'#G`O#NrQpO,5<qO#NyQWO'#KWO9WQWO'#KWO$ XQWO,5<sO!+hQ7[O,5<rO$ ^QWO'#GXO$ oQWO,5<rO$ tQpO'#GUO$!RQpO'#KXO$!]QWO'#KXO!&_Q7[O'#KXO$!bQWO,5<vO$!gQ`O'#GaO!5iQ`O'#GaO$!xQWO'#GcO$!}QWO'#GeO!3SQWO'#GhO$#SQ?MxO'#IpO$#_Q`O,5<zOOQ?Mv,5<z,5<zO$#fQ`O'#GaO$#tQ`O'#GbO$#|Q`O'#GbO$$RQ7[O,5=UO$$cQ7[O,5=WOOQ?Mr,5=Z,5=ZO!+hQ7[O,5@QO!+hQ7[O,5@QO$$sQWO'#IuO$%OQWO,5@PO$%WQWO,59aOOQ?Mr,59f,59fO$%zQ!LSO,59rOOQ?Mr'#Jk'#JkO$&mQ7[O,5<iO$'`Q7[O,5<kO@fQWO,5<mOOQ?Mr,5<n,5<nO$'jQWO,5<tO$'oQ7[O,5<yO$(PQWO'#JzO!$[Q^O1G2PO$(UQWO1G2PO9WQWO'#J}O9WQWO'#EqO%[Q^O'#EqO9WQWO'#IwO$(ZQ?MxO,5@wOOQU1G2z1G2zOOQU1G4[1G4[OOQ?Mr1G/y1G/yOOQ?Mr1G/w1G/wO$*]Q?NdO1G0ROOQU1G2v1G2vO!&_Q7[O1G2vO%[Q^O1G2vO#-bQWO1G2vO$,aQ7[O'#EhOOQ?Mp,5@O,5@OO$,kQ?MxO,5@OOOQU1G.u1G.uO!ArQ?MxO1G.uO!A}Q`O1G.uO!BVQ7[O1G.uO$,|QWO1G0rO$-RQWO'#CiO$-^QWO'#KaO$-fQWO,5=xO$-kQWO'#KaO$-pQWO'#KaO$.OQWO'#I}O$.^QWO,5@zO$.fQrO1G1hOOQ?Mr1G1j1G1jO9^QWO1G3cO@fQWO1G3cO$.mQWO1G3cO$.rQWO1G3cOOQU1G3c1G3cO!DTQWO1G3RO!&_Q7[O1G3OO$.wQWO1G3OOOQU1G3P1G3PO!&_Q7[O1G3PO$.|QWO1G3PO$/UQ`O'#G}OOQU1G3R1G3RO!5iQ`O'#IyO!DYQpO1G3UOOQU1G3U1G3UOOQU,5=o,5=oO$/^Q7[O,5=qO9^QWO,5=qO$!}QWO,5=sO9RQWO,5=sO!A}Q`O,5=sO!BVQ7[O,5=sO:VQ7[O,5=sO$/lQWO'#K_O$/wQWO,5=tOOQU1G.k1G.kO$/|Q?MxO1G.kO@fQWO1G.kO$0XQWO1G.kO9hQ?MxO1G.kO$2aQrO,5@|O$2nQWO,5@|O9WQWO,5@|O$2yQ^O,5={O$3QQWO,5={OOQU1G3e1G3eO`Q^O1G3eOOQU1G3k1G3kOOQU1G3m1G3mO>oQWO1G3oO$3VQ^O1G3qO$7ZQ^O'#HpOOQU1G3t1G3tO$7hQWO'#HvO>tQWO'#HxOOQU1G3z1G3zO$7pQ^O1G3zO9hQ?MxO1G4QOOQU1G4S1G4SOOQ?Mp'#G]'#G]O9hQ?MxO1G4UO9hQ?MxO1G4WO$;wQWO,5@]O!(oQ^O,5;]O9WQWO,5;]O>tQWO,5:UO!(oQ^O,5:UO!A}Q`O,5:UO$;|Q07bO,5:UOOQO,5;],5;]O$<WQ`O'#IaO$<nQWO,5@[OOQ?Mr1G/o1G/oO$<vQ`O'#IgO$=QQWO,5@kOOQ?Mp1G0v1G0vO#!|Q`O,5:UOOQO'#Ic'#IcO$=YQ`O,5:nOOQ?Mv,5:n,5:nO#&wQWO1G0WOOQ?Mr1G0W1G0WO%[Q^O1G0WOOQ?Mr1G0q1G0qO>tQWO1G0qO!A}Q`O1G0qO!BVQ7[O1G0qOOQ?Mp1G5w1G5wO!ArQ?MxO1G0ZOOQO1G0j1G0jO%[Q^O1G0jO$=aQ?MxO1G0jO$=lQ?MxO1G0jO!A}Q`O1G0ZOCrQ`O1G0ZO$=zQ?MxO1G0jOOQO1G0Z1G0ZO$>`Q?NdO1G0jPOOO-E<W-E<WPOOO1G.h1G.hOOOO1G/f1G/fO$>jQpO,5<gO$>rQrO1G4fOOQO1G4l1G4lO%[Q^O,5>zO$>|QWO1G5uO$?UQWO1G6TO$?^QrO1G6UO9WQWO,5?QO$?hQ?NdO1G6RO%[Q^O1G6RO$?xQ?MxO1G6RO$@ZQWO1G6QO$@ZQWO1G6QO9WQWO1G6QO$@cQWO,5?TO9WQWO,5?TOOQO,5?T,5?TO$@wQWO,5?TO$(PQWO,5?TOOQO-E<g-E<gOOQQ1G0^1G0^OOQQ1G0`1G0`O#-YQWO1G0`OOQU7+(b7+(bO!&_Q7[O7+(bO%[Q^O7+(bO$AVQWO7+(bO$AbQ7[O7+(bO$ApQ?NdO,5=UO$CxQ?NdO,5=WO$FQQ?NdO,5=UO$H`Q?NdO,5=WO$JnQ?NdO,59rO$LsQ?NdO,5<iO$N{Q?NdO,5<kO%#TQ?NdO,5<yOOQ?Mr7+&^7+&^O%%cQ?NdO7+&^O%&VQ^O'#IbO%&dQWO,5@^O%&lQrO,5@^OOQ?Mr1G/|1G/|O%&vQWO7+&gOOQ?Mr7+&g7+&gO%&{Q07bO,5:cO%[Q^O7+&yO%'VQ07bO,5:_O%'dQ07bO,5:gO%'nQ07bO,5:iO%'xQ7[O'#IeO%(SQWO,5@cOOQ?Mr1G0a1G0aOOQO1G1q1G1qOOQO1G1r1G1rO%([QtO,5<YO!(oQ^O,5<XOOQO-E<h-E<hOOQ?Mr7+'X7+'XOOOS7+'d7+'dOOOS1G1{1G1{O%(gQWO1G1{OOQ?Mr1G1}1G1}O%(lQpO,59lOOOO-E<[-E<[OOQ?Mr1G/U1G/UO%(sQ?NdO7+'jOOQ?Mr,5?Y,5?YO%)gQpO,5?YOOQ?Mr1G2d1G2dP!&_Q7[O'#InPOQ?Mr-E<l-E<lO%*VQ7[O,5?]OOQ?Mr-E<o-E<oO%*xQ7[O,5?_OOQ?Mr-E<q-E<qO%+SQpO1G2tO%+ZQpO'#CrO%+qQ7[O'#J}O%+xQ^O'#EqOOQ?Mr1G2]1G2]O%,SQWO'#ImO%,hQWO,5@rO%,hQWO,5@rO%,pQWO,5@rO%,{QWO,5@rOOQO1G2_1G2_O%-ZQ7[O1G2^O!+hQ7[O1G2^O%-kQ$ISO'#IoO%-xQWO,5@sO!&_Q7[O,5@sO%.QQpO,5@sOOQ?Mr1G2b1G2bOOQ?Mp,5<{,5<{OOQ?Mp,5<|,5<|O$(PQWO,5<|OCcQWO,5<|O!A}Q`O,5<{OOQO'#Gd'#GdO%.[QWO,5<}OOQ?Mp,5=P,5=PO$(PQWO,5=SOOQO,5?[,5?[OOQO-E<n-E<nOOQ?Mv1G2f1G2fO!5iQ`O,5<{O%.dQWO,5<|O$!xQWO,5<}O%.oQ`O,5<|O!+hQ7[O'#IqO%/`Q7[O1G2pO!+hQ7[O'#IsO%0RQ7[O1G2rO%0]Q7[O1G5lO%0gQ7[O1G5lOOQO,5?a,5?aOOQO-E<s-E<sOOQO1G.{1G.{O!9UQ`O,59tO%[Q^O,59tOOQ?Mr,5<h,5<hO%0tQWO1G2XO!+hQ7[O1G2`O%0yQ?NdO7+'kOOQ?Mr7+'k7+'kO!$[Q^O7+'kO%1mQWO,5;]OOQ?Mp,5?c,5?cOOQ?Mp-E<u-E<uO%1rQpO'#KYO#&wQWO7+(bO4UQrO7+(bO$AYQWO7+(bO%1|Q?NbO'#CiO%2aQ?NbO,5=QO%3RQWO,5=QOOQ?Mp1G5j1G5jOOQU7+$a7+$aO!ArQ?MxO7+$aO!A}Q`O7+$aO!$[Q^O7+&^O%3WQWO'#I|O%3oQWO,5@{OOQO1G3d1G3dO9^QWO,5@{O%3oQWO,5@{O%3wQWO,5@{OOQO,5?i,5?iOOQO-E<{-E<{OOQ?Mr7+'S7+'SO%3|QWO7+(}O9hQ?MxO7+(}O9^QWO7+(}O@fQWO7+(}OOQU7+(m7+(mO%4RQ?NbO7+(jO!&_Q7[O7+(jO%4]QpO7+(kOOQU7+(k7+(kO!&_Q7[O7+(kO%4dQWO'#K^O%4oQWO,5=iOOQO,5?e,5?eOOQO-E<w-E<wOOQU7+(p7+(pO%6RQ`O'#HWOOQU1G3]1G3]O!&_Q7[O1G3]O%[Q^O1G3]O%6YQWO1G3]O%6eQ7[O1G3]O9hQ?MxO1G3_O$!}QWO1G3_O9RQWO1G3_O!A}Q`O1G3_O!BVQ7[O1G3_O%6sQWO'#I{O%7XQWO,5@yO%7aQ`O,5@yOOQ?Mp1G3`1G3`OOQU7+$V7+$VO@fQWO7+$VO9hQ?MxO7+$VO%7lQWO7+$VO%[Q^O1G6hO%[Q^O1G6iO%7qQ?MxO1G6hO%7{Q^O1G3gO%8SQWO1G3gO%8XQ^O1G3gOOQU7+)P7+)PO9hQ?MxO7+)ZO`Q^O7+)]OOQU'#Kd'#KdOOQU'#JO'#JOO%8`Q^O,5>[OOQU,5>[,5>[O%[Q^O'#HqO%8mQWO'#HsOOQU,5>b,5>bO9WQWO,5>bOOQU,5>d,5>dOOQU7+)f7+)fOOQU7+)l7+)lOOQU7+)p7+)pOOQU7+)r7+)rO%8rQ`O1G5wO%9WQ07bO1G0wO%9bQWO1G0wOOQO1G/p1G/pO%9mQ07bO1G/pO>tQWO1G/pO!(oQ^O'#DjOOQO,5>{,5>{OOQO-E<_-E<_OOQO,5?R,5?ROOQO-E<e-E<eO!A}Q`O1G/pOOQO-E<a-E<aOOQ?Mv1G0Y1G0YOOQ?Mr7+%r7+%rO#&wQWO7+%rOOQ?Mr7+&]7+&]O>tQWO7+&]O!A}Q`O7+&]OOQO7+%u7+%uO$>`Q?NdO7+&UOOQO7+&U7+&UO%[Q^O7+&UO%9wQ?MxO7+&UO!ArQ?MxO7+%uO!A}Q`O7+%uO%:SQ?MxO7+&UO%:bQ?NdO7++mO%[Q^O7++mO%:rQWO7++lO%:rQWO7++lOOQO1G4o1G4oO9WQWO1G4oO%:zQWO1G4oOOQQ7+%z7+%zO#&wQWO<<K|O4UQrO<<K|O%;YQWO<<K|OOQU<<K|<<K|O!&_Q7[O<<K|O%[Q^O<<K|O%;bQWO<<K|O%;mQ?NdO,5?]O%=uQ?NdO,5?_O%?}Q?NdO1G2^O%B]Q?NdO1G2pO%DeQ?NdO1G2rO%FmQrO,5>|O%[Q^O,5>|OOQO-E<`-E<`O%FwQWO1G5xOOQ?Mr<<JR<<JRO%GPQ07bO1G0rO%IWQ07bO1G0|O%I_Q07bO1G0|O%K`Q07bO1G0|O%KgQ07bO1G0|O%MhQ07bO1G0|O& iQ07bO1G0|O& pQ07bO1G0|O& wQ07bO1G0|O&#xQ07bO1G0|O&$PQ07bO1G0|O&$WQ?NdO<<JeO&&OQ07bO1G0|O&&{Q07bO1G0|O&'{Q07bO'#JgO&*OQ07bO1G1bO&*]Q07bO1G0RO&*gQ7[O,5?POOQO-E<c-E<cO!(oQ^O'#FpOOQO'#KU'#KUOOQO1G1t1G1tO&*qQWO1G1sO&*vQ07bO,5?WOOOS7+'g7+'gOOOO1G/W1G/WOOQ?Mr1G4t1G4tO!+hQ7[O7+(`O&-WQrO'#CiO&-bQWO,5?XO9WQWO,5?XOOQO-E<k-E<kO&-pQWO1G6^O&-pQWO1G6^O&-xQWO1G6^O&.TQ7[O7+'xO&.eQpO,5?ZO&.oQWO,5?ZO!&_Q7[O,5?ZOOQO-E<m-E<mO&.tQpO1G6_O&/OQWO1G6_OOQ?Mp1G2h1G2hO$(PQWO1G2hOOQ?Mp1G2g1G2gO&/WQWO1G2iO!&_Q7[O1G2iOOQ?Mp1G2n1G2nO!A}Q`O1G2gOCcQWO1G2hO&/]QWO1G2iO&/eQWO1G2hO$!xQWO1G2iO&0XQ7[O,5?]OOQ?Mr-E<p-E<pO&0zQ7[O,5?_OOQ?Mr-E<r-E<rO!+hQ7[O7++WOOQ?Mr1G/`1G/`O&1UQWO1G/`OOQ?Mr7+'s7+'sO&1ZQ7[O7+'zO&1kQ?NdO<<KVOOQ?Mr<<KV<<KVO&2_QWO1G0wO!&_Q7[O'#IvO&2dQWO,5@tO&4fQrO<<K|O!&_Q7[O1G2lOOQU<<G{<<G{O!ArQ?MxO<<G{O&4mQ?NdO<<IxOOQ?Mr<<Ix<<IxOOQO,5?h,5?hO&5aQWO,5?hO&5fQWO,5?hOOQO-E<z-E<zO&5tQWO1G6gO&5tQWO1G6gO9^QWO1G6gO@fQWO<<LiOOQU<<Li<<LiO&5|QWO<<LiO9hQ?MxO<<LiOOQU<<LU<<LUO%4RQ?NbO<<LUOOQU<<LV<<LVO%4]QpO<<LVO&6RQ`O'#IxO&6^QWO,5@xO!(oQ^O,5@xOOQU1G3T1G3TO%+xQ^O'#JqOOQO'#Iz'#IzO9hQ?MxO'#IzO&6fQ`O,5=rOOQU,5=r,5=rO&6mQ`O'#EdO&7RQ`O'#GcO&7WQWO7+(wO&7]QWO7+(wOOQU7+(w7+(wO!&_Q7[O7+(wO%[Q^O7+(wO&7eQWO7+(wOOQU7+(y7+(yO9hQ?MxO7+(yO$!}QWO7+(yO9RQWO7+(yO!A}Q`O7+(yO&7pQWO,5?gOOQO-E<y-E<yOOQO'#HZ'#HZO&7{QWO1G6eO9hQ?MxO<<GqOOQU<<Gq<<GqO@fQWO<<GqO&8TQWO7+,SO&8YQWO7+,TO%[Q^O7+,SO%[Q^O7+,TOOQU7+)R7+)RO&8_QWO7+)RO&8dQ^O7+)RO&8kQWO7+)ROOQU<<Lu<<LuOOQU<<Lw<<LwOOQU-E<|-E<|OOQU1G3v1G3vO&8pQWO,5>]OOQU,5>_,5>_O&8uQWO1G3|O9WQWO7+&cO!(oQ^O7+&cOOQO7+%[7+%[O&8zQ07bO1G6UO>tQWO7+%[OOQ?Mr<<I^<<I^OOQ?Mr<<Iw<<IwO>tQWO<<IwOOQO<<Ip<<IpO$>`Q?NdO<<IpO%[Q^O<<IpOOQO<<Ia<<IaO!ArQ?MxO<<IaO&9UQ?MxO<<IpO&9aQ?NdO<= XO&9qQWO<= WOOQO7+*Z7+*ZO9WQWO7+*ZOOQUANAhANAhO&9yQrOANAhO!&_Q7[OANAhO#&wQWOANAhO4UQrOANAhO&:QQWOANAhO%[Q^OANAhO&:YQ?NdO7+'xO&<hQ?NdO,5?]O&>pQ?NdO,5?_O&@xQ?NdO7+'zO&CWQrO1G4hO&CbQ07bO7+&^O&EcQ07bO,5=UO&GgQ07bO,5=WO&GwQ07bO,5=UO&HXQ07bO,5=WO&HiQ07bO,59rO&JlQ07bO,5<iO&LlQ07bO,5<kO&N}Q07bO,5<yO'!pQ07bO7+'jO'!}Q07bO7+'kO'#[QWO,5<[OOQO7+'_7+'_O'#aQ7[O<<KzOOQO1G4s1G4sO'#hQWO1G4sO'#sQWO1G4sO'$RQWO7++xO'$RQWO7++xO!&_Q7[O1G4uO'$ZQpO1G4uO'$eQWO7++yOOQ?Mp7+(S7+(SO'$mQWO7+(TO'$xQpO7+(TOOQ?Mp7+(R7+(RO$(PQWO7+(SO'%PQWO7+(TO!&_Q7[O7+(TOCcQWO7+(SO'%UQWO7+(TO'%^Q7[O<<NrOOQ?Mr7+$z7+$zO'%hQpO,5?bOOQO-E<t-E<tO'%rQ?NbO7+(WOOQUAN=gAN=gO9^QWO1G5SOOQO1G5S1G5SO'&SQWO1G5SO'&XQWO7+,RO'&XQWO7+,RO9hQ?MxOANBTO@fQWOANBTOOQUANBTANBTOOQUANApANApOOQUANAqANAqO'&aQWO,5?dOOQO-E<v-E<vO'&lQ07bO1G6dOOQO,5?f,5?fOOQO-E<x-E<xOOQU1G3^1G3^O%+xQ^O,5<}O'&vQWO,5<}OOQU<<Lc<<LcO!&_Q7[O<<LcO&7WQWO<<LcO'&{QWO<<LcO%[Q^O<<LcOOQU<<Le<<LeO9hQ?MxO<<LeO$!}QWO<<LeO9RQWO<<LeO''TQ`O1G5RO''`QWO7+,POOQUAN=]AN=]O9hQ?MxOAN=]OOQU<= n<= nOOQU<= o<= oO''hQWO<= nO''mQWO<= oOOQU<<Lm<<LmO''rQWO<<LmO''wQ^O<<LmOOQU1G3w1G3wO>tQWO7+)hO'(OQWO<<I}O'(ZQ07bO<<I}OOQO<<Hv<<HvOOQ?MrAN?cAN?cOOQOAN?[AN?[O$>`Q?NdOAN?[OOQOAN>{AN>{O%[Q^OAN?[OOQO<<Mu<<MuOOQUG27SG27SO!&_Q7[OG27SO#&wQWOG27SO'(eQrOG27SO4UQrOG27SO'(lQWOG27SO'(tQ07bO<<JeO')RQ07bO1G2^O'*tQ07bO,5?]O',tQ07bO,5?_O'.tQ07bO1G2pO'0tQ07bO1G2rO'2tQ07bO<<KVO'3RQ07bO<<IxOOQO1G1v1G1vO!+hQ7[OANAfOOQO7+*_7+*_O'3`QWO7+*_O'3kQWO<= dO'3sQpO7+*aOOQ?Mp<<Ko<<KoO$(PQWO<<KoOCcQWO<<KoO'3}QWO<<KoOOQ?Mp<<Kn<<KnO'4YQpO<<KoO$(PQWO<<KnO'4aQWO<<KoO!&_Q7[O<<KoOOQO7+*n7+*nO9^QWO7+*nO'4fQWO<= mOOQUG27oG27oO9hQ?MxOG27oO!(oQ^O1G5OO'4nQWO7+,OO&7WQWOANA}OOQUANA}ANA}O!&_Q7[OANA}O'4vQWOANA}OOQUANBPANBPO9hQ?MxOANBPO$!}QWOANBPOOQO'#H['#H[OOQO7+*m7+*mOOQUG22wG22wOOQUANEYANEYOOQUANEZANEZOOQUANBXANBXO'5OQWOANBXOOQU<<MS<<MSO!(oQ^OAN?iOOQOG24vG24vO$>`Q?NdOG24vO#&wQWOLD,nOOQULD,nLD,nO!&_Q7[OLD,nO'5TQrOLD,nO'5[Q07bO7+'xO'6}Q07bO,5?]O'8}Q07bO,5?_O':}Q07bO7+'zO'<pQ7[OG27QOOQO<<My<<MyOOQ?MpANAZANAZO$(PQWOANAZOCcQWOANAZO'=QQWOANAZOOQ?MpANAYANAYO'=]QpOANAZOOQO<<NY<<NYOOQULD-ZLD-ZO'=dQ07bO7+*jOOQUG27iG27iO&7WQWOG27iO!&_Q7[OG27iOOQUG27kG27kO9hQ?MxOG27kOOQUG27sG27sO'=nQ07bOG25TOOQOLD*bLD*bOOQU!$(!Y!$(!YO#&wQWO!$(!YO!&_Q7[O!$(!YO'=xQ?NdOG27QOOQ?MpG26uG26uO$(PQWOG26uOCcQWOG26uO'@WQWOG26uOOQULD-TLD-TO&7WQWOLD-TOOQULD-VLD-VOOQU!)9Et!)9EtO#&wQWO!)9EtOOQ?MpLD,aLD,aO$(PQWOLD,aOCcQWOLD,aOOQU!$(!o!$(!oOOQU!.K;`!.K;`O'@cQ07bOG27QOOQ?Mp!$( {!$( {O$(PQWO!$( {OOQ?Mp!)9Eg!)9EgO!(oQ^O'#DwO1PQWO'#EUO'BUQrO'#JmO'B]QMnO'#DsO'BdQ^O'#D{O'BkQrO'#CiO'ERQrO'#CiO!(oQ^O'#D}O'EcQ^O,5;WO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O'#IlO'GfQWO,5<gO!(oQ^O,5;bO'GnQ7[O,5;bO'IXQ7[O,5;bO!(oQ^O,5;vO!&_Q7[O'#GjO'GnQ7[O'#GjO!&_Q7[O'#GlO'GnQ7[O'#GlO1SQWO'#DWO1SQWO'#DWO!&_Q7[O'#F}O'GnQ7[O'#F}O!&_Q7[O'#GPO'GnQ7[O'#GPO!&_Q7[O'#G_O'GnQ7[O'#G_O!(oQ^O,5:gO'I`Q`O'#D[O!(oQ^O,5@jO'EcQ^O1G0rO'IjQ07bO'#CiO!(oQ^O1G2OO!&_Q7[O'#IqO'GnQ7[O'#IqO!&_Q7[O'#IsO'GnQ7[O'#IsO'ItQpO'#CrO!&_Q7[O,5<rO'GnQ7[O,5<rO'EcQ^O1G2PO!(oQ^O7+&yO!&_Q7[O1G2^O'GnQ7[O1G2^O!&_Q7[O'#IqO'GnQ7[O'#IqO!&_Q7[O'#IsO'GnQ7[O'#IsO!&_Q7[O1G2`O'GnQ7[O1G2`O'EcQ^O7+'kO'EcQ^O7+&^O!&_Q7[OANAfO'GnQ7[OANAfO'JXQWO'#ElO'J^QWO'#ElO'JfQWO'#F[O'JkQWO'#EvO'JpQWO'#KOO'J{QWO'#J|O'KWQWO,5;WO'K]Q7[O,5<dO'KdQWO'#GWO'KiQWO'#GWO'KnQWO,5<eO'KvQWO,5;WO'LOQ07bO1G1_O'LVQWO,5<rO'L[QWO,5<rO'LaQWO,5<tO'LfQWO,5<tO'LkQWO1G2PO'LpQWO1G0rO'LuQ7[O<<KzO'L|Q7[O<<KzO7eQ7[O'#FzO9RQWO'#FyOAaQWO'#EkO!(oQ^O,5;sO!3SQWO'#GWO!3SQWO'#GWO!3SQWO'#GYO!3SQWO'#GYO!+hQ7[O7+(`O!+hQ7[O7+(`O%+SQpO1G2tO%+SQpO1G2tO!&_Q7[O,5=YO!&_Q7[O,5=Y",stateData:"'NQ~O'wOS'xOSTOS'yRQ~OPYOQYOSfOY!VOaqOdzOeyOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![XO!fuO!iZO!lYO!mYO!nYO!pvO!rwO!uxO!y]O#t!PO$V|O%e}O%g!QO%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO%v!UO&S!WO&Y!XO&[!YO&^!ZO&`![O&c!]O&i!^O&o!_O&q!`O&s!aO&u!bO&w!cO(OSO(QTO(TUO([VO(j[O(yiO~OWtO~P`OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oa!wOp!nO!P!oO!_!yO!`!vO!a!vO!y;QO#Q!pO#R!pO#S!xO#T!pO#U!pO#X!zO#Y!zO(P!lO(QTO(TUO(`!mO(j!sO~O'y!{O~OP]XR]X[]Xa]Xo]X}]X!P]X!Y]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X'u]X([]X(m]X(t]X(u]X~O!d%PX~P(qO_!}O(Q#PO(R!}O(S#PO~O_#QO(S#PO(T#PO(U#QO~Ou#SO!R#TO(]#TO(^#VO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O;UO(QTO(TUO([VO(j[O(yiO~O!X#ZO!Y#WO!V(cP!V(qP~P+}O!Z#cO~P`OPYOQYOSfOd!jOe!iOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(QTO(TUO([VO(j[O(yiO~Om#mO!X#iO!y]O#f#lO#g#iO(O;VO!h(nP~P.iO!i#oO(O#nO~O!u#sO!y]O%e#tO~O#h#uO~O!d#vO#h#uO~OP$[OR#zO[$cOo$aO}#yO!P#{O!Y$_O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO#y$WO#z$XO([VO(m$YO(t#|O(u#}O~Oa(aX'u(aX's(aX!h(aX!V(aX![(aX%f(aX!d(aX~P1qO#P$dO#]$eO$P$eOP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#s(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX![(bX%f(bX~Oa(bX'u(bX's(bX!V(bX!h(bXs(bX!d(bX~P4UO#]$eO~O$[$hO$^$gO$e$mO~OSfO![$nO$h$oO$j$qO~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{%[O!P${O![$|O!f%aO!i$xO#g%bO$V%_O$r%]O$t%^O$w%`O(O$sO(QTO(TUO([$uO(t$}O(u%POg(XP~O!i%cO~O!P%fO![%gO(O%eO~O!d%kO~Oa%lO'u%lO~O}%pO~P%[O(P!lO~P%[O%k%tO~P%[Oh%VO!i%cO(O%eO(P!lO~Oe%{O!i%cO(O%eO~O#s$RO~O}&QO![%}O!i&PO%g&TO(O%eO(P!lO(QTO(TUO`)SP~O!u#sO~O%p&VO!P)OX![)OX(O)OX~O(O&WO~O!r&]O#t!PO%g!QO%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO~Od&bOe&aO!u&_O%e&`O%x&^O~P;|Od&eOeyO![&dO!r&]O!uxO!y]O#t!PO%e}O%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO%v!UO~Ob&hO#]&kO%g&fO(P!lO~P=RO!i&lO!r&pO~O!i#oO~O![XO~Oa%lO't&xO'u%lO~Oa%lO't&{O'u%lO~Oa%lO't&}O'u%lO~O's]X!V]Xs]X!h]X&W]X![]X%f]X!d]X~P(qO!_'[O!`'TO!a'TO(P!lO(QTO(TUO~Op'RO!P'QO!X'UO(`'PO!Z(dP!Z(sP~P@YOk'_O![']O(O%eO~Oe'dO!i%cO(O%eO~O}&QO!i&PO~Op!nO!P!oO!y;QO#Q!pO#R!pO#T!pO#U!pO(P!lO(QTO(TUO(`!mO(j!sO~O!_'jO!`'iO!a'iO#S!pO#X'kO#Y'kO~PAtOa%lOh%VO!d#vO!i%cO'u%lO(m'mO~O!m'qO#]'oO~PCSOp!nO!P!oO(QTO(TUO(`!mO(j!sO~O![XOp(hX!P(hX!_(hX!`(hX!a(hX!y(hX#Q(hX#R(hX#S(hX#T(hX#U(hX#X(hX#Y(hX(P(hX(Q(hX(T(hX(`(hX(j(hX~O!`'iO!a'iO(P!lO~PCrO'z'uO'{'uO'|'wO~O_!}O(Q'yO(R!}O(S'yO~O_#QO(S'yO(T'yO(U#QO~Ou#SO!R#TO(]#TO(^'}O~O!X(PO!V'SX!V'YX!Y'SX!Y'YX~P+}O!Y(RO!V(cX~OP$[OR#zO[$cOo$aO}#yO!P#{O!Y(RO!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO#y$WO#z$XO([VO(m$YO(t#|O(u#}O~O!V(cX~PGfO!V(WO~O!V(pX!Y(pX!d(pX!h(pX(m(pX~O#](pX#h#aX!Z(pX~PIiO#](XO!V(rX!Y(rX~O!Y(YO!V(qX~O!V(]O~O#]$eO~PIiO!Z(^O~P`OR#zO}#yO!P#{O!i#xO([VOP!ka[!kao!ka!Y!ka!m!ka#O!ka#k!ka#l!ka#m!ka#n!ka#o!ka#p!ka#q!ka#r!ka#s!ka#u!ka#w!ka#y!ka#z!ka(m!ka(t!ka(u!ka~Oa!ka'u!ka's!ka!V!ka!h!kas!ka![!ka%f!ka!d!ka~PKPO!h(_O~O!d#vO#](`O(m'mO!Y(oXa(oX'u(oX~O!h(oX~PMlO!P%fO![%gO!y]O#f(eO#g(dO(O%eO~O!Y(fO!h(nX~O!h(hO~O!P%fO![%gO#g(dO(O%eO~OP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#s(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX~O!d#vO!h(bX~P! YOR(jO}(iO!i#xO#P$dO!y!xa!P!xa~O!u!xa%e!xa![!xa#f!xa#g!xa(O!xa~P!#ZO!u(nO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![XO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;nO!P${O![$|O!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(O(rO(QTO(TUO([$uO(t$}O(u%PO~O#h(tO~O!X(vO!h(fP~P%[O(`(xO(j[O~O!P(zO!i#xO(`(xO(j[O~OP;POQ;POSfOd<zOe!iOmkOo;POpkOqkOwkOy;PO{;PO!PWO!TkO!UkO![!eO!f;SO!iZO!l;PO!m;PO!n;PO!p;TO!r;WO!u!hO$V!kO(O)XO(QTO(TUO([VO(j[O(y<xO~O!Y$_Oa$oa'u$oa's$oa!h$oa!V$oa![$oa%f$oa!d$oa~O#t)`O~P!&_Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{%[O!P${O![$|O!f%aO!i$xO#g%bO$V%_O$r%]O$t%^O$w%`O(O(rO(QTO(TUO([$uO(t$}O(u%PO~Og(kP~P!+hO})eO!d)dO![$]X$Y$]X$[$]X$^$]X$e$]X~O!d)dO![(vX$Y(vX$[(vX$^(vX$e(vX~O})eO~P!-qO})eO![(vX$Y(vX$[(vX$^(vX$e(vX~O![)gO$Y)kO$[)fO$^)fO$e)lO~O!X)oO~P!(oO$[$hO$^$gO$e)sO~Ok$xX}$xX!P$xX#P$xX(t$xX(u$xX~OgjXg$xXkjX!YjX#]jX~P!/gOu)uO(])vO(^)xO~Ok*RO})zO!P){O(t$}O(u%PO~Og)yO~P!0kOg*SO~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;nO!P*UO![*VO!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(QTO(TUO([$uO(t$}O(u%PO~O!X*YO(O*TO!h(zP~P!1YO#h*[O~O!i*]O~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;nO!P${O![$|O!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(O*_O(QTO(TUO([$uO(t$}O(u%PO~O!X*bO!V({P~P!3XOo*nO!P*fO!_*lO!`*eO!a*eO!i*]O#X*mO%]*hO(P!lO(`!mO~O!Z*kO~P!4|O#P$dOk(ZX}(ZX!P(ZX(t(ZX(u(ZX!Y(ZX#](ZX~Og(ZX#}(ZX~P!5uOk*sO#]*rOg(YX!Y(YX~O!Y*tOg(XX~O(O&WOg(XP~Op*wO~O!i*|O~O(O(rO~Om+QO!P%fO!X#iO![%gO!y]O#f#lO#g#iO(O%eO!h(nP~O!d#vO#h+RO~O!P%fO!X+TO!Y(YO![%gO(O%eO!V(qP~Op'XO!P+VO!X+UO(QTO(TUO(`(xO~O!Z(sP~P!8uO!Y+WOa)PX'u)PX~OP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO#y$WO#z$XO([VO(m$YO(t#|O(u#}O~Oa!ga!Y!ga'u!ga's!ga!V!ga!h!gas!ga![!ga%f!ga!d!ga~P!9mOR#zO}#yO!P#{O!i#xO([VOP!oa[!oao!oa!Y!oa!m!oa#O!oa#k!oa#l!oa#m!oa#n!oa#o!oa#p!oa#q!oa#r!oa#s!oa#u!oa#w!oa#y!oa#z!oa(m!oa(t!oa(u!oa~Oa!oa'u!oa's!oa!V!oa!h!oas!oa![!oa%f!oa!d!oa~P!<TOR#zO}#yO!P#{O!i#xO([VOP!qa[!qao!qa!Y!qa!m!qa#O!qa#k!qa#l!qa#m!qa#n!qa#o!qa#p!qa#q!qa#r!qa#s!qa#u!qa#w!qa#y!qa#z!qa(m!qa(t!qa(u!qa~Oa!qa'u!qa's!qa!V!qa!h!qas!qa![!qa%f!qa!d!qa~P!>kOh%VOk+aO![']O%f+`O~O!d+cOa(WX![(WX'u(WX!Y(WX~Oa%lO![XO'u%lO~Oh%VO!i%cO~Oh%VO!i%cO(O%eO~O!d#vO#h(tO~Ob+nO%g+oO(O+kO(QTO(TUO!Z)TP~O!Y+pO`)SX~O[+tO~O`+uO~O![%}O(O%eO(P!lO`)SP~Oh%VO#]+zO~Oh%VOk+}O![$|O~O![,PO~O},RO![XO~O%k%tO~O!u,WO~Oe,]O~Ob,^O(O#nO(QTO(TUO!Z)RP~Oe%{O~O%g!QO(O&WO~P=RO[,cO`,bO~OPYOQYOSfOdzOeyOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO!fuO!iZO!lYO!mYO!nYO!pvO!uxO!y]O%e}O(QTO(TUO([VO(j[O(yiO~O![!eO!r!gO$V!kO(O!dO~P!EkO`,bOa%lO'u%lO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oa,hO!rwO#t!OO%i!OO%j!OO%k!OO~P!HTO!i&lO~O&Y,nO~O![,pO~O&k,rO&m,sOP&haQ&haS&haY&haa&had&hae&ham&hao&hap&haq&haw&hay&ha{&ha!P&ha!T&ha!U&ha![&ha!f&ha!i&ha!l&ha!m&ha!n&ha!p&ha!r&ha!u&ha!y&ha#t&ha$V&ha%e&ha%g&ha%i&ha%j&ha%k&ha%n&ha%p&ha%s&ha%t&ha%v&ha&S&ha&Y&ha&[&ha&^&ha&`&ha&c&ha&i&ha&o&ha&q&ha&s&ha&u&ha&w&ha's&ha(O&ha(Q&ha(T&ha([&ha(j&ha(y&ha!Z&ha&a&hab&ha&f&ha~O(O,xO~Oh!bX!Y!OX!Z!OX!d!OX!d!bX!i!bX#]!OX~O!Y!bX!Z!bX~P# ZO!d,}O#],|Oh(eX!Y#eX!Y(eX!Z#eX!Z(eX!d(eX!i(eX~Oh%VO!d-PO!i%cO!Y!^X!Z!^X~Op!nO!P!oO(QTO(TUO(`!mO~OP;POQ;POSfOd<zOe!iOmkOo;POpkOqkOwkOy;PO{;PO!PWO!TkO!UkO![!eO!f;SO!iZO!l;PO!m;PO!n;PO!p;TO!r;WO!u!hO$V!kO(QTO(TUO([VO(j[O(y<xO~O(O;zO~P##_O!Y-TO!Z(dX~O!Z-VO~O!d,}O#],|O!Y#eX!Z#eX~O!Y-WO!Z(sX~O!Z-YO~O!`-ZO!a-ZO(P!lO~P#!|O!Z-^O~P'_Ok-aO![']O~O!V-fO~Op!xa!_!xa!`!xa!a!xa#Q!xa#R!xa#S!xa#T!xa#U!xa#X!xa#Y!xa(P!xa(Q!xa(T!xa(`!xa(j!xa~P!#ZO!m-kO#]-iO~PCSO!`-mO!a-mO(P!lO~PCrOa%lO#]-iO'u%lO~Oa%lO!d#vO#]-iO'u%lO~Oa%lO!d#vO!m-kO#]-iO'u%lO(m'mO~O'z'uO'{'uO'|-rO~Os-sO~O!V'Sa!Y'Sa~P!9mO!X-wO!V'SX!Y'SX~P%[O!Y(RO!V(ca~O!V(ca~PGfO!Y(YO!V(qa~O!P%fO!X-{O![%gO(O%eO!V'YX!Y'YX~O#]-}O!Y(oa!h(oaa(oa'u(oa~O!d#vO~P#+eO!Y(fO!h(na~O!P%fO![%gO#g.RO(O%eO~Om.WO!P%fO!X.TO![%gO!y]O#f.VO#g.TO(O%eO!Y']X!h']X~OR.[O!i#xO~Oh%VOk._O![']O%f.^O~Oa#`i!Y#`i'u#`i's#`i!V#`i!h#`is#`i![#`i%f#`i!d#`i~P!9mOk=UO})zO!P){O(t$}O(u%PO~O#h#[aa#[a#]#[a'u#[a!Y#[a!h#[a![#[a!V#[a~P#.aO#h(ZXP(ZXR(ZX[(ZXa(ZXo(ZX!i(ZX!m(ZX#O(ZX#k(ZX#l(ZX#m(ZX#n(ZX#o(ZX#p(ZX#q(ZX#r(ZX#s(ZX#u(ZX#w(ZX#y(ZX#z(ZX'u(ZX([(ZX(m(ZX!h(ZX!V(ZX's(ZXs(ZX![(ZX%f(ZX!d(ZX~P!5uO!Y.lO!h(fX~P!9mO!h.oO~O!V.qO~OP$[OR#zO}#yO!P#{O!i#xO!m$[O([VO[#jia#jio#ji!Y#ji#O#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#k#ji~P#1|O#k$OO~P#1|OP$[OR#zOo$aO}#yO!P#{O!i#xO!m$[O#k$OO#l$PO#m$PO#n$PO([VO[#jia#ji!Y#ji#O#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#o#ji~P#4kO#o$QO~P#4kOP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO([VOa#ji!Y#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#u#ji~P#7YOP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO([VO(u#}Oa#ji!Y#ji#y#ji#z#ji'u#ji(m#ji(t#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#w$UO~P#9pO#w#ji~P#9pO#u$SO~P#7YOP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO([VO(t#|O(u#}Oa#ji!Y#ji#z#ji'u#ji(m#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#y#ji~P#<fO#y$WO~P#<fOP]XR]X[]Xo]X}]X!P]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X!Y]X!Z]X~O#}]X~P#?TOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O#u;^O#w;`O#y;bO#z;cO([VO(m$YO(t#|O(u#}O~O#}.sO~P#AbO#P$dO#];iO$P;iO#}(bX!Z(bX~P! YOa'`a!Y'`a'u'`a's'`a!h'`a!V'`as'`a!['`a%f'`a!d'`a~P!9mO[#jia#jio#ji!Y#ji#O#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~OP$[OR#zO}#yO!P#{O!i#xO!m$[O#k$OO#l$PO#m$PO#n$PO([VO(t#ji(u#ji~P#DdOk=UO})zO!P){O(t$}O(u%POP#jiR#ji!i#ji!m#ji#k#ji#l#ji#m#ji#n#ji([#ji~P#DdO!Y.wOg(kX~P!0kOg.yO~Oa$Oi!Y$Oi'u$Oi's$Oi!V$Oi!h$Ois$Oi![$Oi%f$Oi!d$Oi~P!9mO$[.zO$^.zO~O$[.{O$^.{O~O!d)dO#].|O![$bX$Y$bX$[$bX$^$bX$e$bX~O!X.}O~O![)gO$Y/PO$[)fO$^)fO$e/QO~O!Y;dO!Z(aX~P#AbO!Z/RO~O!d)dO$e(vX~O$e/TO~Ou)uO(])vO(^/WO~O!V/[O~P!&_O(t$}Ok%^a}%^a!P%^a(u%^a!Y%^a#]%^a~Og%^a#}%^a~P#K^O(u%POk%`a}%`a!P%`a(t%`a!Y%`a#]%`a~Og%`a#}%`a~P#LPO!YfX!dfX!hfX!h$xX(mfX~P!/gO!X/eO!Y(YO(O/dO!V(qP!V({P~P!1YOo*nO!_*lO!`*eO!a*eO!i*]O#X*mO%]*hO(P!lO~Op'XO!P/fO!X+UO!Z*kO(QTO(TUO(`;wO!Z(sP~P#MjO!h/gO~P#.aO!Y/hO!d#vO(m'mO!h(zX~O!h/mO~O!P%fO!X*YO![%gO(O%eO!h(zP~O#h/oO~O!V$xX!Y$xX!d%PX~P!/gO!Y/pO!V({X~P#.aO!d/rO~O!V/tO~Oh%VOo/xO!d#vO!i%cO(m'mO~O(O/zO~O!d+cO~Oa%lO!Y0OO'u%lO~O!Z0QO~P!4|O!`0RO!a0RO(P!lO(`!mO~O!P0TO(`!mO~O#X0UO~Og%^a!Y%^a#]%^a#}%^a~P!0kOg%`a!Y%`a#]%`a#}%`a~P!0kO(O&WOg'iX!Y'iX~O!Y*tOg(Xa~Og0_O~OR0`O}0`O!P0aO#P$dOkza(tza(uza!Yza#]za~Ogza#}za~P$%]O})zO!P){Ok$qa(t$qa(u$qa!Y$qa#]$qa~Og$qa#}$qa~P$&UO})zO!P){Ok$sa(t$sa(u$sa!Y$sa#]$sa~Og$sa#}$sa~P$&wO#h0dO~Og%Ra!Y%Ra#]%Ra#}%Ra~P!0kO!d#vO~O#h0gO~O!Y+WOa)Pa'u)Pa~OR#zO}#yO!P#{O!i#xO([VOP!oi[!oio!oi!Y!oi!m!oi#O!oi#k!oi#l!oi#m!oi#n!oi#o!oi#p!oi#q!oi#r!oi#s!oi#u!oi#w!oi#y!oi#z!oi(m!oi(t!oi(u!oi~Oa!oi'u!oi's!oi!V!oi!h!ois!oi![!oi%f!oi!d!oi~P$(fOh%VOo%XOp$tOq$tOw%YOy%ZO{;nO!P${O![$|O!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(QTO(TUO([$uO(t$}O(u%PO~Om0pO(O0oO~P$*|O!d+cOa(Wa![(Wa'u(Wa!Y(Wa~O#h0vO~O[]X!YfX!ZfX~O!Y0wO!Z)TX~O!Z0yO~O[0zO~Ob0|O(O+kO(QTO(TUO~O![%}O(O%eO`'qX!Y'qX~O!Y+pO`)Sa~O!h1PO~P!9mO[1SO~O`1TO~O#]1WO~Ok1ZO![$|O~O(`(xO!Z)QP~Oh%VOk1dO![1aO%f1cO~O[1nO!Y1lO!Z)RX~O!Z1oO~O`1qOa%lO'u%lO~O(O#nO(QTO(TUO~O#P$dO#]$eO$P$eOP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX~O#s1tO&W1uOa(bX~P$0dO#]$eO#s1tO&W1uO~Oa1wO~P%[Oa1yO~O&a1|OP&_iQ&_iS&_iY&_ia&_id&_ie&_im&_io&_ip&_iq&_iw&_iy&_i{&_i!P&_i!T&_i!U&_i![&_i!f&_i!i&_i!l&_i!m&_i!n&_i!p&_i!r&_i!u&_i!y&_i#t&_i$V&_i%e&_i%g&_i%i&_i%j&_i%k&_i%n&_i%p&_i%s&_i%t&_i%v&_i&S&_i&Y&_i&[&_i&^&_i&`&_i&c&_i&i&_i&o&_i&q&_i&s&_i&u&_i&w&_i's&_i(O&_i(Q&_i(T&_i([&_i(j&_i(y&_i!Z&_ib&_i&f&_i~Ob2SO!Z2QO&f2RO~P`O![XO!i2UO~O&m,sOP&hiQ&hiS&hiY&hia&hid&hie&him&hio&hip&hiq&hiw&hiy&hi{&hi!P&hi!T&hi!U&hi![&hi!f&hi!i&hi!l&hi!m&hi!n&hi!p&hi!r&hi!u&hi!y&hi#t&hi$V&hi%e&hi%g&hi%i&hi%j&hi%k&hi%n&hi%p&hi%s&hi%t&hi%v&hi&S&hi&Y&hi&[&hi&^&hi&`&hi&c&hi&i&hi&o&hi&q&hi&s&hi&u&hi&w&hi's&hi(O&hi(Q&hi(T&hi([&hi(j&hi(y&hi!Z&hi&a&hib&hi&f&hi~O!V2[O~O!Y!^a!Z!^a~P#AbOp!nO!P!oO!X2bO(`!mO!Y'TX!Z'TX~P@YO!Y-TO!Z(da~O!Y'ZX!Z'ZX~P!8uO!Y-WO!Z(sa~O!Z2iO~P'_Oa%lO#]2rO'u%lO~Oa%lO!d#vO#]2rO'u%lO~Oa%lO!d#vO!m2vO#]2rO'u%lO(m'mO~Oa%lO'u%lO~P!9mO!Y$_Os$oa~O!V'Si!Y'Si~P!9mO!Y(RO!V(ci~O!Y(YO!V(qi~O!V(ri!Y(ri~P!9mO!Y(oi!h(oia(oi'u(oi~P!9mO#]2xO!Y(oi!h(oia(oi'u(oi~O!Y(fO!h(ni~O!P%fO![%gO!y]O#f2}O#g2|O(O%eO~O!P%fO![%gO#g2|O(O%eO~Ok3UO![']O%f3TO~Oh%VOk3UO![']O%f3TO~O#h%^aP%^aR%^a[%^aa%^ao%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a'u%^a([%^a(m%^a!h%^a!V%^a's%^as%^a![%^a%f%^a!d%^a~P#K^O#h%`aP%`aR%`a[%`aa%`ao%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a'u%`a([%`a(m%`a!h%`a!V%`a's%`as%`a![%`a%f%`a!d%`a~P#LPO#h%^aP%^aR%^a[%^aa%^ao%^a!Y%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a'u%^a([%^a(m%^a!h%^a!V%^a's%^a#]%^as%^a![%^a%f%^a!d%^a~P#.aO#h%`aP%`aR%`a[%`aa%`ao%`a!Y%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a'u%`a([%`a(m%`a!h%`a!V%`a's%`a#]%`as%`a![%`a%f%`a!d%`a~P#.aO#hzaPza[zaazaoza!iza!mza#Oza#kza#lza#mza#nza#oza#pza#qza#rza#sza#uza#wza#yza#zza'uza([za(mza!hza!Vza'szasza![za%fza!dza~P$%]O#h$qaP$qaR$qa[$qaa$qao$qa!i$qa!m$qa#O$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa'u$qa([$qa(m$qa!h$qa!V$qa's$qas$qa![$qa%f$qa!d$qa~P$&UO#h$saP$saR$sa[$saa$sao$sa!i$sa!m$sa#O$sa#k$sa#l$sa#m$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#u$sa#w$sa#y$sa#z$sa'u$sa([$sa(m$sa!h$sa!V$sa's$sas$sa![$sa%f$sa!d$sa~P$&wO#h%RaP%RaR%Ra[%Raa%Rao%Ra!Y%Ra!i%Ra!m%Ra#O%Ra#k%Ra#l%Ra#m%Ra#n%Ra#o%Ra#p%Ra#q%Ra#r%Ra#s%Ra#u%Ra#w%Ra#y%Ra#z%Ra'u%Ra([%Ra(m%Ra!h%Ra!V%Ra's%Ra#]%Ras%Ra![%Ra%f%Ra!d%Ra~P#.aOa#`q!Y#`q'u#`q's#`q!V#`q!h#`qs#`q![#`q%f#`q!d#`q~P!9mO!X3^O!Y'UX!h'UX~P%[O!Y.lO!h(fa~O!Y.lO!h(fa~P!9mO!V3aO~O#}!ka!Z!ka~PKPO#}!ga!Y!ga!Z!ga~P#AbO#}!oa!Z!oa~P!<TO#}!qa!Z!qa~P!>kOg'XX!Y'XX~P!+hO!Y.wOg(ka~OSfO![3uO$c3vO~O!Z3zO~Os3{O~P#.aOa$lq!Y$lq'u$lq's$lq!V$lq!h$lqs$lq![$lq%f$lq!d$lq~P!9mO!V3|O~P#.aO})zO!P){O(u%POk'ea(t'ea!Y'ea#]'ea~Og'ea#}'ea~P%)nO})zO!P){Ok'ga(t'ga(u'ga!Y'ga#]'ga~Og'ga#}'ga~P%*aO(m$YO~P#.aO!VfX!V$xX!YfX!Y$xX!d%PX#]fX~P!/gO(O<QO~P!1YOmkO(O4OO~P.iO!P%fO!X4QO![%gO(O%eO!Y'aX!h'aX~O!Y/hO!h(za~O!Y/hO!d#vO!h(za~O!Y/hO!d#vO(m'mO!h(za~Og$zi!Y$zi#]$zi#}$zi~P!0kO!X4YO!V'cX!Y'cX~P!3XO!Y/pO!V({a~O!Y/pO!V({a~P#.aO!d#vO#s4bO~Oo4eO!d#vO(m'mO~O!P4hO(`!mO~O(t$}Ok%^i}%^i!P%^i(u%^i!Y%^i#]%^i~Og%^i#}%^i~P%.wO(u%POk%`i}%`i!P%`i(t%`i!Y%`i#]%`i~Og%`i#}%`i~P%/jOg(Yi!Y(Yi~P!0kO#]4mOg(Yi!Y(Yi~P!0kO!h4pO~Oa$mq!Y$mq'u$mq's$mq!V$mq!h$mqs$mq![$mq%f$mq!d$mq~P!9mO!V4tO~O!Y4uO![(|X~P#.aOa$xX![$xX%Z]X'u$xX!Y$xX~P!/gO%Z4xOalXklX}lX!PlX![lX'ulX(tlX(ulX!YlX~O%Z4xO~Ob5OO%g5PO(O+kO(QTO(TUO!Y'pX!Z'pX~O!Y0wO!Z)Ta~O[5TO~O`5UO~Oa%lO'u%lO~P#.aO![$|O~P#.aO!Y5^O#]5`O!Z)QX~O!Z5aO~Oo5hOp!nO!P5bO!_!yO!`!vO!a!vO!y;QO#Q!pO#R!pO#S!pO#T!pO#U!pO#X5gO#Y!zO(P!lO(QTO(TUO(`!mO(j!sO~O!Z5fO~P%4tOk5mO![1aO%f5lO~Oh%VOk5mO![1aO%f5lO~Ob5tO(O#nO(QTO(TUO!Y'oX!Z'oX~O!Y1lO!Z)Ra~O(QTO(TUO(`5vO~O`5zO~O#s5}O&W6OO~PMlO!h6PO~P%[Oa6RO~Oa6RO~P%[Ob2SO!Z6WO&f2RO~P`O!d6YO~O!d6[Oh(ei!Y(ei!Z(ei!d(ei!i(ei~O!Y#ei!Z#ei~P#AbO#]6]O!Y#ei!Z#ei~O!Y!^i!Z!^i~P#AbOa%lO#]6fO'u%lO~Oa%lO!d#vO#]6fO'u%lO~O!Y(oq!h(oqa(oq'u(oq~P!9mO!Y(fO!h(nq~O!P%fO![%gO#g6mO(O%eO~O![']O%f6pO~Ok6tO![']O%f6pO~O#h'eaP'eaR'ea['eaa'eao'ea!i'ea!m'ea#O'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea'u'ea(['ea(m'ea!h'ea!V'ea's'eas'ea!['ea%f'ea!d'ea~P%)nO#h'gaP'gaR'ga['gaa'gao'ga!i'ga!m'ga#O'ga#k'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#u'ga#w'ga#y'ga#z'ga'u'ga(['ga(m'ga!h'ga!V'ga's'gas'ga!['ga%f'ga!d'ga~P%*aO#h$ziP$ziR$zi[$zia$zio$zi!Y$zi!i$zi!m$zi#O$zi#k$zi#l$zi#m$zi#n$zi#o$zi#p$zi#q$zi#r$zi#s$zi#u$zi#w$zi#y$zi#z$zi'u$zi([$zi(m$zi!h$zi!V$zi's$zi#]$zis$zi![$zi%f$zi!d$zi~P#.aO#h%^iP%^iR%^i[%^ia%^io%^i!i%^i!m%^i#O%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i'u%^i([%^i(m%^i!h%^i!V%^i's%^is%^i![%^i%f%^i!d%^i~P%.wO#h%`iP%`iR%`i[%`ia%`io%`i!i%`i!m%`i#O%`i#k%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#u%`i#w%`i#y%`i#z%`i'u%`i([%`i(m%`i!h%`i!V%`i's%`is%`i![%`i%f%`i!d%`i~P%/jO!Y'Ua!h'Ua~P!9mO!Y.lO!h(fi~O#}#`i!Y#`i!Z#`i~P#AbOP$[OR#zO}#yO!P#{O!i#xO!m$[O([VO[#jio#ji#O#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#k#ji~P%G^O#k;YO~P%G^OP$[OR#zOo;fO}#yO!P#{O!i#xO!m$[O#k;YO#l;ZO#m;ZO#n;ZO([VO[#ji#O#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#o#ji~P%IfO#o;[O~P%IfOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O([VO#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#u#ji~P%KnOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O#u;^O([VO(u#}O#y#ji#z#ji#}#ji(m#ji(t#ji!Y#ji!Z#ji~O#w;`O~P%MoO#w#ji~P%MoO#u;^O~P%KnOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O#u;^O#w;`O([VO(t#|O(u#}O#z#ji#}#ji(m#ji!Y#ji!Z#ji~O#y#ji~P&!OO#y;bO~P&!OOa#{y!Y#{y'u#{y's#{y!V#{y!h#{ys#{y![#{y%f#{y!d#{y~P!9mO[#jio#ji#O#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji!Y#ji!Z#ji~OP$[OR#zO}#yO!P#{O!i#xO!m$[O#k;YO#l;ZO#m;ZO#n;ZO([VO(t#ji(u#ji~P&$zOk=VO})zO!P){O(t$}O(u%POP#jiR#ji!i#ji!m#ji#k#ji#l#ji#m#ji#n#ji([#ji~P&$zO#P$dOP(ZXR(ZX[(ZXk(ZXo(ZX}(ZX!P(ZX!i(ZX!m(ZX#O(ZX#k(ZX#l(ZX#m(ZX#n(ZX#o(ZX#p(ZX#q(ZX#r(ZX#s(ZX#u(ZX#w(ZX#y(ZX#z(ZX#}(ZX([(ZX(m(ZX(t(ZX(u(ZX!Y(ZX!Z(ZX~O#}$Oi!Y$Oi!Z$Oi~P#AbO#}!oi!Z!oi~P$(fOg'Xa!Y'Xa~P!0kO!Z7WO~O!Y'`a!Z'`a~P#AbOP]XR]X[]Xo]X}]X!P]X!V]X!Y]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X~O!d%WX#s%WX~P&+QO!d#vO(m'mO!Y'aa!h'aa~O!Y/hO!h(zi~O!Y/hO!d#vO!h(zi~Og$zq!Y$zq#]$zq#}$zq~P!0kO!V'ca!Y'ca~P#.aO!d7_O~O!Y/pO!V({i~P#.aO!Y/pO!V({i~O!V7cO~O!d#vO#s7hO~Oo7iO!d#vO(m'mO~O})zO!P){O(u%POk'fa(t'fa!Y'fa#]'fa~Og'fa#}'fa~P&/pO})zO!P){Ok'ha(t'ha(u'ha!Y'ha#]'ha~Og'ha#}'ha~P&0cO!V7lO~Og$|q!Y$|q#]$|q#}$|q~P!0kOa$my!Y$my'u$my's$my!V$my!h$mys$my![$my%f$my!d$my~P!9mO!d6[O~O!Y4uO![(|a~O![']OP$SaR$Sa[$Sao$Sa}$Sa!P$Sa!Y$Sa!i$Sa!m$Sa#O$Sa#k$Sa#l$Sa#m$Sa#n$Sa#o$Sa#p$Sa#q$Sa#r$Sa#s$Sa#u$Sa#w$Sa#y$Sa#z$Sa([$Sa(m$Sa(t$Sa(u$Sa~O%f6pO~P&2lOa#`y!Y#`y'u#`y's#`y!V#`y!h#`ys#`y![#`y%f#`y!d#`y~P!9mO[7qO~Ob7sO(O+kO(QTO(TUO~O!Y0wO!Z)Ti~O`7wO~O(`(xO!Y'lX!Z'lX~O!Y5^O!Z)Qa~O!Z8QO~P%4tOp!nO!P8RO(QTO(TUO(`!mO(j!sO~O#X8SO~O![1aO~O![1aO%f8UO~Ok8XO![1aO%f8UO~O[8^O!Y'oa!Z'oa~O!Y1lO!Z)Ri~O!h8bO~O!h8cO~O!h8fO~O!h8fO~P%[Oa8hO~O!d8iO~O!h8jO~O!Y(ri!Z(ri~P#AbOa%lO#]8rO'u%lO~O!Y(oy!h(oya(oy'u(oy~P!9mO!Y(fO!h(ny~O%f8uO~P&2lO![']O%f8uO~O#h$zqP$zqR$zq[$zqa$zqo$zq!Y$zq!i$zq!m$zq#O$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq'u$zq([$zq(m$zq!h$zq!V$zq's$zq#]$zqs$zq![$zq%f$zq!d$zq~P#.aO#h'faP'faR'fa['faa'fao'fa!i'fa!m'fa#O'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa'u'fa(['fa(m'fa!h'fa!V'fa's'fas'fa!['fa%f'fa!d'fa~P&/pO#h'haP'haR'ha['haa'hao'ha!i'ha!m'ha#O'ha#k'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#u'ha#w'ha#y'ha#z'ha'u'ha(['ha(m'ha!h'ha!V'ha's'has'ha!['ha%f'ha!d'ha~P&0cO#h$|qP$|qR$|q[$|qa$|qo$|q!Y$|q!i$|q!m$|q#O$|q#k$|q#l$|q#m$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#u$|q#w$|q#y$|q#z$|q'u$|q([$|q(m$|q!h$|q!V$|q's$|q#]$|qs$|q![$|q%f$|q!d$|q~P#.aO!Y'Ui!h'Ui~P!9mO#}#`q!Y#`q!Z#`q~P#AbO(t$}OP%^aR%^a[%^ao%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a#}%^a([%^a(m%^a!Y%^a!Z%^a~Ok%^a}%^a!P%^a(u%^a~P&CoO(u%POP%`aR%`a[%`ao%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a#}%`a([%`a(m%`a!Y%`a!Z%`a~Ok%`a}%`a!P%`a(t%`a~P&EsOk=VO})zO!P){O(u%PO~P&CoOk=VO})zO!P){O(t$}O~P&EsOR0`O}0`O!P0aO#P$dOPza[zakzaoza!iza!mza#Oza#kza#lza#mza#nza#oza#pza#qza#rza#sza#uza#wza#yza#zza#}za([za(mza(tza(uza!Yza!Zza~O})zO!P){OP$qaR$qa[$qak$qao$qa!i$qa!m$qa#O$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa#}$qa([$qa(m$qa(t$qa(u$qa!Y$qa!Z$qa~O})zO!P){OP$saR$sa[$sak$sao$sa!i$sa!m$sa#O$sa#k$sa#l$sa#m$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#u$sa#w$sa#y$sa#z$sa#}$sa([$sa(m$sa(t$sa(u$sa!Y$sa!Z$sa~Ok=VO})zO!P){O(t$}O(u%PO~OP%RaR%Ra[%Rao%Ra!i%Ra!m%Ra#O%Ra#k%Ra#l%Ra#m%Ra#n%Ra#o%Ra#p%Ra#q%Ra#r%Ra#s%Ra#u%Ra#w%Ra#y%Ra#z%Ra#}%Ra([%Ra(m%Ra!Y%Ra!Z%Ra~P&NlO#}$lq!Y$lq!Z$lq~P#AbO#}$mq!Y$mq!Z$mq~P#AbO!Z9SO~O#}9TO~P!0kO!d#vO!Y'ai!h'ai~O!d#vO(m'mO!Y'ai!h'ai~O!Y/hO!h(zq~O!V'ci!Y'ci~P#.aO!Y/pO!V({q~Oo9[O!d#vO(m'mO~O!V9]O~P#.aO!V9]O~O!d#vO#s9bO~Og(Yy!Y(Yy~P!0kO!Y'ja!['ja~P#.aOa%Yq![%Yq'u%Yq!Y%Yq~P#.aO[9dO~O!Y0wO!Z)Tq~O#]9hO!Y'la!Z'la~O!Y5^O!Z)Qi~P#AbO!P4hO~O![1aO%f9lO~O(QTO(TUO(`9qO~O!Y1lO!Z)Rq~O!h9tO~O!h9uO~O!h9vO~O!h9vO~P%[O#]9yO!Y#ey!Z#ey~O!Y#ey!Z#ey~P#AbO%f:OO~P&2lO![']O%f:OO~O#}#{y!Y#{y!Z#{y~P#AbOP$ziR$zi[$zio$zi!i$zi!m$zi#O$zi#k$zi#l$zi#m$zi#n$zi#o$zi#p$zi#q$zi#r$zi#s$zi#u$zi#w$zi#y$zi#z$zi#}$zi([$zi(m$zi!Y$zi!Z$zi~P&NlO})zO!P){O(u%POP'eaR'ea['eak'eao'ea!i'ea!m'ea#O'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea#}'ea(['ea(m'ea(t'ea!Y'ea!Z'ea~O})zO!P){OP'gaR'ga['gak'gao'ga!i'ga!m'ga#O'ga#k'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#u'ga#w'ga#y'ga#z'ga#}'ga(['ga(m'ga(t'ga(u'ga!Y'ga!Z'ga~O(t$}OP%^iR%^i[%^ik%^io%^i}%^i!P%^i!i%^i!m%^i#O%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i#}%^i([%^i(m%^i(u%^i!Y%^i!Z%^i~O(u%POP%`iR%`i[%`ik%`io%`i}%`i!P%`i!i%`i!m%`i#O%`i#k%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#u%`i#w%`i#y%`i#z%`i#}%`i([%`i(m%`i(t%`i!Y%`i!Z%`i~O#}$my!Y$my!Z$my~P#AbO#}#`y!Y#`y!Z#`y~P#AbO!d#vO!Y'aq!h'aq~O!Y/hO!h(zy~O!V'cq!Y'cq~P#.aOo:YO!d#vO(m'mO~O!V:ZO~P#.aO!V:ZO~O!Y0wO!Z)Ty~O!Y5^O!Z)Qq~O![1aO%f:cO~O!h:fO~O%f:kO~P&2lOP$zqR$zq[$zqo$zq!i$zq!m$zq#O$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq#}$zq([$zq(m$zq!Y$zq!Z$zq~P&NlO})zO!P){O(u%POP'faR'fa['fak'fao'fa!i'fa!m'fa#O'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa#}'fa(['fa(m'fa(t'fa!Y'fa!Z'fa~O})zO!P){OP'haR'ha['hak'hao'ha!i'ha!m'ha#O'ha#k'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#u'ha#w'ha#y'ha#z'ha#}'ha(['ha(m'ha(t'ha(u'ha!Y'ha!Z'ha~OP$|qR$|q[$|qo$|q!i$|q!m$|q#O$|q#k$|q#l$|q#m$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#u$|q#w$|q#y$|q#z$|q#}$|q([$|q(m$|q!Y$|q!Z$|q~P&NlOg%b!Z!Y%b!Z#]%b!Z#}%b!Z~P!0kOo:oO!d#vO(m'mO~O!V:pO~P#.aO!Y'lq!Z'lq~P#AbO!Y#e!Z!Z#e!Z~P#AbO#h%b!ZP%b!ZR%b!Z[%b!Za%b!Zo%b!Z!Y%b!Z!i%b!Z!m%b!Z#O%b!Z#k%b!Z#l%b!Z#m%b!Z#n%b!Z#o%b!Z#p%b!Z#q%b!Z#r%b!Z#s%b!Z#u%b!Z#w%b!Z#y%b!Z#z%b!Z'u%b!Z([%b!Z(m%b!Z!h%b!Z!V%b!Z's%b!Z#]%b!Zs%b!Z![%b!Z%f%b!Z!d%b!Z~P#.aOo:xO!d#vO(m'mO~OP%b!ZR%b!Z[%b!Zo%b!Z!i%b!Z!m%b!Z#O%b!Z#k%b!Z#l%b!Z#m%b!Z#n%b!Z#o%b!Z#p%b!Z#q%b!Z#r%b!Z#s%b!Z#u%b!Z#w%b!Z#y%b!Z#z%b!Z#}%b!Z([%b!Z(m%b!Z!Y%b!Z!Z%b!Z~P&NlOs(aX~P1qO}%pO~P!(oO(P!lO~P!(oO!VfX!YfX#]fX~P&+QOP]XR]X[]Xo]X}]X!P]X!Y]X!YfX!i]X!m]X#O]X#P]X#]]X#]fX#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X~O!dfX!h]X!hfX(mfX~P'BxOP;POQ;POSfOd<zOe!iOmkOo;POpkOqkOwkOy;PO{;PO!PWO!TkO!UkO![XO!f;SO!iZO!l;PO!m;PO!n;PO!p;TO!r;WO!u!hO$V!kO(O)XO(QTO(TUO([VO(j[O(y<xO~O!Y;dO!Z$oa~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;oO!P${O![$|O!f=PO!i$xO#g;uO$V%_O$r;qO$t;sO$w%`O(O(rO(QTO(TUO([$uO(t$}O(u%PO~O#t)`O~P'GnOo!bX(m!bX~P# ZO!Z]X!ZfX~P'BxO!VfX!V$xX!YfX!Y$xX#]fX~P!/gO#h;XO~O!d#vO#h;XO~O#];iO~O#s;]O~O#];xO!Y(rX!Z(rX~O#];iO!Y(pX!Z(pX~O#h;yO~Og;{O~P!0kO#h<RO~O#h<SO~O!d#vO#h<TO~O!d#vO#h;yO~O#}<UO~P#AbO#h<VO~O#h<WO~O#h<]O~O#h<^O~O#h<_O~O#h<`O~O#}<aO~P!0kO#}<bO~P!0kO#P#Q#R#T#U#X#f#g#r(y$r$t$w%Z%e%f%g%n%p%s%t%v%x~'yT#l!U'w(P#mp#k#no}'x$['x(O$^(`~",goto:"$4Q)XPPPPPP)YPP)]P)nP+O/PPPPP5xPP6`PP<V?mP@QP@QPPP@QPBRP@QP@QP@QPBVPB[PByPGrPPPGvPPPPGvJxPPPKOKzPGvPGvPPNYGvPPPGvPGvP!!aGvP!%v!&{!'UP!'x!'|!'x!+YPPPPPPP!+y!&{PP!,Z!-gP!0jGvGv!0o!3z!8b!8b!<`PPP!<hGvPPPPPPPPPPP!?vP!ATPPGv!BfPGvPGvGvGvGvGvPGv!CxP!GRP!JWP!J[!Jf!Jj!JjP!GOP!Jn!JnP!MsP!MwGvGv!M}##RBV@QP@QP@Q@QP#$_@Q@Q#&j@Q#)Z@Q#+`@Q@Q#,O#.]#.]#.b#.k#.]#.wP#.]P@Q#/a@Q#3S@Q@Q5xPPP#6{PPP#7f#7fP#7fP#7|#7fPP#8SP#7yP#7y#8g#7y#9R#9X5u)]#9[)]P#9c#9c#9cP)]P)]P)]P)]PP)]P#9i#9lP#9l)]P#9pP#9sP)]P)]P)]P)]P)]P)])]PP#9y#:P#:[#:b#:h#:n#:t#;S#;Y#;d#;j#;t#;z#<[#<b#=S#=f#=l#=r#>Q#>g#@V#@e#@l#BR#Ba#C|#D[#Db#Dh#Dn#Dx#EO#EU#E`#Er#ExPPPPPPPPPP#FOPPPPPPP#Fs#Iz#KZ#Kb#KjPPP$!sP$!|$%t$,^$,a$,d$-P$-S$-Z$-cP$-i$-lP$.Y$.^$/U$0d$0i$1PPP$1U$1[$1`P$1c$1g$1k$2a$2x$3a$3e$3h$3k$3q$3t$3x$3|R!|RoqOXst!Z#d%k&o&q&r&t,k,p1|2PY!vQ']-]1a5eQ%rvQ%zyQ&R|Q&g!VS'T!e-TQ'c!iS'i!r!yU*e$|*V*jQ+i%{Q+v&TQ,[&aQ-Z'[Q-e'dQ-m'jQ0R*lQ1k,]R;v;T%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V,h,k,p-a-i-w-}.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3^5b5m5}6O6R6f8R8X8h8rS#q];Q!r)Z$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{U*y%[;n;oQ+n%}Q,^&dQ,e&lQ0m+aQ0q+cQ0|+oQ1s,cQ3Q._Q5O0wQ5t1lQ6r3UQ7s5PR8x6t'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{t!nQ!r!v!y!z'T'[']'i'j'k-T-Z-]-m1a5e5g$|$ti#v$b$c$d$x${%O%Q%]%^%b)u){)}*P*R*U*[*b*r*s+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4m4u4x5l6p7_7h8U8u9T9b9l:O:c:k;g;h;j;k;l;m;p;q;r;s;t;u;|;}<O<P<R<S<V<W<X<Y<Z<[<]<^<a<b<x=Q=R=U=VQ&U|Q'R!eU'X%g*V-WQ+n%}Q,^&dQ0c*|Q0|+oQ1R+uQ1r,bQ1s,cQ5O0wQ5X1TQ5t1lQ5w1nQ5x1qQ7s5PQ7v5UQ8a5zQ9g7wR9r8^rnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PR,`&h&x^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<z<{[#]WZ#W#Z'U(P!b%hm#h#i#l$x%c%f(Y(d(e(f*U*Y*]+T+U+W,g,}-{.R.S.T.V/e/h2U2|2}4Q6[6mQ%uxQ%yyS&O|&TQ&[!TQ'`!hQ'b!iQ(m#sS+h%z%{Q+l%}Q,V&_Q,Z&aS-d'c'dQ.a(nQ0u+iQ0{+oQ0}+pQ1Q+tQ1f,WS1j,[,]Q2n-eQ4}0wQ5R0zQ5W1SQ5s1kQ7r5PQ7u5TQ9c7qR:^9d!O$zi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=R!S%wy!i!u%y%z%{'S'b'c'd'h'r*d+h+i-Q-d-e-l/y0u2g2n2u4dQ+b%uQ+{&XQ,O&YQ,Y&aQ.`(mQ1e,VU1i,Z,[,]Q3V.aQ5n1fS5r1j1kQ8]5s#^<|#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vo<};g;h;k;m;q;s;u;}<P<S<W<Y<[<^<bW%Ti%V*t<xS&X!Q&fQ&Y!RQ&Z!SR+y&V$}%Si#v$b$c$d$x${%O%Q%]%^%b)u){)}*P*R*U*[*b*r*s+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4m4u4x5l6p7_7h8U8u9T9b9l:O:c:k;g;h;j;k;l;m;p;q;r;s;t;u;|;}<O<P<R<S<V<W<X<Y<Z<[<]<^<a<b<x=Q=R=U=VT)v$u)wV*y%[;n;oW'X!e%g*V-WS(y#y#zQ+]%pQ+s&QS.Y(i(jQ1[,PQ4n0`R7{5^'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{$i$^c#Y#e%o%q%s(O(U(p(u(})O)P)Q)R)S)T)U)V)W)Y)[)^)c)m+^+r-R-p-u-z-|.k.n.r.t.u.v/X0e2]2`2p2w3]3b3c3d3e3f3g3h3i3j3k3l3m3n3q3r3y4r4{6_6e6j6y6z7T7U7}8l8p8z9Q9R9{:`:g;R<oT#TV#U'PkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{Q'V!eR2c-Tv!nQ!e!r!v!y!z'T'[']'i'j'k-T-Z-]-m1a5e5gU*d$|*V*jS/y*e*lQ0S*mQ1^,RQ4d0RR4g0UnqOXst!Z#d%k&o&q&r&t,k,p1|2PQ&v!^Q's!xS(o#u;XQ+f%xQ,T&[Q,U&^Q-b'aQ-o'lS.j(t;yS0f+R<TQ0s+gQ1`,SQ2T,rQ2V,sQ2_-OQ2l-cQ2o-gS4s0g<_Q4y0tS4|0v<`Q6^2aQ6b2mQ6g2tQ7p4zQ8m6`Q8n6cQ8q6hR9x8j$d$]c#Y#e%q%s(O(U(p(u(})O)P)Q)R)S)T)U)V)W)Y)[)^)c)m+^+r-R-p-u-z-|.k.n.r.u.v/X0e2]2`2p2w3]3b3c3d3e3f3g3h3i3j3k3l3m3n3q3r3y4r4{6_6e6j6y6z7T7U7}8l8p8z9Q9R9{:`:g;R<oS(k#p'fQ({#zS+[%o.tS.Z(j(lR3O.['OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{S#q];QQ&q!XQ&r!YQ&t![Q&u!]R1{,nQ'^!hQ+_%uQ-`'`S.](m+bQ2j-_W3S.`.a0l0nQ6a2kW6n3P3R3V4wU8t6o6q6sU9}8v8w8yS:i9|:PQ:t:jR:z:uU!wQ']-]T5c1a5e!Q_OXZ`st!V!Z#d#h%c%k&f&h&o&q&r&t(f,k,p.S1|2P]!pQ!r']-]1a5eT#q];Q%[{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rS(y#y#zS.Y(i(j!s<f$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{U$fd)Z,eS(l#p'fU*q%R(s3pU0b*x.f7PQ4w0mQ6o3QQ8w6rR:P8xm!tQ!r!v!y!z']'i'j'k-]-m1a5e5gQ'q!uS(b#g1vS-k'h'tQ/k*XQ/w*dQ2v-nQ4U/lS4_/x0SQ7Z4PS7f4e4gQ9V7[Q9Z7cQ9`7iS:X9[9]S:n:Y:ZS:w:o:pR:}:xQ#wbQ'p!uS(a#g1vS(c#m+QQ+S%dQ+d%vQ+j%|U-j'h'q'tQ.O(bQ/j*XQ/v*dQ/|*gQ0r+eQ1g,XS2s-k-nQ2{.WS4T/k/lS4^/w0SQ4a/{Q4c/}Q5p1hQ6i2vQ7Y4PQ7^4US7b4_4gQ7g4fQ8Z5qS9U7Z7[Q9Y7cQ9^7fQ9a7jQ9o8[Q:V9VS:W9Z9]Q:[9`Q:e9pS:m:X:ZS:v:n:pQ:|:wQ;O:}Q<i<dQ<t<mR<u<nV!wQ']-]%[aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rS#wz!j!r<c$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{R<i<z%[bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rQ%dj!S%vy!i!u%y%z%{'S'b'c'd'h'r*d+h+i-Q-d-e-l/y0u2g2n2u4dS%|z!jQ+e%wQ,X&aW1h,Y,Z,[,]U5q1i1j1kS8[5r5sQ9p8]!r<d$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{Q<m<yR<n<z%OeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rY#bWZ#W#Z(P!b%hm#h#i#l$x%c%f(Y(d(e(f*U*Y*]+T+U+W,g,}-{.R.S.T.V/e/h2U2|2}4Q6[6mQ,f&l!p<e$Z$n)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{R<h'UU'Y!e%g*VR2e-W%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V,h,k,p-a-i-w-}.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3^5b5m5}6O6R6f8R8X8h8r!r)Z$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{Q,e&lQ0m+aQ3Q._Q6r3UR8x6t!b$Tc#Y%o(O(U(p(u)V)W)[)c+r-p-u-z-|.k.n/X0e2p2w3]3m4r4{6e6j6y8p9{;R!P;_)Y)m-R.t2]2`3b3k3l3q3y6_6z7T7U7}8l8z9Q9R:`:g<o!f$Vc#Y%o(O(U(p(u)S)T)V)W)[)c+r-p-u-z-|.k.n/X0e2p2w3]3m4r4{6e6j6y8p9{;R!T;a)Y)m-R.t2]2`3b3h3i3k3l3q3y6_6z7T7U7}8l8z9Q9R:`:g<o!^$Zc#Y%o(O(U(p(u)[)c+r-p-u-z-|.k.n/X0e2p2w3]3m4r4{6e6j6y8p9{;RQ3}/cz<{)Y)m-R.t2]2`3b3q3y6_6z7T7U7}8l8z9Q9R:`:g<oQ=Q=SR=R=T'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{S$oh$pR3v.|'VgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.|.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{T$kf$qQ$ifS)f$l)jR)r$qT$jf$qT)h$l)j'VhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.|.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{T$oh$pQ$rhR)q$p%[jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8r!s<y$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{#elOPXZst!Z!`!o#S#d#o#{$n%k&h&k&l&o&q&r&t&x'Q'_(z)o+V+a,h,k,p-a._.}/f0a1d1t1u1w1y1|2P2R3U3u5b5m5}6O6R6t8R8X8h!O%Ri$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=R#^(s#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=VQ*}%`Q/Y)zo3p;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<b!O$yi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=RQ*^$zU*g$|*V*jQ+O%aQ/}*h#^<k#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vn<l;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<bQ<p<|Q<q<}Q<r=OR<s=P!O%Ri$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=R#^(s#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vo3p;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<bnoOXst!Z#d%k&o&q&r&t,k,p1|2PS*a${*UQ,y&{Q,z&}R4X/p$|%Si#v$b$c$d$x${%O%Q%]%^%b)u){)}*P*R*U*[*b*r*s+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4m4u4x5l6p7_7h8U8u9T9b9l:O:c:k;g;h;j;k;l;m;p;q;r;s;t;u;|;}<O<P<R<S<V<W<X<Y<Z<[<]<^<a<b<x=Q=R=U=VQ+|&YQ1Y,OQ5[1XR7z5]V*i$|*V*jU*i$|*V*jT5d1a5eU/{*f/f5bS4f0T8RR7j4hQ+d%vQ/|*gQ0r+eQ1g,XQ5p1hQ8Z5qQ9o8[R:e9p!O%Oi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=Rr)}$v)a*O*p+P/n0Z0[3s4V4q7X7k:U<j<v<wS0V*o0W#^;j#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vn;k;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<b!`;|(q)_*W*`.b.e.i/U/Z/c/s0k1V1X3Y4W4[5Z5]6u6x7`7d7m7o9X9_:]:l=S=T`;}3o6{7O7S8{:Q:T:{S<X.d3ZT<Y6}9O!O%Qi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=Rv*P$v)a*Q*o+P/_/n0Z0[3s4V4i4q7X7k:U<j<v<wS0X*p0Y#^;l#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vn;m;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<b!d<O(q)_*W*`.c.d.i/U/Z/c/s0k1V1X3W3Y4W4[5Z5]6u6v6x7`7d7m7o9X9_:]:l=S=Td<P3o6|6}7S8{8|:Q:R:T:{S<Z.e3[T<[7O9PrnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PQ&c!UR,h&lrnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PR&c!UQ,Q&ZR1U+ysnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PQ1b,VS5k1e1fU8T5i5j5nS9k8V8WS:a9j9mQ:q:bR:y:rQ&j!VR,a&fR5w1nS&O|&TR0}+pQ&o!WR,k&pR,q&uT1},p2PR,u&vQ,t&vR2W,uQ'v!{R-q'vSsOtQ#dXT%ns#dQ#OTR'x#OQ#RUR'z#RQ)w$uR/V)wQ#UVR'|#UQ#XWU(S#X(T-xQ(T#YR-x(UQ-U'VR2d-UQ.m(uS3_.m3`R3`.nQ-]']R2h-]Y!rQ']-]1a5eR'g!rQ.x)aR3t.xU#_W%f*UU(Z#_([-yQ([#`R-y(VQ-X'YR2f-Xt`OXst!V!Z#d%k&f&h&o&q&r&t,k,p1|2PS#hZ%cU#r`#h.SR.S(fQ(g#jQ.P(cW.X(g.P2y6kQ2y.QR6k2zQ)j$lR/O)jQ$phR)p$pQ$`cU)]$`-t;eQ-t;RR;e)mQ/i*XW4R/i4S7]9WU4S/j/k/lS7]4T4UR9W7^$Z)|$v(q)_)a*W*`*o*p*z*{+P.d.e.g.h.i/U/Z/_/a/c/n/s0Z0[0k1V1X3W3X3Y3o3s4V4W4[4i4k4q5Z5]6u6v6w6x6}7O7Q7R7S7X7`7d7k7m7o8{8|8}9X9_:Q:R:S:T:U:]:l:{<j<v<w=S=TQ/q*`U4Z/q4]7aQ4]/sR7a4[S*j$|*VR0P*jr*O$v)a*o*p+P/n0Z0[3s4V4q7X7k:U<j<v<w!`.b(q)_*W*`.d.e.i/U/Z/c/s0k1V1X3Y4W4[5Z5]6u6x7`7d7m7o9X9_:]:l=S=TU/`*O.b6{a6{3o6}7O7S8{:Q:T:{Q0W*oQ3Z.dU4j0W3Z9OR9O6}v*Q$v)a*o*p+P/_/n0Z0[3s4V4i4q7X7k:U<j<v<w!d.c(q)_*W*`.d.e.i/U/Z/c/s0k1V1X3W3Y4W4[5Z5]6u6v6x7`7d7m7o9X9_:]:l=S=TU/b*Q.c6|e6|3o6}7O7S8{8|:Q:R:T:{Q0Y*pQ3[.eU4l0Y3[9PR9P7OQ*u%UR0^*uQ4v0kR7n4vQ+X%iR0j+XQ5_1[S7|5_9iR9i7}Q,S&[R1_,SQ5e1aR8P5eQ1m,^S5u1m8_R8_5wQ0x+lW5Q0x5S7t9eQ5S0{Q7t5RR9e7uQ+q&OR1O+qQ2P,pR6V2PYrOXst#dQ&s!ZQ+Z%kQ,j&oQ,l&qQ,m&rQ,o&tQ1z,kS1},p2PR6U1|Q%mpQ&w!_Q&z!aQ&|!bQ'O!cQ'n!uQ+Y%jQ+f%xQ+x&UQ,`&jQ,w&yW-h'h'p'q'tQ-o'lQ0O*iQ0s+gS1p,a,dQ2X,vQ2Y,yQ2Z,zQ2o-gW2q-j-k-n-pQ4y0tQ5V1RQ5Y1VQ5o1gQ5y1rQ6T1{U6d2p2s2vQ6g2tQ7p4zQ7x5XQ7y5ZQ8O5dQ8Y5pQ8`5xS8o6e6iQ8q6hQ9f7vQ9n8ZQ9s8aQ9z8pQ:_9gQ:d9oQ:h9{R:s:eQ%xyQ'a!iQ'l!uU+g%y%z%{Q-O'SU-c'b'c'dS-g'h'rQ/u*dS0t+h+iQ2a-QS2m-d-eQ2t-lQ4`/yQ4z0uQ6`2gQ6c2nQ6h2uR7e4dS$wi<xR*v%VU%Ui%V<xR0]*tQ$viS(q#v+cS)_$b$cQ)a$dQ*W$xS*`${*UQ*o%OQ*p%QQ*z%]Q*{%^Q+P%bQ.d;jQ.e;lQ.g;pQ.h;rQ.i;tQ/U)uS/Z){/]Q/_)}Q/a*PQ/c*RQ/n*[S/s*b/eQ0Z*rQ0[*sh0k+`.^1c3T5l6p8U8u9l:O:c:kQ1V+zQ1X+}Q3W;|Q3X<OQ3Y<RS3o;g;hQ3s.wQ4V/oQ4W/pQ4[/rQ4i0VQ4k0XQ4q0dQ5Z1WQ5]1ZQ6u<VQ6v<XQ6w<ZQ6x<]Q6};kQ7O;mQ7Q;qQ7R;sQ7S;uQ7X3}Q7`4YQ7d4bQ7k4mQ7m4uQ7o4xQ8{<SQ8|;}Q8}<PQ9X7_Q9_7hQ:Q<WQ:R<YQ:S<[Q:T<^Q:U9TQ:]9bQ:l<aQ:{<bQ<j<xQ<v=QQ<w=RQ=S=UR=T=VQ*x%[Q.f;nR7P;onpOXst!Z#d%k&o&q&r&t,k,p1|2PQ!fPS#fZ#oQ&y!`U'e!o5b8RQ'{#SQ(|#{Q)n$nS,d&h&kQ,i&lQ,v&xQ,{'QQ-_'_Q.p(zQ/S)oS0h+V/fQ0n+aQ1x,hQ2k-aQ3R._Q3x.}Q4o0aQ5j1dQ5{1tQ5|1uQ6Q1wQ6S1yQ6X2RQ6s3UQ7V3uQ8W5mQ8d5}Q8e6OQ8g6RQ8y6tQ9m8XR9w8h#YcOPXZst!Z!`!o#d#o#{%k&h&k&l&o&q&r&t&x'Q'_(z+V+a,h,k,p-a._/f0a1d1t1u1w1y1|2P2R3U5b5m5}6O6R6t8R8X8hQ#YWQ#eYQ%ouQ%qvS%sw!gS(O#W(RQ(U#ZQ(p#uQ(u#xQ(}$OQ)O$PQ)P$QQ)Q$RQ)R$SQ)S$TQ)T$UQ)U$VQ)V$WQ)W$XQ)Y$ZQ)[$_Q)^$aQ)c$eW)m$n)o.}3uQ+^%rQ+r&PS-R'U2bQ-p'oS-u(P-wQ-z(XQ-|(`Q.k(tQ.n(vQ.r;PQ.t;SQ.u;TQ.v;WQ/X)yQ0e+RQ2],|Q2`-PQ2p-iQ2w-}Q3].lQ3b;XQ3c;YQ3d;ZQ3e;[Q3f;]Q3g;^Q3h;_Q3i;`Q3j;aQ3k;bQ3l;cQ3m.sQ3n;fQ3q;iQ3r;vQ3y;dQ4r0gQ4{0vQ6_;xQ6e2rQ6j2xQ6y3^Q6z;yQ7T;{Q7U<TQ7}5`Q8l6]Q8p6fQ8z<UQ9Q<_Q9R<`Q9{8rQ:`9hQ:g9yQ;R#SR<o<{R#[WR'W!el!tQ!r!v!y!z']'i'j'k-]-m1a5e5gS'S!e-TS-Q'T'[R2g-ZR(w#xQ!fQT-[']-]]!qQ!r']-]1a5eQ#p]R'f;QR)b$dY!uQ']-]1a5eQ'h!rS'r!v!yS't!z5gS-l'i'jQ-n'kR2u-mT#kZ%cS#jZ%cS%im,gU(c#h#i#lS.Q(d(eQ.U(fQ0i+WQ2z.RU2{.S.T.VS6l2|2}R8s6md#^W#W#Z%f(P(Y*U+T-{/er#gZm#h#i#l%c(d(e(f+W.R.S.T.V2|2}6mS*X$x*]Q/l*YQ1v,gQ2^,}Q4P/hQ6Z2UQ7[4QQ8k6[T<g'U+UV#aW%f*UU#`W%f*US(Q#W(YU(V#Z+T/eS-S'U+UT-v(P-{V'Z!e%g*VQ$lfR)t$qT)i$l)jR3w.|T*Z$x*]T*c${*UQ0l+`Q3P.^Q5i1cQ6q3TQ8V5lQ8v6pQ9j8UQ9|8uQ:b9lQ:j:OQ:r:cR:u:knqOXst!Z#d%k&o&q&r&t,k,p1|2PQ&i!VR,`&ftmOXst!U!V!Z#d%k&f&o&q&r&t,k,p1|2PR,g&lT%jm,gR1],PR,_&dQ&S|R+w&TR+m%}T&m!W&pT&n!W&pT2O,p2P",nodeNames:"\u26A0 ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",maxTerm:376,context:FU,nodeProps:[["isolate",-8,5,6,14,34,36,48,50,52,""],["group",-26,9,17,19,65,204,208,212,213,215,218,221,231,233,239,241,243,245,248,254,260,262,264,266,268,270,271,"Statement",-34,13,14,29,32,33,39,48,51,52,54,59,67,69,73,77,79,81,82,107,108,117,118,135,138,140,141,142,143,144,146,147,166,167,169,"Expression",-23,28,30,34,38,40,42,171,173,175,176,178,179,180,182,183,184,186,187,188,198,200,202,203,"Type",-3,85,100,106,"ClassItem"],["openedBy",23,"<",35,"InterpolationStart",53,"[",57,"{",70,"(",159,"JSXStartCloseTag"],["closedBy",24,">",37,"InterpolationEnd",47,"]",58,"}",71,")",164,"JSXEndTag"]],propSources:[IU],skippedNodes:[0,5,6,274],repeatNodeCount:37,tokenData:"$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$h&j(U!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(U!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$h&j(RpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(RpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$h&j(Rp(U!b'w0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(S#S$h&j'x0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$h&j(Rp(U!b'x0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$h&j!m),Q(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(Q':f$h&j(U!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$h&j(U!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$h&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$c`$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$c``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$c`$h&j(U!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(U!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$c`(U!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$h&j(Rp(U!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$h&j(Rp(U!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$h&j(U!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$h&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(U!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$h&j(RpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(RpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Rp(U!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$h&j(j%1l(Rp(U!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$h&j(Rp(U!b$[#t(O,2j(`$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$h&j(Rp(U!b$[#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$h&j(Rp(U!b#m(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$h&j$P(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(u+JY$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$h&j#y(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(T';W$h&j(RpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$h&j(RpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$h&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$c`$h&j(RpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(RpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$c`(RpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!i/.^$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!h!Lf$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$h&j(Rp(U!b(P%&f#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$h&j(Rp(U!b#k(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$h&j(Rp(U!bo+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Y+Jf$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$h&j(Rp(U!b}.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!X!L^$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$h&j(Rp(U!b#l(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$h&j(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$h&j(U!b!U7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$h&j!U7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$h&j!U7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!U7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!U7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$h&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$h&j(U!b!U7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(U!b!U7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(U!b!U7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(U!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$h&j(U!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$h&j(Rp!U7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$h&j(Rp!U7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Rp!U7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Rp!U7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(RpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$h&j(RpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$h&j(Rp(U!b!U7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Rp(U!b!U7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Rp(U!b!U7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Rp(U!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$h&j(Rp(U!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$h&j(Rp(U!b'y0/l!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$h&j(Rp(U!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$h&j(U!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$h&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(U!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$h&j(RpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(RpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Rp(U!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$h&j$P(Ch(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Y#t$h&j(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!d$b$h&j#})Lv(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#O-<U(Rp(U!b(y7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$j&j(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#o(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#p(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#]*!Y$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#h(Cl$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#p(Ch$e#|$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#p(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#o(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#o(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(m(Ct$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$h&j#z(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!y$Ip$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!P0,v$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$h&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$h&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$h&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$h&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$h&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!V#)l$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#w(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$h&j(Rp(U!b([+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$h&j(Rp(U!b(O,2j$^#t(`$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$h&j(Rp(U!b$^#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X![#Hb(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(t+JY$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z(Kd$?V_!Z(Cds`$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!n7`$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$h&j(Rp(U!b'w0/l$[#t(O,2j(`$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$h&j(Rp(U!b'x0/l$[#t(O,2j(`$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",tokenizers:[DU,RU,VU,2,3,4,5,6,7,8,9,10,11,12,13,14,NU,new p9("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOu~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(^~~",141,335),new p9("j~RQYZXz{^~^O'{~~aP!P!Qd~iO'|~~",25,318)],topRules:{Script:[0,7],SingleExpression:[1,272],SingleClassItem:[2,273]},dialects:{jsx:0,ts:14725},dynamicPrecedences:{"77":1,"79":1,"91":1,"167":1,"196":1},specialized:[{term:322,get:(Z)=>MU[Z]||-1},{term:338,get:(Z)=>AU[Z]||-1},{term:92,get:(Z)=>LU[Z]||-1}],tokenPrec:14749});function jJ(Z){let $=Object.keys(Z).join(""),J=/\w/.test($);if(J)$=$.replace(/\w/g,"");return`[${J?"\\w":""}${$.replace(/[^\w\s]/g,"\\$&")}]`}function BU(Z){let $=Object.create(null),J=Object.create(null);for(let{label:X}of Z){$[X[0]]=!0;for(let K=1;K<X.length;K++)J[X[K]]=!0}let Q=jJ($)+jJ(J)+"*$";return[new RegExp("^"+Q),new RegExp(Q)]}function O8(Z){let $=Z.map((X)=>typeof X=="string"?{label:X}:X),[J,Q]=$.every((X)=>/^\w+$/.test(X.label))?[/\w*$/,/\w+$/]:BU($);return(X)=>{let K=X.matchBefore(Q);return K||X.explicit?{from:K?K.from:X.pos,options:$,validFor:J}:null}}function DJ(Z,$){return(J)=>{for(let Q=o(J.state).resolveInner(J.pos,-1);Q;Q=Q.parent){if(Z.indexOf(Q.name)>-1)return null;if(Q.type.isTop)break}return $(J)}}function A9(Z){return Z.selection.main.from}function RJ(Z,$){var J;let{source:Q}=Z,X=$&&Q[0]!="^",K=Q[Q.length-1]!="$";if(!X&&!K)return Z;return new RegExp(`${X?"^":""}(?:${Q})${K?"$":""}`,(J=Z.flags)!==null&&J!==void 0?J:Z.ignoreCase?"i":"")}function EU(Z,$,J,Q){let{main:X}=Z.selection,K=J-X.from,Y=Q-X.from;return Object.assign(Object.assign({},Z.changeByRange((U)=>{if(U!=X&&J!=Q&&Z.sliceDoc(U.from+K,U.from+Y)!=Z.sliceDoc(J,Q))return{range:U};return{changes:{from:U.from+K,to:Q==X.from?U.to:U.from+Y,insert:$},range:R.cursor(U.from+K+$.length)}})),{scrollIntoView:!0,userEvent:"input.complete"})}function PU(Z){if(!Array.isArray(Z))return Z;let $=_J.get(Z);if(!$)_J.set(Z,$=O8(Z));return $}function OJ(Z,$){return Z?$?Z+" "+$:Z:$}function CU(Z,$,J,Q,X,K){let Y=Z.textDirection==i.RTL,U=Y,q=!1,W="top",G,z,j=$.left-X.left,_=X.right-$.right,H=Q.right-Q.left,F=Q.bottom-Q.top;if(U&&j<Math.min(H,_))U=!1;else if(!U&&_<Math.min(H,j))U=!0;if(H<=(U?j:_))G=Math.max(X.top,Math.min(J.top,X.bottom-F))-$.top,z=Math.min(400,U?j:_);else{q=!0,z=Math.min(400,(Y?$.right:X.right-$.left)-30);let M=X.bottom-$.bottom;if(M>=F||M>$.top)G=J.bottom-$.top;else W="bottom",G=$.bottom-J.top}let N=($.bottom-$.top)/K.offsetHeight,D=($.right-$.left)/K.offsetWidth;return{style:`${W}: ${G/N}px; max-width: ${z/D}px`,class:"cm-completionInfo-"+(q?Y?"left-narrow":"right-narrow":U?"left":"right")}}function TU(Z){let $=Z.addToOptions.slice();if(Z.icons)$.push({render(J){let Q=document.createElement("div");if(Q.classList.add("cm-completionIcon"),J.type)Q.classList.add(...J.type.split(/\s+/g).map((X)=>"cm-completionIcon-"+X));return Q.setAttribute("aria-hidden","true"),Q},position:20});return $.push({render(J,Q,X,K){let Y=document.createElement("span");Y.className="cm-completionLabel";let U=J.displayLabel||J.label,q=0;for(let W=0;W<K.length;){let G=K[W++],z=K[W++];if(G>q)Y.appendChild(document.createTextNode(U.slice(q,G)));let j=Y.appendChild(document.createElement("span"));j.appendChild(document.createTextNode(U.slice(G,z))),j.className="cm-completionMatchedText",q=z}if(q<U.length)Y.appendChild(document.createTextNode(U.slice(q)));return Y},position:50},{render(J){if(!J.detail)return null;let Q=document.createElement("span");return Q.className="cm-completionDetail",Q.textContent=J.detail,Q},position:80}),$.sort((J,Q)=>J.position-Q.position).map((J)=>J.render)}function z8(Z,$,J){if(Z<=J)return{from:0,to:Z};if($<0)$=0;if($<=Z>>1){let X=Math.floor($/J);return{from:X*J,to:(X+1)*J}}let Q=Math.floor((Z-$)/J);return{from:Z-(Q+1)*J,to:Z-Q*J}}function yU(Z,$){return(J)=>new MJ(J,Z,$)}function SU(Z,$){let J=Z.getBoundingClientRect(),Q=$.getBoundingClientRect(),X=J.height/Z.offsetHeight;if(Q.top<J.top)Z.scrollTop-=(J.top-Q.top)/X;else if(Q.bottom>J.bottom)Z.scrollTop+=(Q.bottom-J.bottom)/X}function HJ(Z){return(Z.boost||0)*100+(Z.apply?10:0)+(Z.info?5:0)+(Z.type?1:0)}function bU(Z,$){let J=[],Q=null,X=(W)=>{J.push(W);let{section:G}=W.completion;if(G){if(!Q)Q=[];let z=typeof G=="string"?G:G.name;if(!Q.some((j)=>j.name==z))Q.push(typeof G=="string"?{name:z}:G)}},K=$.facet(Y3);for(let W of Z)if(W.hasResult()){let G=W.result.getMatch;if(W.result.filter===!1)for(let z of W.result.options)X(new j8(z,W.source,G?G(z):[],1e9-J.length));else{let z=$.sliceDoc(W.from,W.to),j,_=K.filterStrict?new IJ(z):new VJ(z);for(let H of W.result.options)if(j=_.match(H.label)){let F=!H.displayLabel?j.matched:G?G(H,j.matched):[];X(new j8(H,W.source,F,j.score+(H.boost||0)))}}}if(Q){let W=Object.create(null),G=0,z=(j,_)=>{var H,F;return((H=j.rank)!==null&&H!==void 0?H:1e9)-((F=_.rank)!==null&&F!==void 0?F:1e9)||(j.name<_.name?-1:1)};for(let j of Q.sort(z))G-=1e5,W[j.name]=G;for(let j of J){let{section:_}=j.completion;if(_)j.score+=W[typeof _=="string"?_:_.name]}}let Y=[],U=null,q=K.compareCompletions;for(let W of J.sort((G,z)=>z.score-G.score||q(G.completion,z.completion))){let G=W.completion;if(!U||U.label!=G.label||U.detail!=G.detail||U.type!=null&&G.type!=null&&U.type!=G.type||U.apply!=G.apply||U.boost!=G.boost)Y.push(W);else if(HJ(W.completion)>HJ(U))Y[Y.length-1]=W;U=W.completion}return Y}function kU(Z,$){if(Z==$)return!0;for(let J=0,Q=0;;){while(J<Z.length&&!Z[J].hasResult)J++;while(Q<$.length&&!$[Q].hasResult)Q++;let X=J==Z.length,K=Q==$.length;if(X||K)return X==K;if(Z[J++].result!=$[Q++].result)return!1}}function FJ(Z,$){let J={"aria-autocomplete":"list","aria-haspopup":"listbox","aria-controls":Z};if($>-1)J["aria-activedescendant"]=Z+"-"+$;return J}function AJ(Z,$){if(Z.isUserEvent("input.complete")){let Q=Z.annotation(H8);if(Q&&$.activateOnCompletion(Q))return 12}let J=Z.isUserEvent("input.type");return J&&$.activateOnTyping?5:J?1:Z.isUserEvent("delete.backward")?2:Z.selection?8:Z.docChanged?16:0}function hU(Z,$,J,Q){if(!Z)return!1;let X=$.sliceDoc(J,Q);return typeof Z=="function"?Z(X,J,Q,$):RJ(Z,!0).test(X)}function F8(Z,$){const J=$.completion.apply||$.completion.label;let Q=Z.state.field(R3).active.find((X)=>X.source==$.source);if(!(Q instanceof N5))return!1;if(typeof J=="string")Z.dispatch(Object.assign(Object.assign({},EU(Z.state,J,Q.from,Q.to)),{annotations:H8.of($.completion)}));else J(Z,$.completion,Q.from,Q.to);return!0}function UZ(Z,$="option"){return(J)=>{let Q=J.state.field(R3,!1);if(!Q||!Q.open||Q.open.disabled||Date.now()-Q.open.timestamp<J.state.facet(Y3).interactionDelay)return!1;let X=1,K;if($=="page"&&(K=D4(J,Q.open.tooltip)))X=Math.max(2,Math.floor(K.dom.offsetHeight/K.dom.querySelector("li").offsetHeight)-1);let{length:Y}=Q.open.options,U=Q.open.selected>-1?Q.open.selected+X*(Z?1:-1):Z?0:Y-1;if(U<0)U=$=="page"?0:Y-1;else if(U>=Y)U=$=="page"?Y-1:0;return J.dispatch({effects:BJ.of(U)}),!0}}function R8(Z,$){return R.create(Z.filter((J)=>J.field==$).map((J)=>R.range(J.from,J.to)))}function rU(Z){let $=D8.parse(Z);return(J,Q,X,K)=>{let{text:Y,ranges:U}=$.instantiate(J.state,X),q={changes:{from:X,to:K,insert:b.of(Y)},scrollIntoView:!0,annotations:Q?[H8.of(Q),a.userEvent.of("input.complete")]:void 0};if(U.length)q.selection=R8(U,0);if(U.some((W)=>W.field>0)){let W=new D5(U,0),G=q.effects=[X7.of(W)];if(J.state.field(Q7,!1)===void 0)G.push(v.appendConfig.of([Q7,$q,Jq,PJ]))}J.dispatch(J.state.update(q))}}function TJ(Z){return({state:$,dispatch:J})=>{let Q=$.field(Q7,!1);if(!Q||Z<0&&Q.active==0)return!1;let X=Q.active+Z,K=Z>0&&!Q.ranges.some((Y)=>Y.field==X+Z);return J($.update({selection:R8(Q.ranges,X),effects:X7.of(K?null:new D5(Q.ranges,X)),scrollIntoView:!0})),!0}}function O3(Z,$){return Object.assign(Object.assign({},$),{apply:rU(Z)})}function SJ(Z={}){return[sU,R3,Y3.of(Z),dU,Xq,PJ]}class _8{constructor(Z,$,J,Q){this.state=Z,this.pos=$,this.explicit=J,this.view=Q,this.abortListeners=[],this.abortOnDocChange=!1}tokenBefore(Z){let $=o(this.state).resolveInner(this.pos,-1);while($&&Z.indexOf($.name)<0)$=$.parent;return $?{from:$.from,to:this.pos,text:this.state.sliceDoc($.from,this.pos),type:$.type}:null}matchBefore(Z){let $=this.state.doc.lineAt(this.pos),J=Math.max($.from,this.pos-250),Q=$.text.slice(J-$.from,this.pos-$.from),X=Q.search(RJ(Z,!1));return X<0?null:{from:J+X,to:this.pos,text:Q.slice(X)}}get aborted(){return this.abortListeners==null}addEventListener(Z,$,J){if(Z=="abort"&&this.abortListeners){if(this.abortListeners.push($),J&&J.onDocChange)this.abortOnDocChange=!0}}}class j8{constructor(Z,$,J,Q){this.completion=Z,this.source=$,this.match=J,this.score=Q}}var H8=V3.define(),_J=new WeakMap,qZ=v.define(),J7=v.define();class VJ{constructor(Z){this.pattern=Z,this.chars=[],this.folded=[],this.any=[],this.precise=[],this.byWord=[],this.score=0,this.matched=[];for(let $=0;$<Z.length;){let J=C3(Z,$),Q=c3(J);this.chars.push(J);let X=Z.slice($,$+Q),K=X.toUpperCase();this.folded.push(C3(K==X?X.toLowerCase():K,0)),$+=Q}this.astral=Z.length!=this.chars.length}ret(Z,$){return this.score=Z,this.matched=$,this}match(Z){if(this.pattern.length==0)return this.ret(-100,[]);if(Z.length<this.pattern.length)return null;let{chars:$,folded:J,any:Q,precise:X,byWord:K}=this;if($.length==1){let D=C3(Z,0),M=c3(D),V=M==Z.length?0:-100;if(D==$[0]);else if(D==J[0])V+=-200;else return null;return this.ret(V,[0,M])}let Y=Z.indexOf(this.pattern);if(Y==0)return this.ret(Z.length==this.pattern.length?0:-100,[0,this.pattern.length]);let U=$.length,q=0;if(Y<0){for(let D=0,M=Math.min(Z.length,200);D<M&&q<U;){let V=C3(Z,D);if(V==$[q]||V==J[q])Q[q++]=D;D+=c3(V)}if(q<U)return null}let W=0,G=0,z=!1,j=0,_=-1,H=-1,F=/[a-z]/.test(Z),N=!0;for(let D=0,M=Math.min(Z.length,200),V=0;D<M&&G<U;){let I=C3(Z,D);if(Y<0){if(W<U&&I==$[W])X[W++]=D;if(j<U)if(I==$[j]||I==J[j]){if(j==0)_=D;H=D+1,j++}else j=0}let C,S=I<255?I>=48&&I<=57||I>=97&&I<=122?2:I>=65&&I<=90?1:0:(C=d8(I))!=C.toLowerCase()?1:C!=C.toUpperCase()?2:0;if(!D||S==1&&F||V==0&&S!=0){if($[G]==I||J[G]==I&&(z=!0))K[G++]=D;else if(K.length)N=!1}V=S,D+=c3(I)}if(G==U&&K[0]==0&&N)return this.result(-100+(z?-200:0),K,Z);if(j==U&&_==0)return this.ret(-200-Z.length+(H==Z.length?0:-100),[0,H]);if(Y>-1)return this.ret(-700-Z.length,[Y,Y+this.pattern.length]);if(j==U)return this.ret(-900-Z.length,[_,H]);if(G==U)return this.result(-100+(z?-200:0)+-700+(N?0:-1100),K,Z);return $.length==2?null:this.result((Q[0]?-700:0)+-200+-1100,Q,Z)}result(Z,$,J){let Q=[],X=0;for(let K of $){let Y=K+(this.astral?c3(C3(J,K)):1);if(X&&Q[X-1]==K)Q[X-1]=Y;else Q[X++]=K,Q[X++]=Y}return this.ret(Z-J.length,Q)}}class IJ{constructor(Z){this.pattern=Z,this.matched=[],this.score=0,this.folded=Z.toLowerCase()}match(Z){if(Z.length<this.pattern.length)return null;let $=Z.slice(0,this.pattern.length),J=$==this.pattern?0:$.toLowerCase()==this.folded?-200:null;if(J==null)return null;return this.matched=[0,$.length],this.score=J+(Z.length==this.pattern.length?0:-100),this}}var Y3=B.define({combine(Z){return y9(Z,{activateOnTyping:!0,activateOnCompletion:()=>!1,activateOnTypingDelay:100,selectOnOpen:!0,override:null,closeOnBlur:!0,maxRenderedOptions:100,defaultKeymap:!0,tooltipClass:()=>"",optionClass:()=>"",aboveCursor:!1,icons:!0,addToOptions:[],positionInfo:CU,filterStrict:!1,compareCompletions:($,J)=>$.label.localeCompare(J.label),interactionDelay:75,updateSyncTime:100},{defaultKeymap:($,J)=>$&&J,closeOnBlur:($,J)=>$&&J,icons:($,J)=>$&&J,tooltipClass:($,J)=>(Q)=>OJ($(Q),J(Q)),optionClass:($,J)=>(Q)=>OJ($(Q),J(Q)),addToOptions:($,J)=>$.concat(J),filterStrict:($,J)=>$||J})}});class MJ{constructor(Z,$,J){this.view=Z,this.stateField=$,this.applyCompletion=J,this.info=null,this.infoDestroy=null,this.placeInfoReq={read:()=>this.measureInfo(),write:(U)=>this.placeInfo(U),key:this},this.space=null,this.currentClass="";let Q=Z.state.field($),{options:X,selected:K}=Q.open,Y=Z.state.facet(Y3);this.optionContent=TU(Y),this.optionClass=Y.optionClass,this.tooltipClass=Y.tooltipClass,this.range=z8(X.length,K,Y.maxRenderedOptions),this.dom=document.createElement("div"),this.dom.className="cm-tooltip-autocomplete",this.updateTooltipClass(Z.state),this.dom.addEventListener("mousedown",(U)=>{let{options:q}=Z.state.field($).open;for(let W=U.target,G;W&&W!=this.dom;W=W.parentNode)if(W.nodeName=="LI"&&(G=/-(\d+)$/.exec(W.id))&&+G[1]<q.length){this.applyCompletion(Z,q[+G[1]]),U.preventDefault();return}}),this.dom.addEventListener("focusout",(U)=>{let q=Z.state.field(this.stateField,!1);if(q&&q.tooltip&&Z.state.facet(Y3).closeOnBlur&&U.relatedTarget!=Z.contentDOM)Z.dispatch({effects:J7.of(null)})}),this.showOptions(X,Q.id)}mount(){this.updateSel()}showOptions(Z,$){if(this.list)this.list.remove();this.list=this.dom.appendChild(this.createListBox(Z,$,this.range)),this.list.addEventListener("scroll",()=>{if(this.info)this.view.requestMeasure(this.placeInfoReq)})}update(Z){var $;let J=Z.state.field(this.stateField),Q=Z.startState.field(this.stateField);if(this.updateTooltipClass(Z.state),J!=Q){let{options:X,selected:K,disabled:Y}=J.open;if(!Q.open||Q.open.options!=X)this.range=z8(X.length,K,Z.state.facet(Y3).maxRenderedOptions),this.showOptions(X,J.id);if(this.updateSel(),Y!=(($=Q.open)===null||$===void 0?void 0:$.disabled))this.dom.classList.toggle("cm-tooltip-autocomplete-disabled",!!Y)}}updateTooltipClass(Z){let $=this.tooltipClass(Z);if($!=this.currentClass){for(let J of this.currentClass.split(" "))if(J)this.dom.classList.remove(J);for(let J of $.split(" "))if(J)this.dom.classList.add(J);this.currentClass=$}}positioned(Z){if(this.space=Z,this.info)this.view.requestMeasure(this.placeInfoReq)}updateSel(){let Z=this.view.state.field(this.stateField),$=Z.open;if($.selected>-1&&$.selected<this.range.from||$.selected>=this.range.to)this.range=z8($.options.length,$.selected,this.view.state.facet(Y3).maxRenderedOptions),this.showOptions($.options,Z.id);if(this.updateSelectedOption($.selected)){this.destroyInfo();let{completion:J}=$.options[$.selected],{info:Q}=J;if(!Q)return;let X=typeof Q==="string"?document.createTextNode(Q):Q(J);if(!X)return;if("then"in X)X.then((K)=>{if(K&&this.view.state.field(this.stateField,!1)==Z)this.addInfoPane(K,J)}).catch((K)=>z3(this.view.state,K,"completion info"));else this.addInfoPane(X,J)}}addInfoPane(Z,$){this.destroyInfo();let J=this.info=document.createElement("div");if(J.className="cm-tooltip cm-completionInfo",Z.nodeType!=null)J.appendChild(Z),this.infoDestroy=null;else{let{dom:Q,destroy:X}=Z;J.appendChild(Q),this.infoDestroy=X||null}this.dom.appendChild(J),this.view.requestMeasure(this.placeInfoReq)}updateSelectedOption(Z){let $=null;for(let J=this.list.firstChild,Q=this.range.from;J;J=J.nextSibling,Q++)if(J.nodeName!="LI"||!J.id)Q--;else if(Q==Z){if(!J.hasAttribute("aria-selected"))J.setAttribute("aria-selected","true"),$=J}else if(J.hasAttribute("aria-selected"))J.removeAttribute("aria-selected");if($)SU(this.list,$);return $}measureInfo(){let Z=this.dom.querySelector("[aria-selected]");if(!Z||!this.info)return null;let $=this.dom.getBoundingClientRect(),J=this.info.getBoundingClientRect(),Q=Z.getBoundingClientRect(),X=this.space;if(!X){let K=this.dom.ownerDocument.defaultView||window;X={left:0,top:0,right:K.innerWidth,bottom:K.innerHeight}}if(Q.top>Math.min(X.bottom,$.bottom)-10||Q.bottom<Math.max(X.top,$.top)+10)return null;return this.view.state.facet(Y3).positionInfo(this.view,$,Q,J,X,this.dom)}placeInfo(Z){if(this.info)if(Z){if(Z.style)this.info.style.cssText=Z.style;this.info.className="cm-tooltip cm-completionInfo "+(Z.class||"")}else this.info.style.cssText="top: -1e6px"}createListBox(Z,$,J){const Q=document.createElement("ul");Q.id=$,Q.setAttribute("role","listbox"),Q.setAttribute("aria-expanded","true"),Q.setAttribute("aria-label",this.view.state.phrase("Completions"));let X=null;for(let K=J.from;K<J.to;K++){let{completion:Y,match:U}=Z[K],{section:q}=Y;if(q){let z=typeof q=="string"?q:q.name;if(z!=X&&(K>J.from||J.from==0))if(X=z,typeof q!="string"&&q.header)Q.appendChild(q.header(q));else{let j=Q.appendChild(document.createElement("completion-section"));j.textContent=z}}const W=Q.appendChild(document.createElement("li"));W.id=$+"-"+K,W.setAttribute("role","option");let G=this.optionClass(Y);if(G)W.className=G;for(let z of this.optionContent){let j=z(Y,this.view.state,this.view,U);if(j)W.appendChild(j)}}if(J.from)Q.classList.add("cm-completionListIncompleteTop");if(J.to<Z.length)Q.classList.add("cm-completionListIncompleteBottom");return Q}destroyInfo(){if(this.info){if(this.infoDestroy)this.infoDestroy();this.info.remove(),this.info=null}}destroy(){this.destroyInfo()}}class F5{constructor(Z,$,J,Q,X,K){this.options=Z,this.attrs=$,this.tooltip=J,this.timestamp=Q,this.selected=X,this.disabled=K}setSelected(Z,$){return Z==this.selected||Z>=this.options.length?this:new F5(this.options,FJ($,Z),this.tooltip,this.timestamp,Z,this.disabled)}static build(Z,$,J,Q,X){let K=bU(Z,$);if(!K.length)return Q&&Z.some((U)=>U.state==1)?new F5(Q.options,Q.attrs,Q.tooltip,Q.timestamp,Q.selected,!0):null;let Y=$.facet(Y3).selectOnOpen?0:-1;if(Q&&Q.selected!=Y&&Q.selected!=-1){let U=Q.options[Q.selected].completion;for(let q=0;q<K.length;q++)if(K[q].completion==U){Y=q;break}}return new F5(K,FJ(J,Y),{pos:Z.reduce((U,q)=>q.hasResult()?Math.min(U,q.from):U,1e8),create:mU,above:X.aboveCursor},Q?Q.timestamp:Date.now(),Y,!1)}map(Z){return new F5(this.options,this.attrs,Object.assign(Object.assign({},this.tooltip),{pos:Z.mapPos(this.tooltip.pos)}),this.timestamp,this.selected,this.disabled)}}class GZ{constructor(Z,$,J){this.active=Z,this.id=$,this.open=J}static start(){return new GZ(vU,"cm-ac-"+Math.floor(Math.random()*2000000).toString(36),null)}update(Z){let{state:$}=Z,J=$.facet(Y3),X=(J.override||$.languageDataAt("autocomplete",A9($)).map(PU)).map((Y)=>{return(this.active.find((q)=>q.source==Y)||new L3(Y,this.active.some((q)=>q.state!=0)?1:0)).update(Z,J)});if(X.length==this.active.length&&X.every((Y,U)=>Y==this.active[U]))X=this.active;let K=this.open;if(K&&Z.docChanged)K=K.map(Z.changes);if(Z.selection||X.some((Y)=>Y.hasResult()&&Z.changes.touchesRange(Y.from,Y.to))||!kU(X,this.active))K=F5.build(X,$,this.id,K,J);else if(K&&K.disabled&&!X.some((Y)=>Y.state==1))K=null;if(!K&&X.every((Y)=>Y.state!=1)&&X.some((Y)=>Y.hasResult()))X=X.map((Y)=>Y.hasResult()?new L3(Y.source,0):Y);for(let Y of Z.effects)if(Y.is(BJ))K=K&&K.setSelected(Y.value,this.id);return X==this.active&&K==this.open?this:new GZ(X,this.id,K)}get tooltip(){return this.open?this.open.tooltip:null}get attrs(){return this.open?this.open.attrs:this.active.length?xU:wU}}var xU={"aria-autocomplete":"list"},wU={},vU=[];class L3{constructor(Z,$,J=-1){this.source=Z,this.state=$,this.explicitPos=J}hasResult(){return!1}update(Z,$){let J=AJ(Z,$),Q=this;if(J&8||J&16&&this.touches(Z))Q=new L3(Q.source,0);if(J&4&&Q.state==0)Q=new L3(this.source,1);Q=Q.updateFor(Z,J);for(let X of Z.effects)if(X.is(qZ))Q=new L3(Q.source,1,X.value?A9(Z.state):-1);else if(X.is(J7))Q=new L3(Q.source,0);else if(X.is(LJ)){for(let K of X.value)if(K.source==Q.source)Q=K}return Q}updateFor(Z,$){return this.map(Z.changes)}map(Z){return Z.empty||this.explicitPos<0?this:new L3(this.source,this.state,Z.mapPos(this.explicitPos))}touches(Z){return Z.changes.touchesRange(A9(Z.state))}}class N5 extends L3{constructor(Z,$,J,Q,X){super(Z,2,$);this.result=J,this.from=Q,this.to=X}hasResult(){return!0}updateFor(Z,$){var J;if(!($&3))return this.map(Z.changes);let Q=this.result;if(Q.map&&!Z.changes.empty)Q=Q.map(Q,Z.changes);let X=Z.changes.mapPos(this.from),K=Z.changes.mapPos(this.to,1),Y=A9(Z.state);if((this.explicitPos<0?Y<=X:Y<this.from)||Y>K||!Q||$&2&&A9(Z.startState)==this.from)return new L3(this.source,$&4?1:0);let U=this.explicitPos<0?-1:Z.changes.mapPos(this.explicitPos);if(hU(Q.validFor,Z.state,X,K))return new N5(this.source,U,Q,X,K);if(Q.update&&(Q=Q.update(Q,X,K,new _8(Z.state,Y,U>=0))))return new N5(this.source,U,Q,Q.from,(J=Q.to)!==null&&J!==void 0?J:A9(Z.state));return new L3(this.source,1,U)}map(Z){if(Z.empty)return this;if(!(this.result.map?this.result.map(this.result,Z):this.result))return new L3(this.source,0);return new N5(this.source,this.explicitPos<0?-1:Z.mapPos(this.explicitPos),this.result,Z.mapPos(this.from),Z.mapPos(this.to,1))}touches(Z){return Z.changes.touchesRange(this.from,this.to)}}var LJ=v.define({map(Z,$){return Z.map((J)=>J.map($))}}),BJ=v.define(),R3=F3.define({create(){return GZ.start()},update(Z,$){return Z.update($)},provide:(Z)=>[N4.from(Z,($)=>$.tooltip),E.contentAttributes.from(Z,($)=>$.attrs)]}),mU=yU(R3,F8),uU=(Z)=>{let $=Z.state.field(R3,!1);if(Z.state.readOnly||!$||!$.open||$.open.selected<0||$.open.disabled||Date.now()-$.open.timestamp<Z.state.facet(Y3).interactionDelay)return!1;return F8(Z,$.open.options[$.open.selected])},fU=(Z)=>{if(!Z.state.field(R3,!1))return!1;return Z.dispatch({effects:qZ.of(!0)}),!0},gU=(Z)=>{let $=Z.state.field(R3,!1);if(!$||!$.active.some((J)=>J.state!=0))return!1;return Z.dispatch({effects:J7.of(null)}),!0};class EJ{constructor(Z,$){this.active=Z,this.context=$,this.time=Date.now(),this.updates=[],this.done=void 0}}var lU=50,pU=1000,dU=S3.fromClass(class{constructor(Z){this.view=Z,this.debounceUpdate=-1,this.running=[],this.debounceAccept=-1,this.pendingStart=!1,this.composing=0;for(let $ of Z.state.field(R3).active)if($.state==1)this.startQuery($)}update(Z){let $=Z.state.field(R3),J=Z.state.facet(Y3);if(!Z.selectionSet&&!Z.docChanged&&Z.startState.field(R3)==$)return;let Q=Z.transactions.some((K)=>{let Y=AJ(K,J);return Y&8||(K.selection||K.docChanged)&&!(Y&3)});for(let K=0;K<this.running.length;K++){let Y=this.running[K];if(Q||Y.context.abortOnDocChange&&Z.docChanged||Y.updates.length+Z.transactions.length>lU&&Date.now()-Y.time>pU){for(let U of Y.context.abortListeners)try{U()}catch(q){z3(this.view.state,q)}Y.context.abortListeners=null,this.running.splice(K--,1)}else Y.updates.push(...Z.transactions)}if(this.debounceUpdate>-1)clearTimeout(this.debounceUpdate);if(Z.transactions.some((K)=>K.effects.some((Y)=>Y.is(qZ))))this.pendingStart=!0;let X=this.pendingStart?50:J.activateOnTypingDelay;if(this.debounceUpdate=$.active.some((K)=>K.state==1&&!this.running.some((Y)=>Y.active.source==K.source))?setTimeout(()=>this.startUpdate(),X):-1,this.composing!=0){for(let K of Z.transactions)if(K.isUserEvent("input.type"))this.composing=2;else if(this.composing==2&&K.selection)this.composing=3}}startUpdate(){this.debounceUpdate=-1,this.pendingStart=!1;let{state:Z}=this.view,$=Z.field(R3);for(let J of $.active)if(J.state==1&&!this.running.some((Q)=>Q.active.source==J.source))this.startQuery(J)}startQuery(Z){let{state:$}=this.view,J=A9($),Q=new _8($,J,Z.explicitPos==J,this.view),X=new EJ(Z,Q);this.running.push(X),Promise.resolve(Z.source(Q)).then((K)=>{if(!X.context.aborted)X.done=K||null,this.scheduleAccept()},(K)=>{this.view.dispatch({effects:J7.of(null)}),z3(this.view.state,K)})}scheduleAccept(){if(this.running.every((Z)=>Z.done!==void 0))this.accept();else if(this.debounceAccept<0)this.debounceAccept=setTimeout(()=>this.accept(),this.view.state.facet(Y3).updateSyncTime)}accept(){var Z;if(this.debounceAccept>-1)clearTimeout(this.debounceAccept);this.debounceAccept=-1;let $=[],J=this.view.state.facet(Y3);for(let Q=0;Q<this.running.length;Q++){let X=this.running[Q];if(X.done===void 0)continue;if(this.running.splice(Q--,1),X.done){let Y=new N5(X.active.source,X.active.explicitPos,X.done,X.done.from,(Z=X.done.to)!==null&&Z!==void 0?Z:A9(X.updates.length?X.updates[0].startState:this.view.state));for(let U of X.updates)Y=Y.update(U,J);if(Y.hasResult()){$.push(Y);continue}}let K=this.view.state.field(R3).active.find((Y)=>Y.source==X.active.source);if(K&&K.state==1)if(X.done==null){let Y=new L3(X.active.source,0);for(let U of X.updates)Y=Y.update(U,J);if(Y.state!=1)$.push(Y)}else this.startQuery(K)}if($.length)this.view.dispatch({effects:LJ.of($)})}},{eventHandlers:{blur(Z){let $=this.view.state.field(R3,!1);if($&&$.tooltip&&this.view.state.facet(Y3).closeOnBlur){let J=$.open&&D4(this.view,$.open.tooltip);if(!J||!J.dom.contains(Z.relatedTarget))setTimeout(()=>this.view.dispatch({effects:J7.of(null)}),10)}},compositionstart(){this.composing=1},compositionend(){if(this.composing==3)setTimeout(()=>this.view.dispatch({effects:qZ.of(!1)}),20);this.composing=0}}}),cU=typeof navigator=="object"&&/Win/.test(navigator.platform),sU=Q9.highest(E.domEventHandlers({keydown(Z,$){let J=$.state.field(R3,!1);if(!J||!J.open||J.open.disabled||J.open.selected<0||Z.key.length>1||Z.ctrlKey&&!(cU&&Z.altKey)||Z.metaKey)return!1;let Q=J.open.options[J.open.selected],X=J.active.find((Y)=>Y.source==Q.source),K=Q.completion.commitCharacters||X.result.commitCharacters;if(K&&K.indexOf(Z.key)>-1)F8($,Q);return!1}})),PJ=E.baseTheme({".cm-tooltip.cm-tooltip-autocomplete":{"& > ul":{fontFamily:"monospace",whiteSpace:"nowrap",overflow:"hidden auto",maxWidth_fallback:"700px",maxWidth:"min(700px, 95vw)",minWidth:"250px",maxHeight:"10em",height:"100%",listStyle:"none",margin:0,padding:0,"& > li, & > completion-section":{padding:"1px 3px",lineHeight:1.2},"& > li":{overflowX:"hidden",textOverflow:"ellipsis",cursor:"pointer"},"& > completion-section":{display:"list-item",borderBottom:"1px solid silver",paddingLeft:"0.5em",opacity:0.7}}},"&light .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#17c",color:"white"},"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#777"},"&dark .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#347",color:"white"},"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#444"},".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after":{content:'"\xB7\xB7\xB7"',opacity:0.5,display:"block",textAlign:"center"},".cm-tooltip.cm-completionInfo":{position:"absolute",padding:"3px 9px",width:"max-content",maxWidth:"400px",boxSizing:"border-box",whiteSpace:"pre-line"},".cm-completionInfo.cm-completionInfo-left":{right:"100%"},".cm-completionInfo.cm-completionInfo-right":{left:"100%"},".cm-completionInfo.cm-completionInfo-left-narrow":{right:"30px"},".cm-completionInfo.cm-completionInfo-right-narrow":{left:"30px"},"&light .cm-snippetField":{backgroundColor:"#00000022"},"&dark .cm-snippetField":{backgroundColor:"#ffffff22"},".cm-snippetFieldPosition":{verticalAlign:"text-top",width:0,height:"1.15em",display:"inline-block",margin:"0 -0.7px -.7em",borderLeft:"1.4px dotted #888"},".cm-completionMatchedText":{textDecoration:"underline"},".cm-completionDetail":{marginLeft:"0.5em",fontStyle:"italic"},".cm-completionIcon":{fontSize:"90%",width:".8em",display:"inline-block",textAlign:"center",paddingRight:".6em",opacity:"0.6",boxSizing:"content-box"},".cm-completionIcon-function, .cm-completionIcon-method":{"&:after":{content:"'\u0192'"}},".cm-completionIcon-class":{"&:after":{content:"'\u25CB'"}},".cm-completionIcon-interface":{"&:after":{content:"'\u25CC'"}},".cm-completionIcon-variable":{"&:after":{content:"'\uD835\uDC65'"}},".cm-completionIcon-constant":{"&:after":{content:"'\uD835\uDC36'"}},".cm-completionIcon-type":{"&:after":{content:"'\uD835\uDC61'"}},".cm-completionIcon-enum":{"&:after":{content:"'\u222A'"}},".cm-completionIcon-property":{"&:after":{content:"'\u25A1'"}},".cm-completionIcon-keyword":{"&:after":{content:"'\uD83D\uDD11\uFE0E'"}},".cm-completionIcon-namespace":{"&:after":{content:"'\u25A2'"}},".cm-completionIcon-text":{"&:after":{content:"'abc'",fontSize:"50%",verticalAlign:"middle"}}});class CJ{constructor(Z,$,J,Q){this.field=Z,this.line=$,this.from=J,this.to=Q}}class N8{constructor(Z,$,J){this.field=Z,this.from=$,this.to=J}map(Z){let $=Z.mapPos(this.from,-1,J3.TrackDel),J=Z.mapPos(this.to,1,J3.TrackDel);return $==null||J==null?null:new N8(this.field,$,J)}}class D8{constructor(Z,$){this.lines=Z,this.fieldPositions=$}instantiate(Z,$){let J=[],Q=[$],X=Z.doc.lineAt($),K=/^\s*/.exec(X.text)[0];for(let U of this.lines){if(J.length){let q=K,W=/^\t*/.exec(U)[0].length;for(let G=0;G<W;G++)q+=Z.facet(W5);Q.push($+q.length-W),U=q+U.slice(W)}J.push(U),$+=U.length+1}let Y=this.fieldPositions.map((U)=>new N8(U.field,Q[U.line]+U.from,Q[U.line]+U.to));return{text:J,ranges:Y}}static parse(Z){let $=[],J=[],Q=[],X;for(let K of Z.split(/\r\n?|\n/)){while(X=/[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(K)){let Y=X[1]?+X[1]:null,U=X[2]||X[3]||"",q=-1,W=U.replace(/\\[{}]/g,(G)=>G[1]);for(let G=0;G<$.length;G++)if(Y!=null?$[G].seq==Y:W?$[G].name==W:!1)q=G;if(q<0){let G=0;while(G<$.length&&(Y==null||$[G].seq!=null&&$[G].seq<Y))G++;$.splice(G,0,{seq:Y,name:W}),q=G;for(let z of Q)if(z.field>=q)z.field++}Q.push(new CJ(q,J.length,X.index,X.index+W.length)),K=K.slice(0,X.index)+U+K.slice(X.index+X[0].length)}K=K.replace(/\\([{}])/g,(Y,U,q)=>{for(let W of Q)if(W.line==J.length&&W.from>q)W.from--,W.to--;return U}),J.push(K)}return new D8(J,Q)}}var iU=c.widget({widget:new class extends h9{toDOM(){let Z=document.createElement("span");return Z.className="cm-snippetFieldPosition",Z}ignoreEvent(){return!1}}}),nU=c.mark({class:"cm-snippetField"});class D5{constructor(Z,$){this.ranges=Z,this.active=$,this.deco=c.set(Z.map((J)=>(J.from==J.to?iU:nU).range(J.from,J.to)))}map(Z){let $=[];for(let J of this.ranges){let Q=J.map(Z);if(!Q)return null;$.push(Q)}return new D5($,this.active)}selectionInsideField(Z){return Z.ranges.every(($)=>this.ranges.some((J)=>J.field==this.active&&J.from<=$.from&&J.to>=$.to))}}var X7=v.define({map(Z,$){return Z&&Z.map($)}}),aU=v.define(),Q7=F3.define({create(){return null},update(Z,$){for(let J of $.effects){if(J.is(X7))return J.value;if(J.is(aU)&&Z)return new D5(Z.ranges,J.value)}if(Z&&$.docChanged)Z=Z.map($.changes);if(Z&&$.selection&&!Z.selectionInsideField($.selection))Z=null;return Z},provide:(Z)=>E.decorations.from(Z,($)=>$?$.deco:c.none)}),oU=({state:Z,dispatch:$})=>{if(!Z.field(Q7,!1))return!1;return $(Z.update({effects:X7.of(null)})),!0},tU=TJ(1),eU=TJ(-1),Zq=[{key:"Tab",run:tU,shift:eU},{key:"Escape",run:oU}],NJ=B.define({combine(Z){return Z.length?Z[0]:Zq}}),$q=Q9.highest(K5.compute([NJ],(Z)=>Z.facet(NJ))),Jq=E.domEventHandlers({mousedown(Z,$){let J=$.state.field(Q7,!1),Q;if(!J||(Q=$.posAtCoords({x:Z.clientX,y:Z.clientY}))==null)return!1;let X=J.ranges.find((K)=>K.from<=Q&&K.to>=Q);if(!X||X.field==J.active)return!1;return $.dispatch({selection:R8(J.ranges,X.field),effects:X7.of(J.ranges.some((K)=>K.field>X.field)?new D5(J.ranges,X.field):null),scrollIntoView:!0}),!0}});var yJ=new class extends s3{};yJ.startSide=1;yJ.endSide=-1;var bG=typeof navigator=="object"&&/Android\b/.test(navigator.userAgent);var Qq=[{key:"Ctrl-Space",run:fU},{key:"Escape",run:gU},{key:"ArrowDown",run:UZ(!0)},{key:"ArrowUp",run:UZ(!1)},{key:"PageDown",run:UZ(!0,"page")},{key:"PageUp",run:UZ(!1,"page")},{key:"Enter",run:uU}],Xq=Q9.highest(K5.computeN([Y3],(Z)=>Z.facet(Y3).defaultKeymap?[Qq]:[]));function K7(Z){return($,J)=>{let Q=$.node.getChild("VariableDefinition");if(Q)J(Q,Z);return!0}}function hJ(Z,$){let J=bJ.get($);if(J)return J;let Q=[],X=!0;function K(Y,U){let q=Z.sliceString(Y.from,Y.to);Q.push({label:q,type:U})}return $.cursor(u.IncludeAnonymous).iterate((Y)=>{if(X)X=!1;else if(Y.name){let U=Uq[Y.name];if(U&&U(Y,K)||vJ.has(Y.name))return!1}else if(Y.to-Y.from>8192){for(let U of hJ(Z,Y.node))Q.push(U);return!1}}),bJ.set($,Q),Q}function qq(Z){let $=o(Z.state).resolveInner(Z.pos,-1);if(mJ.indexOf($.name)>-1)return null;let J=$.name=="VariableName"||$.to-$.from<20&&kJ.test(Z.state.sliceDoc($.from,$.to));if(!J&&!Z.explicit)return null;let Q=[];for(let X=$;X;X=X.parent)if(vJ.has(X.name))Q=Q.concat(hJ(Z.state.doc,X));return{options:Q,from:J?$.from:Z.pos,validFor:kJ}}function lJ(Z={}){let $=Z.jsx?Z.typescript?M8:I8:Z.typescript?V8:l3,J=Z.typescript?Kq.concat(Gq):wJ.concat(gJ);return new u9($,[l3.data.of({autocomplete:DJ(mJ,O8(J))}),l3.data.of({autocomplete:qq}),Z.jsx?jq:[]])}function Wq(Z){for(;;){if(Z.name=="JSXOpenTag"||Z.name=="JSXSelfClosingTag"||Z.name=="JSXFragmentTag")return Z;if(Z.name=="JSXEscape"||!Z.parent)return null;Z=Z.parent}}function xJ(Z,$,J=Z.length){for(let Q=$===null||$===void 0?void 0:$.firstChild;Q;Q=Q.nextSibling)if(Q.name=="JSXIdentifier"||Q.name=="JSXBuiltin"||Q.name=="JSXNamespacedName"||Q.name=="JSXMemberExpression")return Z.sliceString(Q.from,Math.min(Q.to,J));return""}var wJ=[O3("function ${name}(${params}) {\n\t${}\n}",{label:"function",detail:"definition",type:"keyword"}),O3("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}",{label:"for",detail:"loop",type:"keyword"}),O3("for (let ${name} of ${collection}) {\n\t${}\n}",{label:"for",detail:"of loop",type:"keyword"}),O3("do {\n\t${}\n} while (${})",{label:"do",detail:"loop",type:"keyword"}),O3("while (${}) {\n\t${}\n}",{label:"while",detail:"loop",type:"keyword"}),O3("try {\n\t${}\n} catch (${error}) {\n\t${}\n}",{label:"try",detail:"/ catch block",type:"keyword"}),O3("if (${}) {\n\t${}\n}",{label:"if",detail:"block",type:"keyword"}),O3("if (${}) {\n\t${}\n} else {\n\t${}\n}",{label:"if",detail:"/ else block",type:"keyword"}),O3("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}",{label:"class",detail:"definition",type:"keyword"}),O3("import {${names}} from \"${module}\"\n${}",{label:"import",detail:"named",type:"keyword"}),O3("import ${name} from \"${module}\"\n${}",{label:"import",detail:"default",type:"keyword"})],Kq=wJ.concat([O3("interface ${name} {\n\t${}\n}",{label:"interface",detail:"definition",type:"keyword"}),O3("type ${name} = ${type}",{label:"type",detail:"definition",type:"keyword"}),O3("enum ${name} {\n\t${}\n}",{label:"enum",detail:"definition",type:"keyword"})]),bJ=new l5,vJ=new Set(["Script","Block","FunctionExpression","FunctionDeclaration","ArrowFunction","MethodDeclaration","ForStatement"]),Yq=["FunctionDeclaration"],Uq={FunctionDeclaration:K7("function"),ClassDeclaration:K7("class"),ClassExpression:()=>!0,EnumDeclaration:K7("constant"),TypeAliasDeclaration:K7("type"),NamespaceDeclaration:K7("namespace"),VariableDefinition(Z,$){if(!Z.matchContext(Yq))$(Z,"variable")},TypeDefinition(Z,$){$(Z,"type")},__proto__:null},kJ=/^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/,mJ=["TemplateString","String","RegExp","LineComment","BlockComment","VariableDefinition","TypeDefinition","Label","PropertyDefinition","PropertyName","PrivatePropertyDefinition","PrivatePropertyName",".","?."],l3=W9.define({name:"javascript",parser:zJ.configure({props:[f9.add({IfStatement:j5({except:/^\s*({|else\b)/}),TryStatement:j5({except:/^\s*({|catch\b|finally\b)/}),LabeledStatement:S1,SwitchBody:(Z)=>{let $=Z.textAfter,J=/^\s*\}/.test($),Q=/^\s*(case|default)\b/.test($);return Z.baseIndent+(J?0:Q?1:2)*Z.unit},Block:T1({closing:"}"}),ArrowFunction:(Z)=>Z.baseIndent+Z.unit,"TemplateString BlockComment":()=>null,"Statement Property":j5({except:/^{/}),JSXElement(Z){let $=/^\s*<\//.test(Z.textAfter);return Z.lineIndent(Z.node.from)+($?0:Z.unit)},JSXEscape(Z){let $=/\s*\}/.test(Z.textAfter);return Z.lineIndent(Z.node.from)+($?0:Z.unit)},"JSXOpenTag JSXSelfClosingTag"(Z){return Z.column(Z.node.from)+Z.unit}}),_5.add({"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType":a7,BlockComment(Z){return{from:Z.from+2,to:Z.to-2}}})]}),languageData:{closeBrackets:{brackets:["(","[","{","'",'"',"`"]},commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:case |default:|\{|\}|<\/)$/,wordChars:"$"}}),uJ={test:(Z)=>/^JSX/.test(Z.name),facet:m4({commentTokens:{block:{open:"{/*",close:"*/}"}}})},V8=l3.configure({dialect:"ts"},"typescript"),I8=l3.configure({dialect:"jsx",props:[n7.add((Z)=>Z.isTop?[uJ]:void 0)]}),M8=l3.configure({dialect:"jsx ts",props:[n7.add((Z)=>Z.isTop?[uJ]:void 0)]},"typescript"),fJ=(Z)=>({label:Z,type:"keyword"}),gJ="break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(fJ),Gq=gJ.concat(["declare","implements","private","protected","public"].map(fJ)),zq=typeof navigator=="object"&&/Android\b/.test(navigator.userAgent),jq=E.inputHandler.of((Z,$,J,Q,X)=>{if((zq?Z.composing:Z.compositionStarted)||Z.state.readOnly||$!=J||Q!=">"&&Q!="/"||!l3.isActiveAt(Z.state,$,-1))return!1;let K=X(),{state:Y}=K,U=Y.changeByRange((q)=>{var W;let{head:G}=q,z=o(Y).resolveInner(G-1,-1),j;if(z.name=="JSXStartTag")z=z.parent;if(Y.doc.sliceString(G-1,G)!=Q||z.name=="JSXAttributeValue"&&z.to>G);else if(Q==">"&&z.name=="JSXFragmentTag")return{range:q,changes:{from:G,insert:"</>"}};else if(Q=="/"&&z.name=="JSXStartCloseTag"){let _=z.parent,H=_.parent;if(H&&_.from==G-2&&((j=xJ(Y.doc,H.firstChild,G))||((W=H.firstChild)===null||W===void 0?void 0:W.name)=="JSXFragmentTag")){let F=`${j}>`;return{range:R.cursor(G+F.length,-1),changes:{from:G,insert:F}}}}else if(Q==">"){let _=Wq(z);if(_&&_.name=="JSXOpenTag"&&!/^\/?>|^<\//.test(Y.doc.sliceString(G,G+2))&&(j=xJ(Y.doc,_,G)))return{range:q,changes:{from:G,insert:`</${j}>`}}}return{range:q}});if(U.changes.empty)return!1;return Z.dispatch([K,Y.update(U,{userEvent:"input.complete",scrollIntoView:!0})]),!0});function R5(Z,$,J=Z.length){if(!$)return"";let Q=$.firstChild,X=Q&&Q.getChild("TagName");return X?Z.sliceString(X.from,Math.min(X.to,J)):""}function V5(Z,$=!1){for(;Z;Z=Z.parent)if(Z.name=="Element")if($)$=!1;else return Z;return null}function nJ(Z,$,J){let Q=J.tags[R5(Z,V5($))];return(Q===null||Q===void 0?void 0:Q.children)||J.allTags}function E8(Z,$){let J=[];for(let Q=V5($);Q&&!Q.type.isTop;Q=V5(Q.parent)){let X=R5(Z,Q);if(X&&Q.lastChild.name=="CloseTag")break;if(X&&J.indexOf(X)<0&&($.name=="EndTag"||$.from>=Q.firstChild.to))J.push(X)}return J}function pJ(Z,$,J,Q,X){let K=/\s*>/.test(Z.sliceDoc(X,X+5))?"":">",Y=V5(J,!0);return{from:Q,to:X,options:nJ(Z.doc,Y,$).map((U)=>({label:U,type:"type"})).concat(E8(Z.doc,J).map((U,q)=>({label:"/"+U,apply:"/"+U+K,type:"type",boost:99-q}))),validFor:/^\/?[:\-\.\w\u00b7-\uffff]*$/}}function dJ(Z,$,J,Q){let X=/\s*>/.test(Z.sliceDoc(Q,Q+5))?"":">";return{from:J,to:Q,options:E8(Z.doc,$).map((K,Y)=>({label:K,apply:K+X,type:"type",boost:99-Y})),validFor:aJ}}function Oq(Z,$,J,Q){let X=[],K=0;for(let Y of nJ(Z.doc,J,$))X.push({label:"<"+Y,type:"type"});for(let Y of E8(Z.doc,J))X.push({label:"</"+Y+">",type:"type",boost:99-K++});return{from:Q,to:Q,options:X,validFor:/^<\/?[:\-\.\w\u00b7-\uffff]*$/}}function Hq(Z,$,J,Q,X){let K=V5(J),Y=K?$.tags[R5(Z.doc,K)]:null,U=Y&&Y.attrs?Object.keys(Y.attrs):[],q=Y&&Y.globalAttrs===!1?U:U.length?U.concat($.globalAttrNames):$.globalAttrNames;return{from:Q,to:X,options:q.map((W)=>({label:W,type:"property"})),validFor:aJ}}function Fq(Z,$,J,Q,X){var K;let Y=(K=J.parent)===null||K===void 0?void 0:K.getChild("AttributeName"),U=[],q=void 0;if(Y){let W=Z.sliceDoc(Y.from,Y.to),G=$.globalAttrs[W];if(!G){let z=V5(J),j=z?$.tags[R5(Z.doc,z)]:null;G=(j===null||j===void 0?void 0:j.attrs)&&j.attrs[W]}if(G){let z=Z.sliceDoc(Q,X).toLowerCase(),j='"',_='"';if(/^['"]/.test(z))q=z[0]=='"'?/^[^"]*$/:/^[^']*$/,j="",_=Z.sliceDoc(X,X+1)==z[0]?"":z[0],z=z.slice(1),Q++;else q=/^[^\s<>='"]*$/;for(let H of G)U.push({label:H,apply:j+H+_,type:"constant"})}}return{from:Q,to:X,options:U,validFor:q}}function Nq(Z,$){let{state:J,pos:Q}=$,X=o(J).resolveInner(Q,-1),K=X.resolve(Q);for(let Y=Q,U;K==X&&(U=X.childBefore(Y));){let q=U.lastChild;if(!q||!q.type.isError||q.from<q.to)break;K=X=U,Y=q.from}if(X.name=="TagName")return X.parent&&/CloseTag$/.test(X.parent.name)?dJ(J,X,X.from,Q):pJ(J,Z,X,X.from,Q);else if(X.name=="StartTag")return pJ(J,Z,X,Q,Q);else if(X.name=="StartCloseTag"||X.name=="IncompleteCloseTag")return dJ(J,X,Q,Q);else if(X.name=="OpenTag"||X.name=="SelfClosingTag"||X.name=="AttributeName")return Hq(J,Z,X,X.name=="AttributeName"?X.from:Q,Q);else if(X.name=="Is"||X.name=="AttributeValue"||X.name=="UnquotedAttributeValue")return Fq(J,Z,X,X.name=="Is"?Q:X.from,Q);else if($.explicit&&(K.name=="Element"||K.name=="Text"||K.name=="Document"))return Oq(J,Z,X,Q);else return null}function Dq(Z){let{extraTags:$,extraGlobalAttributes:J}=Z,Q=J||$?new U7($,J):U7.default;return(X)=>Nq(Q,X)}function eJ(Z={}){let $="",J;if(Z.matchClosingTags===!1)$="noMatch";if(Z.selfClosingTags===!0)$=($?$+" ":"")+"selfClosing";if(Z.nestedLanguages&&Z.nestedLanguages.length||Z.nestedAttributes&&Z.nestedAttributes.length)J=K8((Z.nestedLanguages||[]).concat(rJ),(Z.nestedAttributes||[]).concat(oJ));let Q=J?tJ.configure({wrap:J,dialect:$}):$?WZ.configure({dialect:$}):WZ;return new u9(Q,[WZ.data.of({autocomplete:Dq(Z)}),Z.autoCloseTags!==!1?Vq:[],lJ().support,qJ().support])}var Y7=["_blank","_self","_top","_parent"],A8=["ascii","utf-8","utf-16","latin1","latin1"],L8=["get","post","put","delete"],B8=["application/x-www-form-urlencoded","multipart/form-data","text/plain"],B3=["true","false"],P={},_q={a:{attrs:{href:null,ping:null,type:null,media:null,target:Y7,hreflang:null}},abbr:P,address:P,area:{attrs:{alt:null,coords:null,href:null,target:null,ping:null,media:null,hreflang:null,type:null,shape:["default","rect","circle","poly"]}},article:P,aside:P,audio:{attrs:{src:null,mediagroup:null,crossorigin:["anonymous","use-credentials"],preload:["none","metadata","auto"],autoplay:["autoplay"],loop:["loop"],controls:["controls"]}},b:P,base:{attrs:{href:null,target:Y7}},bdi:P,bdo:P,blockquote:{attrs:{cite:null}},body:P,br:P,button:{attrs:{form:null,formaction:null,name:null,value:null,autofocus:["autofocus"],disabled:["autofocus"],formenctype:B8,formmethod:L8,formnovalidate:["novalidate"],formtarget:Y7,type:["submit","reset","button"]}},canvas:{attrs:{width:null,height:null}},caption:P,center:P,cite:P,code:P,col:{attrs:{span:null}},colgroup:{attrs:{span:null}},command:{attrs:{type:["command","checkbox","radio"],label:null,icon:null,radiogroup:null,command:null,title:null,disabled:["disabled"],checked:["checked"]}},data:{attrs:{value:null}},datagrid:{attrs:{disabled:["disabled"],multiple:["multiple"]}},datalist:{attrs:{data:null}},dd:P,del:{attrs:{cite:null,datetime:null}},details:{attrs:{open:["open"]}},dfn:P,div:P,dl:P,dt:P,em:P,embed:{attrs:{src:null,type:null,width:null,height:null}},eventsource:{attrs:{src:null}},fieldset:{attrs:{disabled:["disabled"],form:null,name:null}},figcaption:P,figure:P,footer:P,form:{attrs:{action:null,name:null,"accept-charset":A8,autocomplete:["on","off"],enctype:B8,method:L8,novalidate:["novalidate"],target:Y7}},h1:P,h2:P,h3:P,h4:P,h5:P,h6:P,head:{children:["title","base","link","style","meta","script","noscript","command"]},header:P,hgroup:P,hr:P,html:{attrs:{manifest:null}},i:P,iframe:{attrs:{src:null,srcdoc:null,name:null,width:null,height:null,sandbox:["allow-top-navigation","allow-same-origin","allow-forms","allow-scripts"],seamless:["seamless"]}},img:{attrs:{alt:null,src:null,ismap:null,usemap:null,width:null,height:null,crossorigin:["anonymous","use-credentials"]}},input:{attrs:{alt:null,dirname:null,form:null,formaction:null,height:null,list:null,max:null,maxlength:null,min:null,name:null,pattern:null,placeholder:null,size:null,src:null,step:null,value:null,width:null,accept:["audio/*","video/*","image/*"],autocomplete:["on","off"],autofocus:["autofocus"],checked:["checked"],disabled:["disabled"],formenctype:B8,formmethod:L8,formnovalidate:["novalidate"],formtarget:Y7,multiple:["multiple"],readonly:["readonly"],required:["required"],type:["hidden","text","search","tel","url","email","password","datetime","date","month","week","time","datetime-local","number","range","color","checkbox","radio","file","submit","image","reset","button"]}},ins:{attrs:{cite:null,datetime:null}},kbd:P,keygen:{attrs:{challenge:null,form:null,name:null,autofocus:["autofocus"],disabled:["disabled"],keytype:["RSA"]}},label:{attrs:{for:null,form:null}},legend:P,li:{attrs:{value:null}},link:{attrs:{href:null,type:null,hreflang:null,media:null,sizes:["all","16x16","16x16 32x32","16x16 32x32 64x64"]}},map:{attrs:{name:null}},mark:P,menu:{attrs:{label:null,type:["list","context","toolbar"]}},meta:{attrs:{content:null,charset:A8,name:["viewport","application-name","author","description","generator","keywords"],"http-equiv":["content-language","content-type","default-style","refresh"]}},meter:{attrs:{value:null,min:null,low:null,high:null,max:null,optimum:null}},nav:P,noscript:P,object:{attrs:{data:null,type:null,name:null,usemap:null,form:null,width:null,height:null,typemustmatch:["typemustmatch"]}},ol:{attrs:{reversed:["reversed"],start:null,type:["1","a","A","i","I"]},children:["li","script","template","ul","ol"]},optgroup:{attrs:{disabled:["disabled"],label:null}},option:{attrs:{disabled:["disabled"],label:null,selected:["selected"],value:null}},output:{attrs:{for:null,form:null,name:null}},p:P,param:{attrs:{name:null,value:null}},pre:P,progress:{attrs:{value:null,max:null}},q:{attrs:{cite:null}},rp:P,rt:P,ruby:P,samp:P,script:{attrs:{type:["text/javascript"],src:null,async:["async"],defer:["defer"],charset:A8}},section:P,select:{attrs:{form:null,name:null,size:null,autofocus:["autofocus"],disabled:["disabled"],multiple:["multiple"]}},slot:{attrs:{name:null}},small:P,source:{attrs:{src:null,type:null,media:null}},span:P,strong:P,style:{attrs:{type:["text/css"],media:null,scoped:null}},sub:P,summary:P,sup:P,table:P,tbody:P,td:{attrs:{colspan:null,rowspan:null,headers:null}},template:P,textarea:{attrs:{dirname:null,form:null,maxlength:null,name:null,placeholder:null,rows:null,cols:null,autofocus:["autofocus"],disabled:["disabled"],readonly:["readonly"],required:["required"],wrap:["soft","hard"]}},tfoot:P,th:{attrs:{colspan:null,rowspan:null,headers:null,scope:["row","col","rowgroup","colgroup"]}},thead:P,time:{attrs:{datetime:null}},title:P,tr:P,track:{attrs:{src:null,label:null,default:null,kind:["subtitles","captions","descriptions","chapters","metadata"],srclang:null}},ul:{children:["li","script","template","ul","ol"]},var:P,video:{attrs:{src:null,poster:null,width:null,height:null,crossorigin:["anonymous","use-credentials"],preload:["auto","metadata","none"],autoplay:["autoplay"],mediagroup:["movie"],muted:["muted"],controls:["controls"]}},wbr:P},sJ={accesskey:null,class:null,contenteditable:B3,contextmenu:null,dir:["ltr","rtl","auto"],draggable:["true","false","auto"],dropzone:["copy","move","link","string:","file:"],hidden:["hidden"],id:null,inert:["inert"],itemid:null,itemprop:null,itemref:null,itemscope:["itemscope"],itemtype:null,lang:["ar","bn","de","en-GB","en-US","es","fr","hi","id","ja","pa","pt","ru","tr","zh"],spellcheck:B3,autocorrect:B3,autocapitalize:B3,style:null,tabindex:null,title:null,translate:["yes","no"],rel:["stylesheet","alternate","author","bookmark","help","license","next","nofollow","noreferrer","prefetch","prev","search","tag"],role:"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),"aria-activedescendant":null,"aria-atomic":B3,"aria-autocomplete":["inline","list","both","none"],"aria-busy":B3,"aria-checked":["true","false","mixed","undefined"],"aria-controls":null,"aria-describedby":null,"aria-disabled":B3,"aria-dropeffect":null,"aria-expanded":["true","false","undefined"],"aria-flowto":null,"aria-grabbed":["true","false","undefined"],"aria-haspopup":B3,"aria-hidden":B3,"aria-invalid":["true","false","grammar","spelling"],"aria-label":null,"aria-labelledby":null,"aria-level":null,"aria-live":["off","polite","assertive"],"aria-multiline":B3,"aria-multiselectable":B3,"aria-owns":null,"aria-posinset":null,"aria-pressed":["true","false","mixed","undefined"],"aria-readonly":B3,"aria-relevant":null,"aria-required":B3,"aria-selected":["true","false","undefined"],"aria-setsize":null,"aria-sort":["ascending","descending","none","other"],"aria-valuemax":null,"aria-valuemin":null,"aria-valuenow":null,"aria-valuetext":null},iJ="beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((Z)=>"on"+Z);for(let Z of iJ)sJ[Z]=null;class U7{constructor(Z,$){this.tags=Object.assign(Object.assign({},_q),Z),this.globalAttrs=Object.assign(Object.assign({},sJ),$),this.allTags=Object.keys(this.tags),this.globalAttrNames=Object.keys(this.globalAttrs)}}U7.default=new U7;var aJ=/^[:\-\.\w\u00b7-\uffff]*$/,Rq=l3.parser.configure({top:"SingleExpression"}),rJ=[{tag:"script",attrs:(Z)=>Z.type=="text/typescript"||Z.lang=="ts",parser:V8.parser},{tag:"script",attrs:(Z)=>Z.type=="text/babel"||Z.type=="text/jsx",parser:I8.parser},{tag:"script",attrs:(Z)=>Z.type=="text/typescript-jsx",parser:M8.parser},{tag:"script",attrs(Z){return/^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(Z.type)},parser:Rq},{tag:"script",attrs(Z){return!Z.type||/^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(Z.type)},parser:l3.parser},{tag:"style",attrs(Z){return(!Z.lang||Z.lang=="css")&&(!Z.type||/^(text\/)?(x-)?(stylesheet|css)$/i.test(Z.type))},parser:$7.parser}],oJ=[{name:"style",parser:$7.parser.configure({top:"Styles"})}].concat(iJ.map((Z)=>({name:Z,parser:l3.parser}))),tJ=W9.define({name:"html",parser:r$.configure({props:[f9.add({Element(Z){let $=/^(\s*)(<\/)?/.exec(Z.textAfter);if(Z.node.to<=Z.pos+$[0].length)return Z.continue();return Z.lineIndent(Z.node.from)+($[2]?0:Z.unit)},"OpenTag CloseTag SelfClosingTag"(Z){return Z.column(Z.node.from)+Z.unit},Document(Z){if(Z.pos+/\s*/.exec(Z.textAfter)[0].length<Z.node.to)return Z.continue();let $=null,J;for(let Q=Z.node;;){let X=Q.lastChild;if(!X||X.name!="Element"||X.to!=Q.to)break;$=Q=X}if($&&!((J=$.lastChild)&&(J.name=="CloseTag"||J.name=="SelfClosingTag")))return Z.lineIndent($.from)+Z.unit;return null}}),_5.add({Element(Z){let{firstChild:$,lastChild:J}=Z;if(!$||$.name!="OpenTag")return null;return{from:$.to,to:J.name=="CloseTag"?J.from:Z.to}}}),g4.add({"OpenTag CloseTag":(Z)=>Z.getChild("TagName")})]}),languageData:{commentTokens:{block:{open:"<!--",close:"-->"}},indentOnInput:/^\s*<\/\w+\W$/,wordChars:"-._"}}),WZ=tJ.configure({wrap:K8(rJ,oJ)}),cJ=new Set("area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" ")),Vq=E.inputHandler.of((Z,$,J,Q,X)=>{if(Z.composing||Z.state.readOnly||$!=J||Q!=">"&&Q!="/"||!WZ.isActiveAt(Z.state,$,-1))return!1;let K=X(),{state:Y}=K,U=Y.changeByRange((q)=>{var W,G,z;let j=Y.doc.sliceString(q.from-1,q.to)==Q,{head:_}=q,H=o(Y).resolveInner(_,-1),F;if(j&&Q==">"&&H.name=="EndTag"){let N=H.parent;if(((G=(W=N.parent)===null||W===void 0?void 0:W.lastChild)===null||G===void 0?void 0:G.name)!="CloseTag"&&(F=R5(Y.doc,N.parent,_))&&!cJ.has(F)){let D=_+(Y.doc.sliceString(_,_+1)===">"?1:0),M=`</${F}>`;return{range:q,changes:{from:_,to:D,insert:M}}}}else if(j&&Q=="/"&&H.name=="IncompleteCloseTag"){let N=H.parent;if(H.from==_-2&&((z=N.lastChild)===null||z===void 0?void 0:z.name)!="CloseTag"&&(F=R5(Y.doc,N,_))&&!cJ.has(F)){let D=_+(Y.doc.sliceString(_,_+1)===">"?1:0),M=`${F}>`;return{range:R.cursor(_+M.length,-1),changes:{from:_,to:D,insert:M}}}}return{range:q}});if(U.changes.empty)return!1;return Z.dispatch([K,Y.update(U,{userEvent:"input.complete",scrollIntoView:!0})]),!0});var Iq="#e5c07b",Z2="#e06c75",Mq="#56b6c2",Aq="#ffffff",zZ="#abb2bf",C8="#7d8799",Lq="#61afef",Bq="#98c379",$2="#d19a66",Eq="#c678dd",Pq="#21252b",J2="#2c313a",Q2="#282c34",P8="#353a42",Cq="#3E4451",X2="#528bff";var Tq=E.theme({"&":{color:zZ,backgroundColor:Q2},".cm-content":{caretColor:X2},".cm-cursor, .cm-dropCursor":{borderLeftColor:X2},"&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection":{backgroundColor:Cq},".cm-panels":{backgroundColor:Pq,color:zZ},".cm-panels.cm-panels-top":{borderBottom:"2px solid black"},".cm-panels.cm-panels-bottom":{borderTop:"2px solid black"},".cm-searchMatch":{backgroundColor:"#72a1ff59",outline:"1px solid #457dff"},".cm-searchMatch.cm-searchMatch-selected":{backgroundColor:"#6199ff2f"},".cm-activeLine":{backgroundColor:"#6699ff0b"},".cm-selectionMatch":{backgroundColor:"#aafe661a"},"&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket":{backgroundColor:"#bad0f847"},".cm-gutters":{backgroundColor:Q2,color:C8,border:"none"},".cm-activeLineGutter":{backgroundColor:J2},".cm-foldPlaceholder":{backgroundColor:"transparent",border:"none",color:"#ddd"},".cm-tooltip":{border:"none",backgroundColor:P8},".cm-tooltip .cm-tooltip-arrow:before":{borderTopColor:"transparent",borderBottomColor:"transparent"},".cm-tooltip .cm-tooltip-arrow:after":{borderTopColor:P8,borderBottomColor:P8},".cm-tooltip-autocomplete":{"& > ul > li[aria-selected]":{backgroundColor:J2,color:zZ}}},{dark:!0}),yq=O5.define([{tag:O.keyword,color:Eq},{tag:[O.name,O.deleted,O.character,O.propertyName,O.macroName],color:Z2},{tag:[O.function(O.variableName),O.labelName],color:Lq},{tag:[O.color,O.constant(O.name),O.standard(O.name)],color:$2},{tag:[O.definition(O.name),O.separator],color:zZ},{tag:[O.typeName,O.className,O.number,O.changed,O.annotation,O.modifier,O.self,O.namespace],color:Iq},{tag:[O.operator,O.operatorKeyword,O.url,O.escape,O.regexp,O.link,O.special(O.string)],color:Mq},{tag:[O.meta,O.comment],color:C8},{tag:O.strong,fontWeight:"bold"},{tag:O.emphasis,fontStyle:"italic"},{tag:O.strikethrough,textDecoration:"line-through"},{tag:O.link,color:C8,textDecoration:"underline"},{tag:O.heading,fontWeight:"bold",color:Z2},{tag:[O.atom,O.bool,O.special(O.variableName)],color:$2},{tag:[O.processingInstruction,O.string,O.inserted],color:Bq},{tag:O.invalid,color:Aq}]),K2=[Tq,k1(yq)];var Sq=["https://fonts.googleapis.com/css?family=Noto+Sans:400,700&subset=latin,latin-ext","https://www.geocaching.com/content/coreCSS"],Y2=document.getElementById("copy"),G2=document.getElementById("previewContainer").attachShadow({mode:"open"}),T8,bq=`<h1 style="color: chocolate">Your Geocache title</h1>

<p style="margin: 1em 0 0 0;">You can edit the content of the title above and this paragraph.</p>`;document.addEventListener("DOMContentLoaded",()=>{let Z=bq;if(q2("localStorage")&&localStorage.getItem("content")&&localStorage.getItem("content").trim().length>0)Z=localStorage.getItem("content");if(T8=new E({doc:Z,extensions:[c1(),K5.of([...V$,...a1]),t6(),eJ(),E.lineWrapping,K2,SJ({}),E.updateListener.of(($)=>{if($.docChanged){if(q2("localStorage"))localStorage.setItem("content",$.state.doc.toString().trim());U2($.state.doc.toString())}})],parent:document.querySelector("#inputText")}),kq(),U2(T8.state.doc.toString()),!xq())Y2.style.display="none";else Y2.addEventListener("click",wq)});var kq=()=>{let Z=document.createElement("html"),$=document.createElement("head"),J=document.createElement("body");Z.appendChild($),Sq.forEach((K)=>{let Y=document.createElement("link");Y.setAttribute("rel","stylesheet"),Y.setAttribute("href",K),$.appendChild(Y)});let Q=document.createElement("div");Q.classList.add("UserSuppliedContent");let X=Q.appendChild(document.createElement("span"));X.setAttribute("id","ctl00_ContentBody_LongDescription"),Q.appendChild(X),J.appendChild(Q),Z.appendChild(J),G2.appendChild(Z)},U2=(Z)=>{G2.getElementById("ctl00_ContentBody_LongDescription").innerHTML=Z},q2=(Z)=>{let $;try{$=window[Z];let J="__storage_test__";return $.setItem(J,J),$.removeItem(J),!0}catch(J){return J instanceof DOMException&&(J.name==="QuotaExceededError"||J.name==="NS_ERROR_DOM_QUOTA_REACHED")&&$&&$.length!==0}},xq=()=>{return navigator&&navigator.clipboard&&navigator.clipboard.writeText},wq=()=>{navigator.clipboard.writeText(T8.state.doc.toString()),document.getElementById("copy").innerHTML="\uD83D\uDCCB Copied!",window.setTimeout(()=>{document.getElementById("copy").innerHTML="\uD83D\uDCCB Copy"},1000)},vq=document.querySelectorAll("[data-modal]");vq.forEach(function(Z){Z.addEventListener("click",function($){$.preventDefault();const J=document.getElementById(Z.dataset.modal);J.classList.add("modal-open"),J.querySelectorAll(".modal-exit").forEach(function(X){X.addEventListener("click",function(K){K.preventDefault(),J.classList.remove("modal-open")})})})});

//# debugId=75822B07DED5D97664756E2164756E21
//# sourceMappingURL=data:application/json;base64,
